[
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "FastAI Course Notebooks",
    "section": "",
    "text": "Introduction\nProduction\nEthics\nMNIST Basics\nPet Breeds\nMulti-Category\nSizing and TTA\nCollaborative Filtering\nTabular\nNLP\nMid-level Data\nNLP Dive\nConvolutions\nResNet\nArchitecture Details\nAccelerated SGD\nFoundations\nCAM\nLearner\nConclusion"
  },
  {
    "objectID": "posts/index.html#chapters",
    "href": "posts/index.html#chapters",
    "title": "FastAI Course Notebooks",
    "section": "",
    "text": "Introduction\nProduction\nEthics\nMNIST Basics\nPet Breeds\nMulti-Category\nSizing and TTA\nCollaborative Filtering\nTabular\nNLP\nMid-level Data\nNLP Dive\nConvolutions\nResNet\nArchitecture Details\nAccelerated SGD\nFoundations\nCAM\nLearner\nConclusion"
  },
  {
    "objectID": "posts/index.html#appendices",
    "href": "posts/index.html#appendices",
    "title": "FastAI Course Notebooks",
    "section": "Appendices",
    "text": "Appendices\n\nA1 - App: Blog\nA2 - App: Jupyter"
  },
  {
    "objectID": "posts/app_blog.html",
    "href": "posts/app_blog.html",
    "title": "Creating a Blog",
    "section": "",
    "text": "[[appendix_blog]] [appendix] [role=“Creating a blog”]\nUnfortunately, when it comes to blogging, it seems like you have to make a difficult decision: either use a platform that makes it easy but subjects you and your readers to advertisements, paywalls, and fees, or spend hours setting up your own hosting service and weeks learning about all kinds of intricate details. Perhaps the biggest benefit to the “do-it-yourself” approach is that you really own your own posts, rather than being at the whim of a service provider and their decisions about how to monetize your content in the future.\nIt turns out, however, that you can have the best of both worlds!"
  },
  {
    "objectID": "posts/app_blog.html#blogging-with-github-pages",
    "href": "posts/app_blog.html#blogging-with-github-pages",
    "title": "Creating a Blog",
    "section": "Blogging with GitHub Pages",
    "text": "Blogging with GitHub Pages\nA great solution is to host your blog on a platform called GitHub Pages, which is free, has no ads or pay wall, and makes your data available in a standard way such that you can at any time move your blog to another host. But all the approaches I’ve seen to using GitHub Pages have required knowledge of the command line and arcane tools that only software developers are likely to be familiar with. For instance, GitHub’s own documentation on setting up a blog includes a long list of instructions that involve installing the Ruby programming language, using the git command-line tool, copying over version numbers, and more—17 steps in total!\nTo cut down the hassle, we’ve created an easy approach that allows you to use an entirely browser-based interface for all your blogging needs. You will be up and running with your new blog within about five minutes. It doesn’t cost anything, and you can easily add your own custom domain to it if you wish to. In this section, we’ll explain how to do it, using a template we’ve created called fast_template. (NB: be sure to check the book’s website for the latest blog recommendations, since new tools are always coming out).\n\nCreating the Repository\nYou’ll need an account on GitHub, so head over there now and create an account if you don’t have one already. Make sure that you are logged in. Normally, GitHub is used by software developers for writing code, and they use a sophisticated command-line tool to work with it—but we’re going to show you an approach that doesn’t use the command line at all!\nTo get started, point your browser to https://github.com/fastai/fast_template/generate (you need to be logged in to GitHub for the link to work). This will allow you to create a place to store your blog, called a repository. You will a screen like the one in &lt;&gt;. Note that you have to enter your repository name using the exact format shown here—that is, your GitHub username followed by .github.io.\n\nOnce you’ve entered that, and any description you like, click “Create repository from template.” You have the choice to make the repository “private,” but since you are creating a blog that you want other people to read, having the underlying files publicly available hopefully won’t be a problem for you.\nNow, let’s set up your home page!\n\n\nSetting Up Your Home Page\nWhen readers arrive at your blog the first thing that they will see is the content of a file called index.md. This is a markdown file. Markdown is a powerful yet simple way of creating formatted text, such as bullet points, italics, hyperlinks, and so forth. It is very widely used, including for all the formatting in Jupyter notebooks, nearly every part of the GitHub site, and many other places all over the internet. To create markdown text, you can just type in plain English, then add some special characters to add special behavior. For instance, if you type a * character before and after a word or phrase, that will put it in italics. Let’s try it now.\nTo open the file, click its filename in GitHub. To edit it, click on the pencil icon at the far right hand side of the screen as shown in &lt;&gt;.\n\nYou can add to, edit, or replace the texts that you see. Click “Preview changes” (&lt;&gt;) to see what your markdown text will look like in your blog. Lines that you have added or changed will appear with a green bar on the lefthand side.\n\nTo save your changes, scroll to the bottom of the page and click “Commit changes,” as shown in &lt;&gt;. On GitHub, to “commit” something means to save it to the GitHub server.\n\nNext, you should configure your blog’s settings. To do so, click on the file called _config.yml, then click the edit button like you did for the index file. Change the title, description, and GitHub username values (see &lt;&gt;. You need to leave the names before the colons in place, and type your new values in after the colon (and a space) on each line. You can also add to your email address and Twitter username if you wish, but note that these will appear on your public blog if you fill them in here.\n\nAfter you’re done, commit your changes just like you did with the index file, then wait a minute or so while GitHub processes your new blog. Point your web browser to &lt;username&gt; .github.io (replacing &lt;username&gt; with your GitHub username). You should see your blog, which will look something like &lt;&gt;.\n\n\n\nCreating Posts\nNow you’re ready to create your first post. All your posts will go in the _posts folder. Click on that now, and then click the “Create file” button. You need to be careful to name your file using the format &lt;year&gt;-&lt;month&gt;-&lt;day&gt;-&lt;name&gt;.md, as shown in &lt;&gt;, where &lt;year&gt; is a four-digit number, and &lt;month&gt; and &lt;day&gt; are two-digit numbers. &lt;name&gt; can be anything you want that will help you remember what this post was about. The .md extension is for markdown documents.\n\nYou can then type the contents of your first post. The only rule is that the first line of your post must be a markdown heading. This is created by putting # at the start of a line, as shown in &lt;&gt; (that creates a level-1 heading, which you should just use once at the start of your document; you can create level-2 headings using ##, level 3 with ###, and so forth).\n\nAs before, you can click the “Preview” button to see how your markdown formatting will look (&lt;&gt;).\n\nAnd you will need to click the “Commit new file” button to save it to GitHub, as shown in &lt;&gt;.\n\nHave a look at your blog home page again, and you will see that this post has now appeared–&lt;&gt; shows the result with the sample pose we just added. (Remember that you will need to wait a minute or so for GitHub to process the request before the file shows up.)\n\nYou may have noticed that we provided a sample blog post, which you can go ahead and delete now. Go to your _posts folder, as before, and click on 2020-01-14-welcome.md. Then click the trash icon on the far right, as shown in &lt;&gt;.\n\nIn GitHub, nothing actually changes until you commit—including when you delete a file! So, after you click the trash icon, scroll down to the bottom of the page and commit your changes.\nYou can include images in your posts by adding a line of markdown like the following:\n![Image description](images/filename.jpg)\nFor this to work, you will need to put the image inside your images folder. To do this, click the images folder, them click “Upload files” button (&lt;&gt;).\n\nNow let’s see how to do all of this directly from your computer.\n\n\nSynchronizing GitHub and Your Computer\nThere are lots of reasons you might want to copy your blog content from GitHub to your computer–you might want to be able to read or edit your posts offline, or maybe you’d like a backup in case something happens to your GitHub repository.\nGitHub does more than just let you copy your repository to your computer; it lets you synchronize it with your computer. That means you can make changes on GitHub, and they’ll copy over to your computer, and you can make changes on your computer, and they’ll copy over to GitHub. You can even let other people access and modify your blog, and their changes and your changes will be automatically combined together the next time you sync.\nTo make this work, you have to install an application called GitHub Desktop on your computer. It runs on Mac, Windows, and Linux. Follow the directions to install it, and when you run it it’ll ask you to log in to GitHub and select the repository to sync. Click “Clone a repository from the Internet,” as shown in &lt;&gt;.\n\nOnce GitHub has finished syncing your repo, you’ll be able to click “View the files of your repository in Explorer” (or Finder), as shown in &lt;&gt; and you’ll see the local copy of your blog! Try editing one of the files on your computer. Then return to GitHub Desktop, and you’ll see the “Sync” button is waiting for you to press it. When you click it your changes will be copied over to GitHub, where you’ll see them reflected on the website.\n\nIf you haven’t used git before, GitHub Desktop is a great way to get started. As you’ll discover, it’s a fundamental tool used by most data scientists. Another tool that we hope you now love is Jupyter Notebooks–and there’s a way to write your blog directly with that too!"
  },
  {
    "objectID": "posts/app_blog.html#jupyter-for-blogging",
    "href": "posts/app_blog.html#jupyter-for-blogging",
    "title": "Creating a Blog",
    "section": "Jupyter for Blogging",
    "text": "Jupyter for Blogging\nYou can also write blog posts using Jupyter notebooks. Your markdown cells, code cells, and all the outputs will appear in your exported blog post. The best way to do this may have changed by the time you are reading this book, so be sure to check out the book’s website for the latest information. As we write this, the easiest way to create a blog from notebooks is to use fastpages, which is a more advanced version of fast_template.\nTo blog with a notebook, just pop it in the _notebooks folder in your blog repo, and it will appear in your list of blog posts. When you write your notebook, write whatever you want your audience to see. Since most writing platforms make it hard to include code and outputs, many of us are in the habit of including fewer real examples than we should. This is a great way to instead get into the habit of including lots of examples as you write.\nOften, you’ll want to hide boilerplate such as import statements. You can add #hide to the top of any cell to make it not show up in output. Jupyter displays the result of the last line of a cell, so there’s no need to include print(). (Including extra code that isn’t needed means there’s more cognitive overhead for the reader; so don’t include code that you don’t really need!)"
  },
  {
    "objectID": "posts/19_learner.html",
    "href": "posts/19_learner.html",
    "title": "A fastai Learner from Scratch",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\nThis final chapter (other than the conclusion and the online chapters) is going to look a bit different. It contains far more code and far less prose than the previous chapters. We will introduce new Python keywords and libraries without discussing them. This chapter is meant to be the start of a significant research project for you. You see, we are going to implement many of the key pieces of the fastai and PyTorch APIs from scratch, building on nothing other than the components that we developed in &lt;&gt;! The key goal here is to end up with your own Learner class, and some callbacks—enough to be able to train a model on Imagenette, including examples of each of the key techniques we’ve studied. On the way to building Learner, we will create our own version of Module, Parameter, and parallel DataLoader so you have a very good idea of what those PyTorch classes do.\nThe end-of-chapter questionnaire is particularly important for this chapter. This is where we will be pointing you in the many interesting directions that you could take, using this chapter as your starting point. We suggest that you follow along with this chapter on your computer, and do lots of experiments, web searches, and whatever else you need to understand what’s going on. You’ve built up the skills and expertise to do this in the rest of this book, so we think you are going to do great!\nLet’s begin by gathering (manually) some data."
  },
  {
    "objectID": "posts/19_learner.html#data",
    "href": "posts/19_learner.html#data",
    "title": "A fastai Learner from Scratch",
    "section": "Data",
    "text": "Data\nHave a look at the source to untar_data to see how it works. We’ll use it here to access the 160-pixel version of Imagenette for use in this chapter:\n\n\nShow code\npath = untar_data(URLs.IMAGENETTE_160)\n\n\nTo access the image files, we can use get_image_files:\n\n\nShow code\nt = get_image_files(path)\nt[0]\n\n\nPath('/home/jhoward/.fastai/data/imagenette2-160/val/n03417042/n03417042_3752.JPEG')\n\n\nOr we could do the same thing using just Python’s standard library, with glob:\n\n\nShow code\nfrom glob import glob\nfiles = L(glob(f'{path}/**/*.JPEG', recursive=True)).map(Path)\nfiles[0]\n\n\nPath('/home/jhoward/.fastai/data/imagenette2-160/val/n03417042/n03417042_3752.JPEG')\n\n\nIf you look at the source for get_image_files, you’ll see it uses Python’s os.walk; this is a faster and more flexible function than glob, so be sure to try it out.\nWe can open an image with the Python Imaging Library’s Image class:\n\n\nShow code\nim = Image.open(files[0])\nim\n\n\n\n\n\n\n\n\n\n\n\nShow code\nim_t = tensor(im)\nim_t.shape\n\n\ntorch.Size([160, 213, 3])\n\n\nThat’s going to be the basis of our independent variable. For our dependent variable, we can use Path.parent from pathlib. First we’ll need our vocab:\n\n\nShow code\nlbls = files.map(Self.parent.name()).unique(); lbls\n\n\n(#10) ['n03417042','n03445777','n03888257','n03394916','n02979186','n03000684','n03425413','n01440764','n03028079','n02102040']\n\n\n…and the reverse mapping, thanks to L.val2idx:\n\n\nShow code\nv2i = lbls.val2idx(); v2i\n\n\n{'n03417042': 0,\n 'n03445777': 1,\n 'n03888257': 2,\n 'n03394916': 3,\n 'n02979186': 4,\n 'n03000684': 5,\n 'n03425413': 6,\n 'n01440764': 7,\n 'n03028079': 8,\n 'n02102040': 9}\n\n\nThat’s all the pieces we need to put together our Dataset.\n\nDataset\nA Dataset in PyTorch can be anything that supports indexing (__getitem__) and len:\n\n\nShow code\nclass Dataset:\n    def __init__(self, fns): self.fns=fns\n    def __len__(self): return len(self.fns)\n    def __getitem__(self, i):\n        im = Image.open(self.fns[i]).resize((64,64)).convert('RGB')\n        y = v2i[self.fns[i].parent.name]\n        return tensor(im).float()/255, tensor(y)\n\n\nWe need a list of training and validation filenames to pass to Dataset.__init__:\n\n\nShow code\ntrain_filt = L(o.parent.parent.name=='train' for o in files)\ntrain,valid = files[train_filt],files[~train_filt]\nlen(train),len(valid)\n\n\n(9469, 3925)\n\n\nNow we can try it out:\n\n\nShow code\ntrain_ds,valid_ds = Dataset(train),Dataset(valid)\nx,y = train_ds[0]\nx.shape,y\n\n\n(torch.Size([64, 64, 3]), tensor(0))\n\n\n\n\nShow code\nshow_image(x, title=lbls[y]);\n\n\n\n\n\n\n\n\n\nAs you see, our dataset is returning the independent and dependent variables as a tuple, which is just what we need. We’ll need to be able to collate these into a mini-batch. Generally this is done with torch.stack, which is what we’ll use here:\n\n\nShow code\ndef collate(idxs, ds): \n    xb,yb = zip(*[ds[i] for i in idxs])\n    return torch.stack(xb),torch.stack(yb)\n\n\nHere’s a mini-batch with two items, for testing our collate:\n\n\nShow code\nx,y = collate([1,2], train_ds)\nx.shape,y\n\n\n(torch.Size([2, 64, 64, 3]), tensor([0, 0]))\n\n\nNow that we have a dataset and a collation function, we’re ready to create DataLoader. We’ll add two more things here: an optional shuffle for the training set, and a ProcessPoolExecutor to do our preprocessing in parallel. A parallel data loader is very important, because opening and decoding a JPEG image is a slow process. One CPU core is not enough to decode images fast enough to keep a modern GPU busy. Here’s our DataLoader class:\n\n\nShow code\nclass DataLoader:\n    def __init__(self, ds, bs=128, shuffle=False, n_workers=1):\n        self.ds,self.bs,self.shuffle,self.n_workers = ds,bs,shuffle,n_workers\n\n    def __len__(self): return (len(self.ds)-1)//self.bs+1\n\n    def __iter__(self):\n        idxs = L.range(self.ds)\n        if self.shuffle: idxs = idxs.shuffle()\n        chunks = [idxs[n:n+self.bs] for n in range(0, len(self.ds), self.bs)]\n        with ProcessPoolExecutor(self.n_workers) as ex:\n            yield from ex.map(collate, chunks, ds=self.ds)\n\n\nLet’s try it out with our training and validation datasets:\n\n\nShow code\nn_workers = min(16, defaults.cpus)\ntrain_dl = DataLoader(train_ds, bs=128, shuffle=True, n_workers=n_workers)\nvalid_dl = DataLoader(valid_ds, bs=256, shuffle=False, n_workers=n_workers)\nxb,yb = first(train_dl)\nxb.shape,yb.shape,len(train_dl)\n\n\n(torch.Size([128, 64, 64, 3]), torch.Size([128]), 74)\n\n\nThis data loader is not much slower than PyTorch’s, but it’s far simpler. So if you’re debugging a complex data loading process, don’t be afraid to try doing things manually to help you see exactly what’s going on.\nFor normalization, we’ll need image statistics. Generally it’s fine to calculate these on a single training mini-batch, since precision isn’t needed here:\n\n\nShow code\nstats = [xb.mean((0,1,2)),xb.std((0,1,2))]\nstats\n\n\n[tensor([0.4544, 0.4453, 0.4141]), tensor([0.2812, 0.2766, 0.2981])]\n\n\nOur Normalize class just needs to store these stats and apply them (to see why the to_device is needed, try commenting it out, and see what happens later in this notebook):\n\n\nShow code\nclass Normalize:\n    def __init__(self, stats): self.stats=stats\n    def __call__(self, x):\n        if x.device != self.stats[0].device:\n            self.stats = to_device(self.stats, x.device)\n        return (x-self.stats[0])/self.stats[1]\n\n\nWe always like to test everything we build in a notebook, as soon as we build it:\n\n\nShow code\nnorm = Normalize(stats)\ndef tfm_x(x): return norm(x).permute((0,3,1,2))\n\n\n\n\nShow code\nt = tfm_x(x)\nt.mean((0,2,3)),t.std((0,2,3))\n\n\n(tensor([0.3732, 0.4907, 0.5633]), tensor([1.0212, 1.0311, 1.0131]))\n\n\nHere tfm_x isn’t just applying Normalize, but is also permuting the axis order from NHWC to NCHW (see &lt;&gt; if you need a reminder of what these acronyms refer to). PIL uses HWC axis order, which we can’t use with PyTorch, hence the need for this permute.\nThat’s all we need for the data for our model. So now we need the model itself!"
  },
  {
    "objectID": "posts/19_learner.html#module-and-parameter",
    "href": "posts/19_learner.html#module-and-parameter",
    "title": "A fastai Learner from Scratch",
    "section": "Module and Parameter",
    "text": "Module and Parameter\nTo create a model, we’ll need Module. To create Module, we’ll need Parameter, so let’s start there. Recall that in &lt;&gt; we said that the Parameter class “doesn’t actually add any functionality (other than automatically calling requires_grad_ for us). It’s only used as a”marker” to show what to include in parameters.” Here’s a definition which does exactly that:\n\n\nShow code\nclass Parameter(Tensor):\n    def __new__(self, x): return Tensor._make_subclass(Parameter, x, True)\n    def __init__(self, *args, **kwargs): self.requires_grad_()\n\n\nThe implementation here is a bit awkward: we have to define the special __new__ Python method and use the internal PyTorch method _make_subclass because, as at the time of writing, PyTorch doesn’t otherwise work correctly with this kind of subclassing or provide an officially supported API to do this. This may have been fixed by the time you read this, so look on the book’s website to see if there are updated details.\nOur Parameter now behaves just like a tensor, as we wanted:\n\n\nShow code\nParameter(tensor(3.))\n\n\ntensor(3., requires_grad=True)\n\n\nNow that we have this, we can define Module:\n\n\nShow code\nclass Module:\n    def __init__(self):\n        self.hook,self.params,self.children,self._training = None,[],[],False\n        \n    def register_parameters(self, *ps): self.params += ps\n    def register_modules   (self, *ms): self.children += ms\n        \n    @property\n    def training(self): return self._training\n    @training.setter\n    def training(self,v):\n        self._training = v\n        for m in self.children: m.training=v\n            \n    def parameters(self):\n        return self.params + sum([m.parameters() for m in self.children], [])\n\n    def __setattr__(self,k,v):\n        super().__setattr__(k,v)\n        if isinstance(v,Parameter): self.register_parameters(v)\n        if isinstance(v,Module):    self.register_modules(v)\n        \n    def __call__(self, *args, **kwargs):\n        res = self.forward(*args, **kwargs)\n        if self.hook is not None: self.hook(res, args)\n        return res\n    \n    def cuda(self):\n        for p in self.parameters(): p.data = p.data.cuda()\n\n\nThe key functionality is in the definition of parameters:\nself.params + sum([m.parameters() for m in self.children], [])\nThis means that we can ask any Module for its parameters, and it will return them, including all its child modules (recursively). But how does it know what its parameters are? It’s thanks to implementing Python’s special __setattr__ method, which is called for us any time Python sets an attribute on a class. Our implementation includes this line:\nif isinstance(v,Parameter): self.register_parameters(v)\nAs you see, this is where we use our new Parameter class as a “marker”—anything of this class is added to our params.\nPython’s __call__ allows us to define what happens when our object is treated as a function; we just call forward (which doesn’t exist here, so it’ll need to be added by subclasses). Before we do, we’ll call a hook, if it’s defined. Now you can see that PyTorch hooks aren’t doing anything fancy at all—they’re just calling any hooks that have been registered.\nOther than these pieces of functionality, our Module also provides cuda and training attributes, which we’ll use shortly.\nNow we can create our first Module, which is ConvLayer:\n\n\nShow code\nclass ConvLayer(Module):\n    def __init__(self, ni, nf, stride=1, bias=True, act=True):\n        super().__init__()\n        self.w = Parameter(torch.zeros(nf,ni,3,3))\n        self.b = Parameter(torch.zeros(nf)) if bias else None\n        self.act,self.stride = act,stride\n        init = nn.init.kaiming_normal_ if act else nn.init.xavier_normal_\n        init(self.w)\n    \n    def forward(self, x):\n        x = F.conv2d(x, self.w, self.b, stride=self.stride, padding=1)\n        if self.act: x = F.relu(x)\n        return x\n\n\nWe’re not implementing F.conv2d from scratch, since you should have already done that (using unfold) in the questionnaire in &lt;&gt;. Instead, we’re just creating a small class that wraps it up along with bias and weight initialization. Let’s check that it works correctly with Module.parameters:\n\n\nShow code\nl = ConvLayer(3, 4)\nlen(l.parameters())\n\n\n2\n\n\nAnd that we can call it (which will result in forward being called):\n\n\nShow code\nxbt = tfm_x(xb)\nr = l(xbt)\nr.shape\n\n\ntorch.Size([128, 4, 64, 64])\n\n\nIn the same way, we can implement Linear:\n\n\nShow code\nclass Linear(Module):\n    def __init__(self, ni, nf):\n        super().__init__()\n        self.w = Parameter(torch.zeros(nf,ni))\n        self.b = Parameter(torch.zeros(nf))\n        nn.init.xavier_normal_(self.w)\n    \n    def forward(self, x): return x@self.w.t() + self.b\n\n\nand test if it works:\n\n\nShow code\nl = Linear(4,2)\nr = l(torch.ones(3,4))\nr.shape\n\n\ntorch.Size([3, 2])\n\n\nLet’s also create a testing module to check that if we include multiple parameters as attributes, they are all correctly registered:\n\n\nShow code\nclass T(Module):\n    def __init__(self):\n        super().__init__()\n        self.c,self.l = ConvLayer(3,4),Linear(4,2)\n\n\nSince we have a conv layer and a linear layer, each of which has weights and biases, we’d expect four parameters in total:\n\n\nShow code\nt = T()\nlen(t.parameters())\n\n\n4\n\n\nWe should also find that calling cuda on this class puts all these parameters on the GPU:\n\n\nShow code\nt.cuda()\nt.l.w.device\n\n\ndevice(type='cuda', index=5)\n\n\nWe can now use those pieces to create a CNN.\n\nSimple CNN\nAs we’ve seen, a Sequential class makes many architectures easier to implement, so let’s make one:\n\n\nShow code\nclass Sequential(Module):\n    def __init__(self, *layers):\n        super().__init__()\n        self.layers = layers\n        self.register_modules(*layers)\n\n    def forward(self, x):\n        for l in self.layers: x = l(x)\n        return x\n\n\nThe forward method here just calls each layer in turn. Note that we have to use the register_modules method we defined in Module, since otherwise the contents of layers won’t appear in parameters.\n\nimportant: All The Code is Here: Remember that we’re not using any PyTorch functionality for modules here; we’re defining everything ourselves. So if you’re not sure what register_modules does, or why it’s needed, have another look at our code for Module to see what we wrote!\n\nWe can create a simplified AdaptivePool that only handles pooling to a 1×1 output, and flattens it as well, by just using mean:\n\n\nShow code\nclass AdaptivePool(Module):\n    def forward(self, x): return x.mean((2,3))\n\n\nThat’s enough for us to create a CNN!\n\n\nShow code\ndef simple_cnn():\n    return Sequential(\n        ConvLayer(3 ,16 ,stride=2), #32\n        ConvLayer(16,32 ,stride=2), #16\n        ConvLayer(32,64 ,stride=2), # 8\n        ConvLayer(64,128,stride=2), # 4\n        AdaptivePool(),\n        Linear(128, 10)\n    )\n\n\nLet’s see if our parameters are all being registered correctly:\n\n\nShow code\nm = simple_cnn()\nlen(m.parameters())\n\n\n10\n\n\nNow we can try adding a hook. Note that we’ve only left room for one hook in Module; you could make it a list, or use something like Pipeline to run a few as a single function:\n\n\nShow code\ndef print_stats(outp, inp): print (outp.mean().item(),outp.std().item())\nfor i in range(4): m.layers[i].hook = print_stats\n\nr = m(xbt)\nr.shape\n\n\n0.5239089727401733 0.8776043057441711\n0.43470510840415955 0.8347987532615662\n0.4357188045978546 0.7621666193008423\n0.46562111377716064 0.7416611313819885\n\n\ntorch.Size([128, 10])\n\n\nWe have data and model. Now we need a loss function."
  },
  {
    "objectID": "posts/19_learner.html#loss",
    "href": "posts/19_learner.html#loss",
    "title": "A fastai Learner from Scratch",
    "section": "Loss",
    "text": "Loss\nWe’ve already seen how to define “negative log likelihood”:\n\n\nShow code\ndef nll(input, target): return -input[range(target.shape[0]), target].mean()\n\n\nWell actually, there’s no log here, since we’re using the same definition as PyTorch. That means we need to put the log together with softmax:\n\n\nShow code\ndef log_softmax(x): return (x.exp()/(x.exp().sum(-1,keepdim=True))).log()\n\nsm = log_softmax(r); sm[0][0]\n\n\ntensor(-1.2790, grad_fn=&lt;SelectBackward&gt;)\n\n\nCombining these gives us our cross-entropy loss:\n\n\nShow code\nloss = nll(sm, yb)\nloss\n\n\ntensor(2.5666, grad_fn=&lt;NegBackward&gt;)\n\n\nNote that the formula:\n\\[\\log \\left ( \\frac{a}{b} \\right ) = \\log(a) - \\log(b)\\]\ngives a simplification when we compute the log softmax, which was previously defined as (x.exp()/(x.exp().sum(-1))).log():\n\n\nShow code\ndef log_softmax(x): return x - x.exp().sum(-1,keepdim=True).log()\nsm = log_softmax(r); sm[0][0]\n\n\ntensor(-1.2790, grad_fn=&lt;SelectBackward&gt;)\n\n\nThen, there is a more stable way to compute the log of the sum of exponentials, called the LogSumExp trick. The idea is to use the following formula:\n\\[\\log \\left ( \\sum_{j=1}^{n} e^{x_{j}} \\right ) = \\log \\left ( e^{a} \\sum_{j=1}^{n} e^{x_{j}-a} \\right ) = a + \\log \\left ( \\sum_{j=1}^{n} e^{x_{j}-a} \\right )\\]\nwhere \\(a\\) is the maximum of \\(x_{j}\\).\nHere’s the same thing in code:\n\n\nShow code\nx = torch.rand(5)\na = x.max()\nx.exp().sum().log() == a + (x-a).exp().sum().log()\n\n\ntensor(True)\n\n\nWe’ll put that into a function:\n\n\nShow code\ndef logsumexp(x):\n    m = x.max(-1)[0]\n    return m + (x-m[:,None]).exp().sum(-1).log()\n\nlogsumexp(r)[0]\n\n\ntensor(3.9784, grad_fn=&lt;SelectBackward&gt;)\n\n\nso we can use it for our log_softmax function:\n\n\nShow code\ndef log_softmax(x): return x - x.logsumexp(-1,keepdim=True)\n\n\nWhich gives the same result as before:\n\n\nShow code\nsm = log_softmax(r); sm[0][0]\n\n\ntensor(-1.2790, grad_fn=&lt;SelectBackward&gt;)\n\n\nWe can use these to create cross_entropy:\n\n\nShow code\ndef cross_entropy(preds, yb): return nll(log_softmax(preds), yb).mean()\n\n\nLet’s now combine all those pieces together to create a Learner."
  },
  {
    "objectID": "posts/19_learner.html#learner",
    "href": "posts/19_learner.html#learner",
    "title": "A fastai Learner from Scratch",
    "section": "Learner",
    "text": "Learner\nWe have data, a model, and a loss function; we only need one more thing before we can fit a model, and that’s an optimizer! Here’s SGD:\n\n\nShow code\nclass SGD:\n    def __init__(self, params, lr, wd=0.): store_attr()\n    def step(self):\n        for p in self.params:\n            p.data -= (p.grad.data + p.data*self.wd) * self.lr\n            p.grad.data.zero_()\n\n\nAs we’ve seen in this book, life is easier with a Learner. The Learner class needs to know our training and validation sets, which means we need DataLoaders to store them. We don’t need any other functionality, just a place to store them and access them:\n\n\nShow code\nclass DataLoaders:\n    def __init__(self, *dls): self.train,self.valid = dls\n\ndls = DataLoaders(train_dl,valid_dl)\n\n\nNow we’re ready to create our Learner class:\n\n\nShow code\nclass Learner:\n    def __init__(self, model, dls, loss_func, lr, cbs, opt_func=SGD):\n        store_attr()\n        for cb in cbs: cb.learner = self\n\n    def one_batch(self):\n        self('before_batch')\n        xb,yb = self.batch\n        self.preds = self.model(xb)\n        self.loss = self.loss_func(self.preds, yb)\n        if self.model.training:\n            self.loss.backward()\n            self.opt.step()\n        self('after_batch')\n\n    def one_epoch(self, train):\n        self.model.training = train\n        self('before_epoch')\n        dl = self.dls.train if train else self.dls.valid\n        for self.num,self.batch in enumerate(progress_bar(dl, leave=False)):\n            self.one_batch()\n        self('after_epoch')\n    \n    def fit(self, n_epochs):\n        self('before_fit')\n        self.opt = self.opt_func(self.model.parameters(), self.lr)\n        self.n_epochs = n_epochs\n        try:\n            for self.epoch in range(n_epochs):\n                self.one_epoch(True)\n                self.one_epoch(False)\n        except CancelFitException: pass\n        self('after_fit')\n        \n    def __call__(self,name):\n        for cb in self.cbs: getattr(cb,name,noop)()\n\n\nThis is the largest class we’ve created in the book, but each method is quite small, so by looking at each in turn you should be able to follow what’s going on.\nThe main method we’ll be calling is fit. This loops with:\nfor self.epoch in range(n_epochs)\nand at each epoch calls self.one_epoch for each of train=True and then train=False. Then self.one_epoch calls self.one_batch for each batch in dls.train or dls.valid, as appropriate (after wrapping the DataLoader in fastprogress.progress_bar. Finally, self.one_batch follows the usual set of steps to fit one mini-batch that we’ve seen throughout this book.\nBefore and after each step, Learner calls self, which calls __call__ (which is standard Python functionality). __call__ uses getattr(cb,name) on each callback in self.cbs, which is a Python built-in function that returns the attribute (a method, in this case) with the requested name. So, for instance, self('before_fit') will call cb.before_fit() for each callback where that method is defined.\nAs you can see, Learner is really just using our standard training loop, except that it’s also calling callbacks at appropriate times. So let’s define some callbacks!\n\nCallbacks\nIn Learner.__init__ we have:\nfor cb in cbs: cb.learner = self\nIn other words, every callback knows what learner it is used in. This is critical, since otherwise a callback can’t get information from the learner, or change things in the learner. Because getting information from the learner is so common, we make that easier by defining Callback as a subclass of GetAttr, with a default attribute of learner:\n\n\nShow code\nclass Callback(GetAttr): _default='learner'\n\n\nGetAttr is a fastai class that implements Python’s standard __getattr__ and __dir__ methods for you, such that any time you try to access an attribute that doesn’t exist, it passes the request along to whatever you have defined as _default.\nFor instance, we want to move all model parameters to the GPU automatically at the start of fit. We could do this by defining before_fit as self.learner.model.cuda(); however, because learner is the default attribute, and we have SetupLearnerCB inherit from Callback (which inherits from GetAttr), we can remove the .learner and just call self.model.cuda():\n\n\nShow code\nclass SetupLearnerCB(Callback):\n    def before_batch(self):\n        xb,yb = to_device(self.batch)\n        self.learner.batch = tfm_x(xb),yb\n\n    def before_fit(self): self.model.cuda()\n\n\nIn SetupLearnerCB we also move each mini-batch to the GPU, by calling to_device(self.batch) (we could also have used the longer to_device(self.learner.batch). Note however that in the line self.learner.batch = tfm_x(xb),yb we can’t remove .learner, because here we’re setting the attribute, not getting it.\nBefore we try our Learner out, let’s create a callback to track and print progress. Otherwise we won’t really know if it’s working properly:\n\n\nShow code\nclass TrackResults(Callback):\n    def before_epoch(self): self.accs,self.losses,self.ns = [],[],[]\n        \n    def after_epoch(self):\n        n = sum(self.ns)\n        print(self.epoch, self.model.training,\n              sum(self.losses).item()/n, sum(self.accs).item()/n)\n        \n    def after_batch(self):\n        xb,yb = self.batch\n        acc = (self.preds.argmax(dim=1)==yb).float().sum()\n        self.accs.append(acc)\n        n = len(xb)\n        self.losses.append(self.loss*n)\n        self.ns.append(n)\n\n\nNow we’re ready to use our Learner for the first time!\n\n\nShow code\ncbs = [SetupLearnerCB(),TrackResults()]\nlearn = Learner(simple_cnn(), dls, cross_entropy, lr=0.1, cbs=cbs)\nlearn.fit(1)\n\n\n\n\n\n0 True 2.1275552130636814 0.2314922378287042\n\n\n\n\n\n0 False 1.9942575636942674 0.2991082802547771\n\n\nIt’s quite amazing to realize that we can implement all the key ideas from fastai’s Learner in so little code! Let’s now add some learning rate scheduling.\n\n\nScheduling the Learning Rate\nIf we’re going to get good results, we’ll want an LR finder and 1cycle training. These are both annealing callbacks—that is, they are gradually changing hyperparameters as we train. Here’s LRFinder:\n\n\nShow code\nclass LRFinder(Callback):\n    def before_fit(self):\n        self.losses,self.lrs = [],[]\n        self.learner.lr = 1e-6\n        \n    def before_batch(self):\n        if not self.model.training: return\n        self.opt.lr *= 1.2\n\n    def after_batch(self):\n        if not self.model.training: return\n        if self.opt.lr&gt;10 or torch.isnan(self.loss): raise CancelFitException\n        self.losses.append(self.loss.item())\n        self.lrs.append(self.opt.lr)\n\n\nThis shows how we’re using CancelFitException, which is itself an empty class, only used to signify the type of exception. You can see in Learner that this exception is caught. (You should add and test CancelBatchException, CancelEpochException, etc. yourself.) Let’s try it out, by adding it to our list of callbacks:\n\n\nShow code\nlrfind = LRFinder()\nlearn = Learner(simple_cnn(), dls, cross_entropy, lr=0.1, cbs=cbs+[lrfind])\nlearn.fit(2)\n\n\n\n\n\n0 True 2.6336045582954903 0.11014890695955222\n\n\n\n\n\n0 False 2.230653363853503 0.18318471337579617\n\n\n\n    \n        \n      \n      16.22% [12/74 00:02&lt;00:12]\n    \n    \n\n\nAnd take a look at the results:\n\n\nShow code\nplt.plot(lrfind.lrs[:-2],lrfind.losses[:-2])\nplt.xscale('log')\n\n\n\n\n\n\n\n\n\nNow we can define our OneCycle training callback:\n\n\nShow code\nclass OneCycle(Callback):\n    def __init__(self, base_lr): self.base_lr = base_lr\n    def before_fit(self): self.lrs = []\n\n    def before_batch(self):\n        if not self.model.training: return\n        n = len(self.dls.train)\n        bn = self.epoch*n + self.num\n        mn = self.n_epochs*n\n        pct = bn/mn\n        pct_start,div_start = 0.25,10\n        if pct&lt;pct_start:\n            pct /= pct_start\n            lr = (1-pct)*self.base_lr/div_start + pct*self.base_lr\n        else:\n            pct = (pct-pct_start)/(1-pct_start)\n            lr = (1-pct)*self.base_lr\n        self.opt.lr = lr\n        self.lrs.append(lr)\n\n\nWe’ll try an LR of 0.1:\n\n\nShow code\nonecyc = OneCycle(0.1)\nlearn = Learner(simple_cnn(), dls, cross_entropy, lr=0.1, cbs=cbs+[onecyc])\n\n\nLet’s fit for a while and see how it looks (we won’t show all the output in the book—try it in the notebook to see the results):\n\n\nShow code\n#hide_output\nlearn.fit(8)\n\n\nFinally, we’ll check that the learning rate followed the schedule we defined (as you see, we’re not using cosine annealing here):\n\n\nShow code\nplt.plot(onecyc.lrs);"
  },
  {
    "objectID": "posts/19_learner.html#conclusion",
    "href": "posts/19_learner.html#conclusion",
    "title": "A fastai Learner from Scratch",
    "section": "Conclusion",
    "text": "Conclusion\nWe have explored how the key concepts of the fastai library are implemented by re-implementing them in this chapter. Since it’s mostly full of code, you should definitely try to experiment with it by looking at the corresponding notebook on the book’s website. Now that you know how it’s built, as a next step be sure to check out the intermediate and advanced tutorials in the fastai documentation to learn how to customize every bit of the library."
  },
  {
    "objectID": "posts/19_learner.html#questionnaire",
    "href": "posts/19_learner.html#questionnaire",
    "title": "A fastai Learner from Scratch",
    "section": "Questionnaire",
    "text": "Questionnaire\n\ntip: Experiments: For the questions here that ask you to explain what some function or class is, you should also complete your own code experiments.\n\n\nWhat is glob?\nHow do you open an image with the Python imaging library?\nWhat does L.map do?\nWhat does Self do?\nWhat is L.val2idx?\nWhat methods do you need to implement to create your own Dataset?\nWhy do we call convert when we open an image from Imagenette?\nWhat does ~ do? How is it useful for splitting training and validation sets?\nDoes ~ work with the L or Tensor classes? What about NumPy arrays, Python lists, or pandas DataFrames?\nWhat is ProcessPoolExecutor?\nHow does L.range(self.ds) work?\nWhat is __iter__?\nWhat is first?\nWhat is permute? Why is it needed?\nWhat is a recursive function? How does it help us define the parameters method?\nWrite a recursive function that returns the first 20 items of the Fibonacci sequence.\nWhat is super?\nWhy do subclasses of Module need to override forward instead of defining __call__?\nIn ConvLayer, why does init depend on act?\nWhy does Sequential need to call register_modules?\nWrite a hook that prints the shape of every layer’s activations.\nWhat is “LogSumExp”?\nWhy is log_softmax useful?\nWhat is GetAttr? How is it helpful for callbacks?\nReimplement one of the callbacks in this chapter without inheriting from Callback or GetAttr.\nWhat does Learner.__call__ do?\nWhat is getattr? (Note the case difference to GetAttr!)\nWhy is there a try block in fit?\nWhy do we check for model.training in one_batch?\nWhat is store_attr?\nWhat is the purpose of TrackResults.before_epoch?\nWhat does model.cuda do? How does it work?\nWhy do we need to check model.training in LRFinder and OneCycle?\nUse cosine annealing in OneCycle.\n\n\nFurther Research\n\nWrite resnet18 from scratch (refer to &lt;&gt; as needed), and train it with the Learner in this chapter.\nImplement a batchnorm layer from scratch and use it in your resnet18.\nWrite a Mixup callback for use in this chapter.\nAdd momentum to SGD.\nPick a few features that you’re interested in from fastai (or any other library) and implement them in this chapter.\nPick a research paper that’s not yet implemented in fastai or PyTorch and implement it in this chapter.\n\n\nPort it over to fastai.\nSubmit a pull request to fastai, or create your own extension module and release it.\nHint: you may find it helpful to use nbdev to create and deploy your package."
  },
  {
    "objectID": "posts/17_foundations.html",
    "href": "posts/17_foundations.html",
    "title": "A Neural Net from the Foundations",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\n[[chapter_foundations]]\nThis chapter begins a journey where we will dig deep into the internals of the models we used in the previous chapters. We will be covering many of the same things we’ve seen before, but this time around we’ll be looking much more closely at the implementation details, and much less closely at the practical issues of how and why things are as they are.\nWe will build everything from scratch, only using basic indexing into a tensor. We’ll write a neural net from the ground up, then implement backpropagation manually, so we know exactly what’s happening in PyTorch when we call loss.backward. We’ll also see how to extend PyTorch with custom autograd functions that allow us to specify our own forward and backward computations."
  },
  {
    "objectID": "posts/17_foundations.html#building-a-neural-net-layer-from-scratch",
    "href": "posts/17_foundations.html#building-a-neural-net-layer-from-scratch",
    "title": "A Neural Net from the Foundations",
    "section": "Building a Neural Net Layer from Scratch",
    "text": "Building a Neural Net Layer from Scratch\nLet’s start by refreshing our understanding of how matrix multiplication is used in a basic neural network. Since we’re building everything up from scratch, we’ll use nothing but plain Python initially (except for indexing into PyTorch tensors), and then replace the plain Python with PyTorch functionality once we’ve seen how to create it.\n\nModeling a Neuron\nA neuron receives a given number of inputs and has an internal weight for each of them. It sums those weighted inputs to produce an output and adds an inner bias. In math, this can be written as:\n\\[ out = \\sum_{i=1}^{n} x_{i} w_{i} + b\\]\nif we name our inputs \\((x_{1},\\dots,x_{n})\\), our weights \\((w_{1},\\dots,w_{n})\\), and our bias \\(b\\). In code this translates into:\noutput = sum([x*w for x,w in zip(inputs,weights)]) + bias\nThis output is then fed into a nonlinear function called an activation function before being sent to another neuron. In deep learning the most common of these is the rectified Linear unit, or ReLU, which, as we’ve seen, is a fancy way of saying:\ndef relu(x): return x if x &gt;= 0 else 0\nA deep learning model is then built by stacking a lot of those neurons in successive layers. We create a first layer with a certain number of neurons (known as hidden size) and link all the inputs to each of those neurons. Such a layer is often called a fully connected layer or a dense layer (for densely connected), or a linear layer.\nIt requires to compute, for each input in our batch and each neuron with a give weight, the dot product:\nsum([x*w for x,w in zip(input,weight)])\nIf you have done a little bit of linear algebra, you may remember that having a lot of those dot products happens when you do a matrix multiplication. More precisely, if our inputs are in a matrix x with a size of batch_size by n_inputs, and if we have grouped the weights of our neurons in a matrix w of size n_neurons by n_inputs (each neuron must have the same number of weights as it has inputs) and all the biases in a vector b of size n_neurons, then the output of this fully connected layer is:\ny = x @ w.t() + b\nwhere @ represents the matrix product and w.t() is the transpose matrix of w. The output y is then of size batch_size by n_neurons, and in position (i,j) we have (for the mathy folks out there):\n\\[y_{i,j} = \\sum_{k=1}^{n} x_{i,k} w_{k,j} + b_{j}\\]\nOr in code:\ny[i,j] = sum([a * b for a,b in zip(x[i,:],w[j,:])]) + b[j]\nThe transpose is necessary because in the mathematical definition of the matrix product m @ n, the coefficient (i,j) is:\nsum([a * b for a,b in zip(m[i,:],n[:,j])])\nSo the very basic operation we need is a matrix multiplication, as it’s what is hidden in the core of a neural net.\n\n\nMatrix Multiplication from Scratch\nLet’s write a function that computes the matrix product of two tensors, before we allow ourselves to use the PyTorch version of it. We will only use the indexing in PyTorch tensors:\n\n\nShow code\nimport torch\nfrom torch import tensor\n\n\nWe’ll need three nested for loops: one for the row indices, one for the column indices, and one for the inner sum. ac and ar stand for number of columns of a and number of rows of a, respectively (the same convention is followed for b), and we make sure calculating the matrix product is possible by checking that a has as many columns as b has rows:\n\n\nShow code\ndef matmul(a,b):\n    ar,ac = a.shape # n_rows * n_cols\n    br,bc = b.shape\n    assert ac==br\n    c = torch.zeros(ar, bc)\n    for i in range(ar):\n        for j in range(bc):\n            for k in range(ac): c[i,j] += a[i,k] * b[k,j]\n    return c\n\n\nTo test this out, we’ll pretend (using random matrices) that we’re working with a small batch of 5 MNIST images, flattened into 28×28 vectors, with linear model to turn them into 10 activations:\n\n\nShow code\nm1 = torch.randn(5,28*28)\nm2 = torch.randn(784,10)\n\n\nLet’s time our function, using the Jupyter “magic” command %time:\n\n\nShow code\n%time t1=matmul(m1, m2)\n\n\nCPU times: user 1.15 s, sys: 4.09 ms, total: 1.15 s\nWall time: 1.15 s\n\n\nAnd see how that compares to PyTorch’s built-in @:\n\n\nShow code\n%timeit -n 20 t2=m1@m2\n\n\n14 µs ± 8.95 µs per loop (mean ± std. dev. of 7 runs, 20 loops each)\n\n\nAs we can see, in Python three nested loops is a very bad idea! Python is a slow language, and this isn’t going to be very efficient. We see here that PyTorch is around 100,000 times faster than Python—and that’s before we even start using the GPU!\nWhere does this difference come from? PyTorch didn’t write its matrix multiplication in Python, but rather in C++ to make it fast. In general, whenever we do computations on tensors we will need to vectorize them so that we can take advantage of the speed of PyTorch, usually by using two techniques: elementwise arithmetic and broadcasting.\n\n\nElementwise Arithmetic\nAll the basic operators (+, -, *, /, &gt;, &lt;, ==) can be applied elementwise. That means if we write a+b for two tensors a and b that have the same shape, we will get a tensor composed of the sums the elements of a and b:\n\n\nShow code\na = tensor([10., 6, -4])\nb = tensor([2., 8, 7])\na + b\n\n\ntensor([12., 14.,  3.])\n\n\nThe Booleans operators will return an array of Booleans:\n\n\nShow code\na &lt; b\n\n\ntensor([False,  True,  True])\n\n\nIf we want to know if every element of a is less than the corresponding element in b, or if two tensors are equal, we need to combine those elementwise operations with torch.all:\n\n\nShow code\n(a &lt; b).all(), (a==b).all()\n\n\n(tensor(False), tensor(False))\n\n\nReduction operations like all(), sum() and mean() return tensors with only one element, called rank-0 tensors. If you want to convert this to a plain Python Boolean or number, you need to call .item():\n\n\nShow code\n(a + b).mean().item()\n\n\n9.666666984558105\n\n\nThe elementwise operations work on tensors of any rank, as long as they have the same shape:\n\n\nShow code\nm = tensor([[1., 2, 3], [4,5,6], [7,8,9]])\nm*m\n\n\ntensor([[ 1.,  4.,  9.],\n        [16., 25., 36.],\n        [49., 64., 81.]])\n\n\nHowever you can’t perform elementwise operations on tensors that don’t have the same shape (unless they are broadcastable, as discussed in the next section):\n\n\nShow code\nn = tensor([[1., 2, 3], [4,5,6]])\nm*n\n\n\n\n------------------------------------------------------------------------\nRuntimeError                           Traceback (most recent call last)\n&lt;ipython-input-12-add73c4f74e0&gt; in &lt;module&gt;\n      1 n = tensor([[1., 2, 3], [4,5,6]])\n----&gt; 2 m*n\n\nRuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 0\n\n\n\nWith elementwise arithmetic, we can remove one of our three nested loops: we can multiply the tensors that correspond to the i-th row of a and the j-th column of b before summing all the elements, which will speed things up because the inner loop will now be executed by PyTorch at C speed.\nTo access one column or row, we can simply write a[i,:] or b[:,j]. The : means take everything in that dimension. We could restrict this and take only a slice of that particular dimension by passing a range, like 1:5, instead of just :. In that case, we would take the elements in columns or rows 1 to 4 (the second number is noninclusive).\nOne simplification is that we can always omit a trailing colon, so a[i,:] can be abbreviated to a[i]. With all of that in mind, we can write a new version of our matrix multiplication:\n\n\nShow code\ndef matmul(a,b):\n    ar,ac = a.shape\n    br,bc = b.shape\n    assert ac==br\n    c = torch.zeros(ar, bc)\n    for i in range(ar):\n        for j in range(bc): c[i,j] = (a[i] * b[:,j]).sum()\n    return c\n\n\n\n\nShow code\n%timeit -n 20 t3 = matmul(m1,m2)\n\n\n1.7 ms ± 88.1 µs per loop (mean ± std. dev. of 7 runs, 20 loops each)\n\n\nWe’re already ~700 times faster, just by removing that inner for loop! And that’s just the beginning—with broadcasting we can remove another loop and get an even more important speed up.\n\n\nBroadcasting\nAs we discussed in &lt;&gt;, broadcasting is a term introduced by the NumPy library that describes how tensors of different ranks are treated during arithmetic operations. For instance, it’s obvious there is no way to add a 3×3 matrix with a 4×5 matrix, but what if we want to add one scalar (which can be represented as a 1×1 tensor) with a matrix? Or a vector of size 3 with a 3×4 matrix? In both cases, we can find a way to make sense of this operation.\nBroadcasting gives specific rules to codify when shapes are compatible when trying to do an elementwise operation, and how the tensor of the smaller shape is expanded to match the tensor of the bigger shape. It’s essential to master those rules if you want to be able to write code that executes quickly. In this section, we’ll expand our previous treatment of broadcasting to understand these rules.\n\nBroadcasting with a scalar\nBroadcasting with a scalar is the easiest type of broadcasting. When we have a tensor a and a scalar, we just imagine a tensor of the same shape as a filled with that scalar and perform the operation:\n\n\nShow code\na = tensor([10., 6, -4])\na &gt; 0\n\n\ntensor([ True,  True, False])\n\n\nHow are we able to do this comparison? 0 is being broadcast to have the same dimensions as a. Note that this is done without creating a tensor full of zeros in memory (that would be very inefficient).\nThis is very useful if you want to normalize your dataset by subtracting the mean (a scalar) from the entire data set (a matrix) and dividing by the standard deviation (another scalar):\n\n\nShow code\nm = tensor([[1., 2, 3], [4,5,6], [7,8,9]])\n(m - 5) / 2.73\n\n\ntensor([[-1.4652, -1.0989, -0.7326],\n        [-0.3663,  0.0000,  0.3663],\n        [ 0.7326,  1.0989,  1.4652]])\n\n\nWhat if have different means for each row of the matrix? in that case you will need to broadcast a vector to a matrix.\n\n\nBroadcasting a vector to a matrix\nWe can broadcast a vector to a matrix as follows:\n\n\nShow code\nc = tensor([10.,20,30])\nm = tensor([[1., 2, 3], [4,5,6], [7,8,9]])\nm.shape,c.shape\n\n\n(torch.Size([3, 3]), torch.Size([3]))\n\n\n\n\nShow code\nm + c\n\n\ntensor([[11., 22., 33.],\n        [14., 25., 36.],\n        [17., 28., 39.]])\n\n\nHere the elements of c are expanded to make three rows that match, making the operation possible. Again, PyTorch doesn’t actually create three copies of c in memory. This is done by the expand_as method behind the scenes:\n\n\nShow code\nc.expand_as(m)\n\n\ntensor([[10., 20., 30.],\n        [10., 20., 30.],\n        [10., 20., 30.]])\n\n\nIf we look at the corresponding tensor, we can ask for its storage property (which shows the actual contents of the memory used for the tensor) to check there is no useless data stored:\n\n\nShow code\nt = c.expand_as(m)\nt.storage()\n\n\n 10.0\n 20.0\n 30.0\n[torch.FloatStorage of size 3]\n\n\nEven though the tensor officially has nine elements, only three scalars are stored in memory. This is possible thanks to the clever trick of giving that dimension a stride of 0 (which means that when PyTorch looks for the next row by adding the stride, it doesn’t move):\n\n\nShow code\nt.stride(), t.shape\n\n\n((0, 1), torch.Size([3, 3]))\n\n\nSince m is of size 3×3, there are two ways to do broadcasting. The fact it was done on the last dimension is a convention that comes from the rules of broadcasting and has nothing to do with the way we ordered our tensors. If instead we do this, we get the same result:\n\n\nShow code\nc + m\n\n\ntensor([[11., 22., 33.],\n        [14., 25., 36.],\n        [17., 28., 39.]])\n\n\nIn fact, it’s only possible to broadcast a vector of size n with a matrix of size m by n:\n\n\nShow code\nc = tensor([10.,20,30])\nm = tensor([[1., 2, 3], [4,5,6]])\nc+m\n\n\ntensor([[11., 22., 33.],\n        [14., 25., 36.]])\n\n\nThis won’t work:\n\n\nShow code\nc = tensor([10.,20])\nm = tensor([[1., 2, 3], [4,5,6]])\nc+m\n\n\n\n------------------------------------------------------------------------\nRuntimeError                           Traceback (most recent call last)\n&lt;ipython-input-25-64bbbad4d99c&gt; in &lt;module&gt;\n      1 c = tensor([10.,20])\n      2 m = tensor([[1., 2, 3], [4,5,6]])\n----&gt; 3 c+m\n\nRuntimeError: The size of tensor a (2) must match the size of tensor b (3) at non-singleton dimension 1\n\n\n\nIf we want to broadcast in the other dimension, we have to change the shape of our vector to make it a 3×1 matrix. This is done with the unsqueeze method in PyTorch:\n\n\nShow code\nc = tensor([10.,20,30])\nm = tensor([[1., 2, 3], [4,5,6], [7,8,9]])\nc = c.unsqueeze(1)\nm.shape,c.shape\n\n\n(torch.Size([3, 3]), torch.Size([3, 1]))\n\n\nThis time, c is expanded on the column side:\n\n\nShow code\nc+m\n\n\ntensor([[11., 12., 13.],\n        [24., 25., 26.],\n        [37., 38., 39.]])\n\n\nLike before, only three scalars are stored in memory:\n\n\nShow code\nt = c.expand_as(m)\nt.storage()\n\n\n 10.0\n 20.0\n 30.0\n[torch.FloatStorage of size 3]\n\n\nAnd the expanded tensor has the right shape because the column dimension has a stride of 0:\n\n\nShow code\nt.stride(), t.shape\n\n\n((1, 0), torch.Size([3, 3]))\n\n\nWith broadcasting, by default if we need to add dimensions, they are added at the beginning. When we were broadcasting before, Pytorch was doing c.unsqueeze(0) behind the scenes:\n\n\nShow code\nc = tensor([10.,20,30])\nc.shape, c.unsqueeze(0).shape,c.unsqueeze(1).shape\n\n\n(torch.Size([3]), torch.Size([1, 3]), torch.Size([3, 1]))\n\n\nThe unsqueeze command can be replaced by None indexing:\n\n\nShow code\nc.shape, c[None,:].shape,c[:,None].shape\n\n\n(torch.Size([3]), torch.Size([1, 3]), torch.Size([3, 1]))\n\n\nYou can always omit trailing colons, and ... means all preceding dimensions:\n\n\nShow code\nc[None].shape,c[...,None].shape\n\n\n(torch.Size([1, 3]), torch.Size([3, 1]))\n\n\nWith this, we can remove another for loop in our matrix multiplication function. Now, instead of multiplying a[i] with b[:,j], we can multiply a[i] with the whole matrix b using broadcasting, then sum the results:\n\n\nShow code\ndef matmul(a,b):\n    ar,ac = a.shape\n    br,bc = b.shape\n    assert ac==br\n    c = torch.zeros(ar, bc)\n    for i in range(ar):\n#       c[i,j] = (a[i,:]          * b[:,j]).sum() # previous\n        c[i]   = (a[i  ].unsqueeze(-1) * b).sum(dim=0)\n    return c\n\n\n\n\nShow code\n%timeit -n 20 t4 = matmul(m1,m2)\n\n\n357 µs ± 7.2 µs per loop (mean ± std. dev. of 7 runs, 20 loops each)\n\n\nWe’re now 3,700 times faster than our first implementation! Before we move on, let’s discuss the rules of broadcasting in a little more detail.\n\n\nBroadcasting rules\nWhen operating on two tensors, PyTorch compares their shapes elementwise. It starts with the trailing dimensions and works its way backward, adding 1 when it meets empty dimensions. Two dimensions are compatible when one of the following is true:\n\nThey are equal.\nOne of them is 1, in which case that dimension is broadcast to make it the same as the other.\n\nArrays do not need to have the same number of dimensions. For example, if you have a 256×256×3 array of RGB values, and you want to scale each color in the image by a different value, you can multiply the image by a one-dimensional array with three values. Lining up the sizes of the trailing axes of these arrays according to the broadcast rules, shows that they are compatible:\nImage  (3d tensor): 256 x 256 x 3\nScale  (1d tensor):  (1)   (1)  3\nResult (3d tensor): 256 x 256 x 3\nHowever, a 2D tensor of size 256×256 isn’t compatible with our image:\nImage  (3d tensor): 256 x 256 x   3\nScale  (2d tensor):  (1)  256 x 256\nError\nIn our earlier examples we had with a 3×3 matrix and a vector of size 3, broadcasting was done on the rows:\nMatrix (2d tensor):   3 x 3\nVector (1d tensor): (1)   3\nResult (2d tensor):   3 x 3\nAs an exercise, try to determine what dimensions to add (and where) when you need to normalize a batch of images of size 64 x 3 x 256 x 256 with vectors of three elements (one for the mean and one for the standard deviation).\nAnother useful way of simplifying tensor manipulations is the use of Einstein summations convention.\n\n\n\nEinstein Summation\nBefore using the PyTorch operation @ or torch.matmul, there is one last way we can implement matrix multiplication: Einstein summation (einsum). This is a compact representation for combining products and sums in a general way. We write an equation like this:\nik,kj -&gt; ij\nThe lefthand side represents the operands dimensions, separated by commas. Here we have two tensors that each have two dimensions (i,k and k,j). The righthand side represents the result dimensions, so here we have a tensor with two dimensions i,j.\nThe rules of Einstein summation notation are as follows:\n\nRepeated indices on the left side are implicitly summed over if they are not on the right side.\nEach index can appear at most twice on the left side.\nThe unrepeated indices on the left side must appear on the right side.\n\nSo in our example, since k is repeated, we sum over that index. In the end the formula represents the matrix obtained when we put in (i,j) the sum of all the coefficients (i,k) in the first tensor multiplied by the coefficients (k,j) in the second tensor… which is the matrix product! Here is how we can code this in PyTorch:\n\n\nShow code\ndef matmul(a,b): return torch.einsum('ik,kj-&gt;ij', a, b)\n\n\nEinstein summation is a very practical way of expressing operations involving indexing and sum of products. Note that you can have just one member on the lefthand side. For instance, this:\ntorch.einsum('ij-&gt;ji', a)\nreturns the transpose of the matrix a. You can also have three or more members. This:\ntorch.einsum('bi,ij,bj-&gt;b', a, b, c)\nwill return a vector of size b where the k-th coordinate is the sum of a[k,i] b[i,j] c[k,j]. This notation is particularly convenient when you have more dimensions because of batches. For example, if you have two batches of matrices and want to compute the matrix product per batch, you would could this:\ntorch.einsum('bik,bkj-&gt;bij', a, b)\nLet’s go back to our new matmul implementation using einsum and look at its speed:\n\n\nShow code\n%timeit -n 20 t5 = matmul(m1,m2)\n\n\n68.7 µs ± 4.06 µs per loop (mean ± std. dev. of 7 runs, 20 loops each)\n\n\nAs you can see, not only is it practical, but it’s very fast. einsum is often the fastest way to do custom operations in PyTorch, without diving into C++ and CUDA. (But it’s generally not as fast as carefully optimized CUDA code, as you see from the results in “Matrix Multiplication from Scratch”.)\nNow that we know how to implement a matrix multiplication from scratch, we are ready to build our neural net—specifically its forward and backward passes—using just matrix multiplications."
  },
  {
    "objectID": "posts/17_foundations.html#the-forward-and-backward-passes",
    "href": "posts/17_foundations.html#the-forward-and-backward-passes",
    "title": "A Neural Net from the Foundations",
    "section": "The Forward and Backward Passes",
    "text": "The Forward and Backward Passes\nAs we saw in &lt;&gt;, to train a model, we will need to compute all the gradients of a given loss with respect to its parameters, which is known as the backward pass. The forward pass is where we compute the output of the model on a given input, based on the matrix products. As we define our first neural net, we will also delve into the problem of properly initializing the weights, which is crucial for making training start properly.\n\nDefining and Initializing a Layer\nWe will take the example of a two-layer neural net first. As we’ve seen, one layer can be expressed as y = x @ w + b, with x our inputs, y our outputs, w the weights of the layer (which is of size number of inputs by number of neurons if we don’t transpose like before), and b is the bias vector:\n\n\nShow code\ndef lin(x, w, b): return x @ w + b\n\n\nWe can stack the second layer on top of the first, but since mathematically the composition of two linear operations is another linear operation, this only makes sense if we put something nonlinear in the middle, called an activation function. As mentioned at the beginning of the chapter, in deep learning applications the activation function most commonly used is a ReLU, which returns the maximum of x and 0.\nWe won’t actually train our model in this chapter, so we’ll use random tensors for our inputs and targets. Let’s say our inputs are 200 vectors of size 100, which we group into one batch, and our targets are 200 random floats:\n\n\nShow code\nx = torch.randn(200, 100)\ny = torch.randn(200)\n\n\nFor our two-layer model we will need two weight matrices and two bias vectors. Let’s say we have a hidden size of 50 and the output size is 1 (for one of our inputs, the corresponding output is one float in this toy example). We initialize the weights randomly and the bias at zero:\n\n\nShow code\nw1 = torch.randn(100,50)\nb1 = torch.zeros(50)\nw2 = torch.randn(50,1)\nb2 = torch.zeros(1)\n\n\nThen the result of our first layer is simply:\n\n\nShow code\nl1 = lin(x, w1, b1)\nl1.shape\n\n\ntorch.Size([200, 50])\n\n\nNote that this formula works with our batch of inputs, and returns a batch of hidden state: l1 is a matrix of size 200 (our batch size) by 50 (our hidden size).\nThere is a problem with the way our model was initialized, however. To understand it, we need to look at the mean and standard deviation (std) of l1:\n\n\nShow code\nl1.mean(), l1.std()\n\n\n(tensor(0.0019), tensor(10.1058))\n\n\nThe mean is close to zero, which is understandable since both our input and weight matrices have means close to zero. But the standard deviation, which represents how far away our activations go from the mean, went from 1 to 10. This is a really big problem because that’s with just one layer. Modern neural nets can have hundred of layers, so if each of them multiplies the scale of our activations by 10, by the end of the last layer we won’t have numbers representable by a computer.\nIndeed, if we make just 50 multiplications between x and random matrices of size 100×100, we’ll have:\n\n\nShow code\nx = torch.randn(200, 100)\nfor i in range(50): x = x @ torch.randn(100,100)\nx[0:5,0:5]\n\n\ntensor([[nan, nan, nan, nan, nan],\n        [nan, nan, nan, nan, nan],\n        [nan, nan, nan, nan, nan],\n        [nan, nan, nan, nan, nan],\n        [nan, nan, nan, nan, nan]])\n\n\nThe result is nans everywhere. So maybe the scale of our matrix was too big, and we need to have smaller weights? But if we use too small weights, we will have the opposite problem—the scale of our activations will go from 1 to 0.1, and after 50 layers we’ll be left with zeros everywhere:\n\n\nShow code\nx = torch.randn(200, 100)\nfor i in range(50): x = x @ (torch.randn(100,100) * 0.01)\nx[0:5,0:5]\n\n\ntensor([[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]])\n\n\nSo we have to scale our weight matrices exactly right so that the standard deviation of our activations stays at 1. We can compute the exact value to use mathematically, as illustrated by Xavier Glorot and Yoshua Bengio in “Understanding the Difficulty of Training Deep Feedforward Neural Networks”. The right scale for a given layer is \\(1/\\sqrt{n_{in}}\\), where \\(n_{in}\\) represents the number of inputs.\nIn our case, if we have 100 inputs, we should scale our weight matrices by 0.1:\n\n\nShow code\nx = torch.randn(200, 100)\nfor i in range(50): x = x @ (torch.randn(100,100) * 0.1)\nx[0:5,0:5]\n\n\ntensor([[ 0.7554,  0.6167, -0.1757, -1.5662,  0.5644],\n        [-0.1987,  0.6292,  0.3283, -1.1538,  0.5416],\n        [ 0.6106,  0.2556, -0.0618, -0.9463,  0.4445],\n        [ 0.4484,  0.7144,  0.1164, -0.8626,  0.4413],\n        [ 0.3463,  0.5930,  0.3375, -0.9486,  0.5643]])\n\n\nFinally some numbers that are neither zeros nor nans! Notice how stable the scale of our activations is, even after those 50 fake layers:\n\n\nShow code\nx.std()\n\n\ntensor(0.7042)\n\n\nIf you play a little bit with the value for scale you’ll notice that even a slight variation from 0.1 will get you either to very small or very large numbers, so initializing the weights properly is extremely important.\nLet’s go back to our neural net. Since we messed a bit with our inputs, we need to redefine them:\n\n\nShow code\nx = torch.randn(200, 100)\ny = torch.randn(200)\n\n\nAnd for our weights, we’ll use the right scale, which is known as Xavier initialization (or Glorot initialization):\n\n\nShow code\nfrom math import sqrt\nw1 = torch.randn(100,50) / sqrt(100)\nb1 = torch.zeros(50)\nw2 = torch.randn(50,1) / sqrt(50)\nb2 = torch.zeros(1)\n\n\nNow if we compute the result of the first layer, we can check that the mean and standard deviation are under control:\n\n\nShow code\nl1 = lin(x, w1, b1)\nl1.mean(),l1.std()\n\n\n(tensor(-0.0050), tensor(1.0000))\n\n\nVery good. Now we need to go through a ReLU, so let’s define one. A ReLU removes the negatives and replaces them with zeros, which is another way of saying it clamps our tensor at zero:\n\n\nShow code\ndef relu(x): return x.clamp_min(0.)\n\n\nWe pass our activations through this:\n\n\nShow code\nl2 = relu(l1)\nl2.mean(),l2.std()\n\n\n(tensor(0.3961), tensor(0.5783))\n\n\nAnd we’re back to square one: the mean of our activations has gone to 0.4 (which is understandable since we removed the negatives) and the std went down to 0.58. So like before, after a few layers we will probably wind up with zeros:\n\n\nShow code\nx = torch.randn(200, 100)\nfor i in range(50): x = relu(x @ (torch.randn(100,100) * 0.1))\nx[0:5,0:5]\n\n\ntensor([[0.0000e+00, 1.9689e-08, 4.2820e-08, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 1.6701e-08, 4.3501e-08, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 1.0976e-08, 3.0411e-08, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 1.8457e-08, 4.9469e-08, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 1.9949e-08, 4.1643e-08, 0.0000e+00, 0.0000e+00]])\n\n\nThis means our initialization wasn’t right. Why? At the time Glorot and Bengio wrote their article, the popular activation in a neural net was the hyperbolic tangent (tanh, which is the one they used), and that initialization doesn’t account for our ReLU. Fortunately, someone else has done the math for us and computed the right scale for us to use. In “Delving Deep into Rectifiers: Surpassing Human-Level Performance” (which we’ve seen before—it’s the article that introduced the ResNet), Kaiming He et al. show that we should use the following scale instead: \\(\\sqrt{2 / n_{in}}\\), where \\(n_{in}\\) is the number of inputs of our model. Let’s see what this gives us:\n\n\nShow code\nx = torch.randn(200, 100)\nfor i in range(50): x = relu(x @ (torch.randn(100,100) * sqrt(2/100)))\nx[0:5,0:5]\n\n\ntensor([[0.2871, 0.0000, 0.0000, 0.0000, 0.0026],\n        [0.4546, 0.0000, 0.0000, 0.0000, 0.0015],\n        [0.6178, 0.0000, 0.0000, 0.0180, 0.0079],\n        [0.3333, 0.0000, 0.0000, 0.0545, 0.0000],\n        [0.1940, 0.0000, 0.0000, 0.0000, 0.0096]])\n\n\nThat’s better: our numbers aren’t all zeroed this time. So let’s go back to the definition of our neural net and use this initialization (which is named Kaiming initialization or He initialization):\n\n\nShow code\nx = torch.randn(200, 100)\ny = torch.randn(200)\n\n\n\n\nShow code\nw1 = torch.randn(100,50) * sqrt(2 / 100)\nb1 = torch.zeros(50)\nw2 = torch.randn(50,1) * sqrt(2 / 50)\nb2 = torch.zeros(1)\n\n\nLet’s look at the scale of our activations after going through the first linear layer and ReLU:\n\n\nShow code\nl1 = lin(x, w1, b1)\nl2 = relu(l1)\nl2.mean(), l2.std()\n\n\n(tensor(0.5661), tensor(0.8339))\n\n\nMuch better! Now that our weights are properly initialized, we can define our whole model:\n\n\nShow code\ndef model(x):\n    l1 = lin(x, w1, b1)\n    l2 = relu(l1)\n    l3 = lin(l2, w2, b2)\n    return l3\n\n\nThis is the forward pass. Now all that’s left to do is to compare our output to the labels we have (random numbers, in this example) with a loss function. In this case, we will use the mean squared error. (It’s a toy problem, and this is the easiest loss function to use for what is next, computing the gradients.)\nThe only subtlety is that our outputs and targets don’t have exactly the same shape—after going though the model, we get an output like this:\n\n\nShow code\nout = model(x)\nout.shape\n\n\ntorch.Size([200, 1])\n\n\nTo get rid of this trailing 1 dimension, we use the squeeze function:\n\n\nShow code\ndef mse(output, targ): return (output.squeeze(-1) - targ).pow(2).mean()\n\n\nAnd now we are ready to compute our loss:\n\n\nShow code\nloss = mse(out, y)\n\n\nThat’s all for the forward pass—let’s now look at the gradients.\n\n\nGradients and the Backward Pass\nWe’ve seen that PyTorch computes all the gradients we need with a magic call to loss.backward, but let’s explore what’s happening behind the scenes.\nNow comes the part where we need to compute the gradients of the loss with respect to all the weights of our model, so all the floats in w1, b1, w2, and b2. For this, we will need a bit of math—specifically the chain rule. This is the rule of calculus that guides how we can compute the derivative of a composed function:\n\\[(g \\circ f)'(x) = g'(f(x)) f'(x)\\]\n\nj: I find this notation very hard to wrap my head around, so instead I like to think of it as: if y = g(u) and u=f(x); then dy/dx = dy/du * du/dx. The two notations mean the same thing, so use whatever works for you.\n\nOur loss is a big composition of different functions: mean squared error (which is in turn the composition of a mean and a power of two), the second linear layer, a ReLU and the first linear layer. For instance, if we want the gradients of the loss with respect to b2 and our loss is defined by:\nloss = mse(out,y) = mse(lin(l2, w2, b2), y)\nThe chain rule tells us that we have: \\[\\frac{\\text{d} loss}{\\text{d} b_{2}} = \\frac{\\text{d} loss}{\\text{d} out} \\times \\frac{\\text{d} out}{\\text{d} b_{2}} = \\frac{\\text{d}}{\\text{d} out} mse(out, y) \\times \\frac{\\text{d}}{\\text{d} b_{2}} lin(l_{2}, w_{2}, b_{2})\\]\nTo compute the gradients of the loss with respect to \\(b_{2}\\), we first need the gradients of the loss with respect to our output \\(out\\). It’s the same if we want the gradients of the loss with respect to \\(w_{2}\\). Then, to get the gradients of the loss with respect to \\(b_{1}\\) or \\(w_{1}\\), we will need the gradients of the loss with respect to \\(l_{1}\\), which in turn requires the gradients of the loss with respect to \\(l_{2}\\), which will need the gradients of the loss with respect to \\(out\\).\nSo to compute all the gradients we need for the update, we need to begin from the output of the model and work our way backward, one layer after the other—which is why this step is known as backpropagation. We can automate it by having each function we implemented (relu, mse, lin) provide its backward step: that is, how to derive the gradients of the loss with respect to the input(s) from the gradients of the loss with respect to the output.\nHere we populate those gradients in an attribute of each tensor, a bit like PyTorch does with .grad.\nThe first are the gradients of the loss with respect to the output of our model (which is the input of the loss function). We undo the squeeze we did in mse, then we use the formula that gives us the derivative of \\(x^{2}\\): \\(2x\\). The derivative of the mean is just \\(1/n\\) where \\(n\\) is the number of elements in our input:\n\n\nShow code\ndef mse_grad(inp, targ): \n    # grad of loss with respect to output of previous layer\n    inp.g = 2. * (inp.squeeze() - targ).unsqueeze(-1) / inp.shape[0]\n\n\nFor the gradients of the ReLU and our linear layer, we use the gradients of the loss with respect to the output (in out.g) and apply the chain rule to compute the gradients of the loss with respect to the input (in inp.g). The chain rule tells us that inp.g = relu'(inp) * out.g. The derivative of relu is either 0 (when inputs are negative) or 1 (when inputs are positive), so this gives us:\n\n\nShow code\ndef relu_grad(inp, out):\n    # grad of relu with respect to input activations\n    inp.g = (inp&gt;0).float() * out.g\n\n\nThe scheme is the same to compute the gradients of the loss with respect to the inputs, weights, and bias in the linear layer:\n\n\nShow code\ndef lin_grad(inp, out, w, b):\n    # grad of matmul with respect to input\n    inp.g = out.g @ w.t()\n    w.g = inp.t() @ out.g\n    b.g = out.g.sum(0)\n\n\nWe won’t linger on the mathematical formulas that define them since they’re not important for our purposes, but do check out Khan Academy’s excellent calculus lessons if you’re interested in this topic.\n\n\nSidebar: SymPy\nSymPy is a library for symbolic computation that is extremely useful library when working with calculus. Per the documentation:\n\n: Symbolic computation deals with the computation of mathematical objects symbolically. This means that the mathematical objects are represented exactly, not approximately, and mathematical expressions with unevaluated variables are left in symbolic form.\n\nTo do symbolic computation, we first define a symbol, and then do a computation, like so:\n\n\nShow code\nfrom sympy import symbols,diff\nsx,sy = symbols('sx sy')\ndiff(sx**2, sx)\n\n\n\\(\\displaystyle 2 sx\\)\n\n\nHere, SymPy has taken the derivative of x**2 for us! It can take the derivative of complicated compound expressions, simplify and factor equations, and much more. There’s really not much reason for anyone to do calculus manually nowadays—for calculating gradients, PyTorch does it for us, and for showing the equations, SymPy does it for us!\n\n\nEnd sidebar\nOnce we have have defined those functions, we can use them to write the backward pass. Since each gradient is automatically populated in the right tensor, we don’t need to store the results of those _grad functions anywhere—we just need to execute them in the reverse order of the forward pass, to make sure that in each function out.g exists:\n\n\nShow code\ndef forward_and_backward(inp, targ):\n    # forward pass:\n    l1 = inp @ w1 + b1\n    l2 = relu(l1)\n    out = l2 @ w2 + b2\n    # we don't actually need the loss in backward!\n    loss = mse(out, targ)\n    \n    # backward pass:\n    mse_grad(out, targ)\n    lin_grad(l2, out, w2, b2)\n    relu_grad(l1, l2)\n    lin_grad(inp, l1, w1, b1)\n\n\nAnd now we can access the gradients of our model parameters in w1.g, b1.g, w2.g, and b2.g.\nWe have successfully defined our model—now let’s make it a bit more like a PyTorch module.\n\n\nRefactoring the Model\nThe three functions we used have two associated functions: a forward pass and a backward pass. Instead of writing them separately, we can create a class to wrap them together. That class can also store the inputs and outputs for the backward pass. This way, we will just have to call backward:\n\n\nShow code\nclass Relu():\n    def __call__(self, inp):\n        self.inp = inp\n        self.out = inp.clamp_min(0.)\n        return self.out\n    \n    def backward(self): self.inp.g = (self.inp&gt;0).float() * self.out.g\n\n\n__call__ is a magic name in Python that will make our class callable. This is what will be executed when we type y = Relu()(x). We can do the same for our linear layer and the MSE loss:\n\n\nShow code\nclass Lin():\n    def __init__(self, w, b): self.w,self.b = w,b\n        \n    def __call__(self, inp):\n        self.inp = inp\n        self.out = inp@self.w + self.b\n        return self.out\n    \n    def backward(self):\n        self.inp.g = self.out.g @ self.w.t()\n        self.w.g = self.inp.t() @ self.out.g\n        self.b.g = self.out.g.sum(0)\n\n\n\n\nShow code\nclass Mse():\n    def __call__(self, inp, targ):\n        self.inp = inp\n        self.targ = targ\n        self.out = (inp.squeeze() - targ).pow(2).mean()\n        return self.out\n    \n    def backward(self):\n        x = (self.inp.squeeze()-self.targ).unsqueeze(-1)\n        self.inp.g = 2.*x/self.targ.shape[0]\n\n\nThen we can put everything in a model that we initiate with our tensors w1, b1, w2, b2:\n\n\nShow code\nclass Model():\n    def __init__(self, w1, b1, w2, b2):\n        self.layers = [Lin(w1,b1), Relu(), Lin(w2,b2)]\n        self.loss = Mse()\n        \n    def __call__(self, x, targ):\n        for l in self.layers: x = l(x)\n        return self.loss(x, targ)\n    \n    def backward(self):\n        self.loss.backward()\n        for l in reversed(self.layers): l.backward()\n\n\nWhat is really nice about this refactoring and registering things as layers of our model is that the forward and backward passes are now really easy to write. If we want to instantiate our model, we just need to write:\n\n\nShow code\nmodel = Model(w1, b1, w2, b2)\n\n\nThe forward pass can then be executed with:\n\n\nShow code\nloss = model(x, y)\n\n\nAnd the backward pass with:\n\n\nShow code\nmodel.backward()\n\n\n\n\nGoing to PyTorch\nThe Lin, Mse and Relu classes we wrote have a lot in common, so we could make them all inherit from the same base class:\n\n\nShow code\nclass LayerFunction():\n    def __call__(self, *args):\n        self.args = args\n        self.out = self.forward(*args)\n        return self.out\n    \n    def forward(self):  raise Exception('not implemented')\n    def bwd(self):      raise Exception('not implemented')\n    def backward(self): self.bwd(self.out, *self.args)\n\n\nThen we just need to implement forward and bwd in each of our subclasses:\n\n\nShow code\nclass Relu(LayerFunction):\n    def forward(self, inp): return inp.clamp_min(0.)\n    def bwd(self, out, inp): inp.g = (inp&gt;0).float() * out.g\n\n\n\n\nShow code\nclass Lin(LayerFunction):\n    def __init__(self, w, b): self.w,self.b = w,b\n        \n    def forward(self, inp): return inp@self.w + self.b\n    \n    def bwd(self, out, inp):\n        inp.g = out.g @ self.w.t()\n        self.w.g = inp.t() @ self.out.g\n        self.b.g = out.g.sum(0)\n\n\n\n\nShow code\nclass Mse(LayerFunction):\n    def forward (self, inp, targ): return (inp.squeeze() - targ).pow(2).mean()\n    def bwd(self, out, inp, targ): \n        inp.g = 2*(inp.squeeze()-targ).unsqueeze(-1) / targ.shape[0]\n\n\nThe rest of our model can be the same as before. This is getting closer and closer to what PyTorch does. Each basic function we need to differentiate is written as a torch.autograd.Function object that has a forward and a backward method. PyTorch will then keep trace of any computation we do to be able to properly run the backward pass, unless we set the requires_grad attribute of our tensors to False.\nWriting one of these is (almost) as easy as writing our original classes. The difference is that we choose what to save and what to put in a context variable (so that we make sure we don’t save anything we don’t need), and we return the gradients in the backward pass. It’s very rare to have to write your own Function but if you ever need something exotic or want to mess with the gradients of a regular function, here is how to write one:\n\n\nShow code\nfrom torch.autograd import Function\n\nclass MyRelu(Function):\n    @staticmethod\n    def forward(ctx, i):\n        result = i.clamp_min(0.)\n        ctx.save_for_backward(i)\n        return result\n    \n    @staticmethod\n    def backward(ctx, grad_output):\n        i, = ctx.saved_tensors\n        return grad_output * (i&gt;0).float()\n\n\nThe structure used to build a more complex model that takes advantage of those Functions is a torch.nn.Module. This is the base structure for all models, and all the neural nets you have seen up until now inherited from that class. It mostly helps to register all the trainable parameters, which as we’ve seen can be used in the training loop.\nTo implement an nn.Module you just need to:\n\nMake sure the superclass __init__ is called first when you initialize it.\nDefine any parameters of the model as attributes with nn.Parameter.\nDefine a forward function that returns the output of your model.\n\nAs an example, here is the linear layer from scratch:\n\n\nShow code\nimport torch.nn as nn\n\nclass LinearLayer(nn.Module):\n    def __init__(self, n_in, n_out):\n        super().__init__()\n        self.weight = nn.Parameter(torch.randn(n_out, n_in) * sqrt(2/n_in))\n        self.bias = nn.Parameter(torch.zeros(n_out))\n    \n    def forward(self, x): return x @ self.weight.t() + self.bias\n\n\nAs you see, this class automatically keeps track of what parameters have been defined:\n\n\nShow code\nlin = LinearLayer(10,2)\np1,p2 = lin.parameters()\np1.shape,p2.shape\n\n\n(torch.Size([2, 10]), torch.Size([2]))\n\n\nIt is thanks to this feature of nn.Module that we can just say opt.step() and have an optimizer loop through the parameters and update each one.\nNote that in PyTorch, the weights are stored as an n_out x n_in matrix, which is why we have the transpose in the forward pass.\nBy using the linear layer from PyTorch (which uses the Kaiming initialization as well), the model we have been building up during this chapter can be written like this:\n\n\nShow code\nclass Model(nn.Module):\n    def __init__(self, n_in, nh, n_out):\n        super().__init__()\n        self.layers = nn.Sequential(\n            nn.Linear(n_in,nh), nn.ReLU(), nn.Linear(nh,n_out))\n        self.loss = mse\n        \n    def forward(self, x, targ): return self.loss(self.layers(x).squeeze(), targ)\n\n\nfastai provides its own variant of Module that is identical to nn.Module, but doesn’t require you to call super().__init__() (it does that for you automatically):\n\n\nShow code\nclass Model(Module):\n    def __init__(self, n_in, nh, n_out):\n        self.layers = nn.Sequential(\n            nn.Linear(n_in,nh), nn.ReLU(), nn.Linear(nh,n_out))\n        self.loss = mse\n        \n    def forward(self, x, targ): return self.loss(self.layers(x).squeeze(), targ)\n\n\nIn the last chapter, we will start from such a model and see how to build a training loop from scratch and refactor it to what we’ve been using in previous chapters."
  },
  {
    "objectID": "posts/17_foundations.html#conclusion",
    "href": "posts/17_foundations.html#conclusion",
    "title": "A Neural Net from the Foundations",
    "section": "Conclusion",
    "text": "Conclusion\nIn this chapter we explored the foundations of deep learning, beginning with matrix multiplication and moving on to implementing the forward and backward passes of a neural net from scratch. We then refactored our code to show how PyTorch works beneath the hood.\nHere are a few things to remember:\n\nA neural net is basically a bunch of matrix multiplications with nonlinearities in between.\nPython is slow, so to write fast code we have to vectorize it and take advantage of techniques such as elementwise arithmetic and broadcasting.\nTwo tensors are broadcastable if the dimensions starting from the end and going backward match (if they are the same, or one of them is 1). To make tensors broadcastable, we may need to add dimensions of size 1 with unsqueeze or a None index.\nProperly initializing a neural net is crucial to get training started. Kaiming initialization should be used when we have ReLU nonlinearities.\nThe backward pass is the chain rule applied multiple times, computing the gradients from the output of our model and going back, one layer at a time.\nWhen subclassing nn.Module (if not using fastai’s Module) we have to call the superclass __init__ method in our __init__ method and we have to define a forward function that takes an input and returns the desired result."
  },
  {
    "objectID": "posts/17_foundations.html#questionnaire",
    "href": "posts/17_foundations.html#questionnaire",
    "title": "A Neural Net from the Foundations",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWrite the Python code to implement a single neuron.\nWrite the Python code to implement ReLU.\nWrite the Python code for a dense layer in terms of matrix multiplication.\nWrite the Python code for a dense layer in plain Python (that is, with list comprehensions and functionality built into Python).\nWhat is the “hidden size” of a layer?\nWhat does the t method do in PyTorch?\nWhy is matrix multiplication written in plain Python very slow?\nIn matmul, why is ac==br?\nIn Jupyter Notebook, how do you measure the time taken for a single cell to execute?\nWhat is “elementwise arithmetic”?\nWrite the PyTorch code to test whether every element of a is greater than the corresponding element of b.\nWhat is a rank-0 tensor? How do you convert it to a plain Python data type?\nWhat does this return, and why? tensor([1,2]) + tensor([1])\nWhat does this return, and why? tensor([1,2]) + tensor([1,2,3])\nHow does elementwise arithmetic help us speed up matmul?\nWhat are the broadcasting rules?\nWhat is expand_as? Show an example of how it can be used to match the results of broadcasting.\nHow does unsqueeze help us to solve certain broadcasting problems?\nHow can we use indexing to do the same operation as unsqueeze?\nHow do we show the actual contents of the memory used for a tensor?\nWhen adding a vector of size 3 to a matrix of size 3×3, are the elements of the vector added to each row or each column of the matrix? (Be sure to check your answer by running this code in a notebook.)\nDo broadcasting and expand_as result in increased memory use? Why or why not?\nImplement matmul using Einstein summation.\nWhat does a repeated index letter represent on the left-hand side of einsum?\nWhat are the three rules of Einstein summation notation? Why?\nWhat are the forward pass and backward pass of a neural network?\nWhy do we need to store some of the activations calculated for intermediate layers in the forward pass?\nWhat is the downside of having activations with a standard deviation too far away from 1?\nHow can weight initialization help avoid this problem?\nWhat is the formula to initialize weights such that we get a standard deviation of 1 for a plain linear layer, and for a linear layer followed by ReLU?\nWhy do we sometimes have to use the squeeze method in loss functions?\nWhat does the argument to the squeeze method do? Why might it be important to include this argument, even though PyTorch does not require it?\nWhat is the “chain rule”? Show the equation in either of the two forms presented in this chapter.\nShow how to calculate the gradients of mse(lin(l2, w2, b2), y) using the chain rule.\nWhat is the gradient of ReLU? Show it in math or code. (You shouldn’t need to commit this to memory—try to figure it using your knowledge of the shape of the function.)\nIn what order do we need to call the *_grad functions in the backward pass? Why?\nWhat is __call__?\nWhat methods must we implement when writing a torch.autograd.Function?\nWrite nn.Linear from scratch, and test it works.\nWhat is the difference between nn.Module and fastai’s Module?\n\n\nFurther Research\n\nImplement ReLU as a torch.autograd.Function and train a model with it.\nIf you are mathematically inclined, find out what the gradients of a linear layer are in mathematical notation. Map that to the implementation we saw in this chapter.\nLearn about the unfold method in PyTorch, and use it along with matrix multiplication to implement your own 2D convolution function. Then train a CNN that uses it.\nImplement everything in this chapter using NumPy instead of PyTorch."
  },
  {
    "objectID": "posts/15_arch_details.html",
    "href": "posts/15_arch_details.html",
    "title": "Application Architectures Deep Dive",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_arch_details]]\nWe are now in the exciting position that we can fully understand the architectures that we have been using for our state-of-the-art models for computer vision, natural language processing, and tabular analysis. In this chapter, we’re going to fill in all the missing details on how fastai’s application models work and show you how to build the models they use.\nWe will also go back to the custom data preprocessing pipeline we saw in &lt;&gt; for Siamese networks and show you how you can use the components in the fastai library to build custom pretrained models for new tasks.\nWe’ll start with computer vision."
  },
  {
    "objectID": "posts/15_arch_details.html#computer-vision",
    "href": "posts/15_arch_details.html#computer-vision",
    "title": "Application Architectures Deep Dive",
    "section": "Computer Vision",
    "text": "Computer Vision\nFor computer vision application we use the functions vision_learner and unet_learner to build our models, depending on the task. In this section we’ll explore how to build the Learner objects we used in Parts 1 and 2 of this book.\n\nvision_learner\nLet’s take a look at what happens when we use the vision_learner function. We begin by passing this function an architecture to use for the body of the network. Most of the time we use a ResNet, which you already know how to create, so we don’t need to delve into that any further. Pretrained weights are downloaded as required and loaded into the ResNet.\nThen, for transfer learning, the network needs to be cut. This refers to slicing off the final layer, which is only responsible for ImageNet-specific categorization. In fact, we do not slice off only this layer, but everything from the adaptive average pooling layer onwards. The reason for this will become clear in just a moment. Since different architectures might use different types of pooling layers, or even completely different kinds of heads, we don’t just search for the adaptive pooling layer to decide where to cut the pretrained model. Instead, we have a dictionary of information that is used for each model to determine where its body ends, and its head starts. We call this model_meta—here it is for resnet-50:\n\n\nShow code\nmodel_meta[resnet50]\n\n\n{'cut': -2,\n 'split': &lt;function fastai.vision.learner._resnet_split(m)&gt;,\n 'stats': ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])}\n\n\n\njargon: Body and Head: The “head” of a neural net is the part that is specialized for a particular task. For a CNN, it’s generally the part after the adaptive average pooling layer. The “body” is everything else, and includes the “stem” (which we learned about in &lt;&gt;).\n\nIf we take all of the layers prior to the cut point of -2, we get the part of the model that fastai will keep for transfer learning. Now, we put on our new head. This is created using the function create_head:\n\n\nShow code\n#hide_output\ncreate_head(20,2)\n\n\nSequential(\n  (0): AdaptiveConcatPool2d(\n    (ap): AdaptiveAvgPool2d(output_size=1)\n    (mp): AdaptiveMaxPool2d(output_size=1)\n  )\n  (1): full: False\n  (2): BatchNorm1d(20, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (3): Dropout(p=0.25, inplace=False)\n  (4): Linear(in_features=20, out_features=512, bias=False)\n  (5): ReLU(inplace=True)\n  (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (7): Dropout(p=0.5, inplace=False)\n  (8): Linear(in_features=512, out_features=2, bias=False)\n)\n\n\nSequential(\n  (0): AdaptiveConcatPool2d(\n    (ap): AdaptiveAvgPool2d(output_size=1)\n    (mp): AdaptiveMaxPool2d(output_size=1)\n  )\n  (1): Flatten()\n  (2): BatchNorm1d(20, eps=1e-05, momentum=0.1, affine=True)\n  (3): Dropout(p=0.25, inplace=False)\n  (4): Linear(in_features=20, out_features=512, bias=False)\n  (5): ReLU(inplace=True)\n  (6): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True)\n  (7): Dropout(p=0.5, inplace=False)\n  (8): Linear(in_features=512, out_features=2, bias=False)\n)\nWith this function you can choose how many additional linear layers are added to the end, how much dropout to use after each one, and what kind of pooling to use. By default, fastai will apply both average pooling, and max pooling, and will concatenate the two together (this is the AdaptiveConcatPool2d layer). This is not a particularly common approach, but it was developed independently at fastai and other research labs in recent years, and tends to provide some small improvement over using just average pooling.\nfastai is a bit different from most libraries in that by default it adds two linear layers, rather than one, in the CNN head. The reason for this is that transfer learning can still be useful even, as we have seen, when transferring the pretrained model to very different domains. However, just using a single linear layer is unlikely to be enough in these cases; we have found that using two linear layers can allow transfer learning to be used more quickly and easily, in more situations.\n\nnote: One Last Batchnorm?: One parameter to create_head that is worth looking at is bn_final. Setting this to true will cause a batchnorm layer to be added as your final layer. This can be useful in helping your model scale appropriately for your output activations. We haven’t seen this approach published anywhere as yet, but we have found that it works well in practice wherever we have used it.\n\nLet’s now take a look at what unet_learner did in the segmentation problem we showed in &lt;&gt;.\n\n\nunet_learner\nOne of the most interesting architectures in deep learning is the one that we used for segmentation in &lt;&gt;. Segmentation is a challenging task, because the output required is really an image, or a pixel grid, containing the predicted label for every pixel. There are other tasks that share a similar basic design, such as increasing the resolution of an image (super-resolution), adding color to a black-and-white image (colorization), or converting a photo into a synthetic painting (style transfer)—these tasks are covered by an online chapter of this book, so be sure to check it out after you’ve read this chapter. In each case, we are starting with an image and converting it to some other image of the same dimensions or aspect ratio, but with the pixels altered in some way. We refer to these as generative vision models.\nThe way we do this is to start with the exact same approach to developing a CNN head as we saw in the previous problem. We start with a ResNet, for instance, and cut off the adaptive pooling layer and everything after that. Then we replace those layers with our custom head, which does the generative task.\nThere was a lot of handwaving in that last sentence! How on earth do we create a CNN head that generates an image? If we start with, say, a 224-pixel input image, then at the end of the ResNet body we will have a 7×7 grid of convolutional activations. How can we convert that into a 224-pixel segmentation mask?\nNaturally, we do this with a neural network! So we need some kind of layer that can increase the grid size in a CNN. One very simple approach to this is to replace every pixel in the 7×7 grid with four pixels in a 2×2 square. Each of those four pixels will have the same value—this is known as nearest neighbor interpolation. PyTorch provides a layer that does this for us, so one option is to create a head that contains stride-1 convolutional layers (along with batchnorm and ReLU layers as usual) interspersed with 2×2 nearest neighbor interpolation layers. In fact, you can try this now! See if you can create a custom head designed like this, and try it on the CamVid segmentation task. You should find that you get some reasonable results, although they won’t be as good as our &lt;&gt; results.\nAnother approach is to replace the nearest neighbor and convolution combination with a transposed convolution, otherwise known as a stride half convolution. This is identical to a regular convolution, but first zero padding is inserted between all the pixels in the input. This is easiest to see with a picture—&lt;&gt; shows a diagram from the excellent convolutional arithmetic paper we discussed in &lt;&gt;, showing a 3×3 transposed convolution applied to a 3×3 image.\n\nAs you see, the result of this is to increase the size of the input. You can try this out now by using fastai’s ConvLayer class; pass the parameter transpose=True to create a transposed convolution, instead of a regular one, in your custom head.\nNeither of these approaches, however, works really well. The problem is that our 7×7 grid simply doesn’t have enough information to create a 224×224-pixel output. It’s asking an awful lot of the activations of each of those grid cells to have enough information to fully regenerate every pixel in the output. The solution to this problem is to use skip connections, like in a ResNet, but skipping from the activations in the body of the ResNet all the way over to the activations of the transposed convolution on the opposite side of the architecture. This approach, illustrated in &lt;&gt;, was developed by Olaf Ronneberger, Philipp Fischer, and Thomas Brox in the 2015 paper “U-Net: Convolutional Networks for Biomedical Image Segmentation”. Although the paper focused on medical applications, the U-Net has revolutionized all kinds of generative vision models.\n\nThis picture shows the CNN body on the left (in this case, it’s a regular CNN, not a ResNet, and they’re using 2×2 max pooling instead of stride-2 convolutions, since this paper was written before ResNets came along) and the transposed convolutional (“up-conv”) layers on the right. Then extra skip connections are shown as gray arrows crossing from left to right (these are sometimes called cross connections). You can see why it’s called a “U-Net!”\nWith this architecture, the input to the transposed convolutions is not just the lower-resolution grid in the preceding layer, but also the higher-resolution grid in the ResNet head. This allows the U-Net to use all of the information of the original image, as it is needed. One challenge with U-Nets is that the exact architecture depends on the image size. fastai has a unique DynamicUnet class that autogenerates an architecture of the right size based on the data provided.\nLet’s focus now on an example where we leverage the fastai library to write a custom model.\n\n\nA Siamese Network\n\n\nShow code\n#hide\nfrom fastai.vision.all import *\npath = untar_data(URLs.PETS)\nfiles = get_image_files(path/\"images\")\n\nclass SiameseImage(fastuple):\n    def show(self, ctx=None, **kwargs): \n        img1,img2,same_breed = self\n        if not isinstance(img1, Tensor):\n            if img2.size != img1.size: img2 = img2.resize(img1.size)\n            t1,t2 = tensor(img1),tensor(img2)\n            t1,t2 = t1.permute(2,0,1),t2.permute(2,0,1)\n        else: t1,t2 = img1,img2\n        line = t1.new_zeros(t1.shape[0], t1.shape[1], 10)\n        return show_image(torch.cat([t1,line,t2], dim=2), \n                          title=same_breed, ctx=ctx)\n    \ndef label_func(fname):\n    return re.match(r'^(.*)_\\d+.jpg$', fname.name).groups()[0]\n\nclass SiameseTransform(Transform):\n    def __init__(self, files, label_func, splits):\n        self.labels = files.map(label_func).unique()\n        self.lbl2files = {l: L(f for f in files if label_func(f) == l) for l in self.labels}\n        self.label_func = label_func\n        self.valid = {f: self._draw(f) for f in files[splits[1]]}\n        \n    def encodes(self, f):\n        f2,t = self.valid.get(f, self._draw(f))\n        img1,img2 = PILImage.create(f),PILImage.create(f2)\n        return SiameseImage(img1, img2, t)\n    \n    def _draw(self, f):\n        same = random.random() &lt; 0.5\n        cls = self.label_func(f)\n        if not same: cls = random.choice(L(l for l in self.labels if l != cls)) \n        return random.choice(self.lbl2files[cls]),same\n    \nsplits = RandomSplitter()(files)\ntfm = SiameseTransform(files, label_func, splits)\ntls = TfmdLists(files, tfm, splits=splits)\ndls = tls.dataloaders(after_item=[Resize(224), ToTensor], \n    after_batch=[IntToFloatTensor, Normalize.from_stats(*imagenet_stats)])\n\n\nLet’s go back to the input pipeline we set up in &lt;&gt; for a Siamese network. If you remember, it consisted of pair of images with the label being True or False, depending on if they were in the same class or not.\nUsing what we just saw, let’s build a custom model for this task and train it. How? We will use a pretrained architecture and pass our two images through it. Then we can concatenate the results and send them to a custom head that will return two predictions. In terms of modules, this looks like this:\n\n\nShow code\nclass SiameseModel(Module):\n    def __init__(self, encoder, head):\n        self.encoder,self.head = encoder,head\n    \n    def forward(self, x1, x2):\n        ftrs = torch.cat([self.encoder(x1), self.encoder(x2)], dim=1)\n        return self.head(ftrs)\n\n\nTo create our encoder, we just need to take a pretrained model and cut it, as we explained before. The function create_body does that for us; we just have to pass it the place where we want to cut. As we saw earlier, per the dictionary of metadata for pretrained models, the cut value for a resnet is -2:\n\n\nShow code\nencoder = create_body(resnet34, cut=-2)\n\n\nThen we can create our head. A look at the encoder tells us the last layer has 512 features, so this head will need to receive 512*2. Why 2? We have to multiply by 2 because we have two images. So we create the head as follows:\n\n\nShow code\nhead = create_head(512*2, 2, ps=0.5)\n\n\nWith our encoder and head, we can now build our model:\n\n\nShow code\nmodel = SiameseModel(encoder, head)\n\n\nBefore using Learner, we have two more things to define. First, we must define the loss function we want to use. It’s regular cross-entropy, but since our targets are Booleans, we need to convert them to integers or PyTorch will throw an error:\n\n\nShow code\ndef loss_func(out, targ):\n    return nn.CrossEntropyLoss()(out, targ.long())\n\n\nMore importantly, to take full advantage of transfer learning, we have to define a custom splitter. A splitter is a function that tells the fastai library how to split the model into parameter groups. These are used behind the scenes to train only the head of a model when we do transfer learning.\nHere we want two parameter groups: one for the encoder and one for the head. We can thus define the following splitter (params is just a function that returns all parameters of a given module):\n\n\nShow code\ndef siamese_splitter(model):\n    return [params(model.encoder), params(model.head)]\n\n\nThen we can define our Learner by passing the data, model, loss function, splitter, and any metric we want. Since we are not using a convenience function from fastai for transfer learning (like vision_learner), we have to call learn.freeze manually. This will make sure only the last parameter group (in this case, the head) is trained:\n\n\nShow code\nlearn = Learner(dls, model, loss_func=loss_func, \n                splitter=siamese_splitter, metrics=accuracy)\nlearn.freeze()\n\n\nThen we can directly train our model with the usual methods:\n\n\nShow code\nlearn.fit_one_cycle(4, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.367015\n0.281242\n0.885656\n00:26\n\n\n1\n0.307688\n0.214721\n0.915426\n00:26\n\n\n2\n0.275221\n0.170615\n0.936401\n00:26\n\n\n3\n0.223771\n0.159633\n0.943843\n00:26\n\n\n\n\n\nBefore unfreezing and fine-tuning the whole model a bit more with discriminative learning rates (that is: a lower learning rate for the body and a higher one for the head):\n\n\nShow code\nlearn.unfreeze()\nlearn.fit_one_cycle(4, slice(1e-6,1e-4))\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.212744\n0.159033\n0.944520\n00:35\n\n\n1\n0.201893\n0.159615\n0.942490\n00:35\n\n\n2\n0.204606\n0.152338\n0.945196\n00:36\n\n\n3\n0.213203\n0.148346\n0.947903\n00:36\n\n\n\n\n\n94.8% is very good when we remember a classifier trained the same way (with no data augmentation) had an error rate of 7%.\nNow that we’ve seen how to create complete state-of-the-art computer vision models, let’s move on to NLP."
  },
  {
    "objectID": "posts/15_arch_details.html#natural-language-processing",
    "href": "posts/15_arch_details.html#natural-language-processing",
    "title": "Application Architectures Deep Dive",
    "section": "Natural Language Processing",
    "text": "Natural Language Processing\nConverting an AWD-LSTM language model into a transfer learning classifier, as we did in &lt;&gt;, follows a very similar process to what we did with vision_learner in the first section of this chapter. We do not need a “meta” dictionary in this case, because we do not have such a variety of architectures to support in the body. All we need to do is select the stacked RNN for the encoder in the language model, which is a single PyTorch module. This encoder will provide an activation for every word of the input, because a language model needs to output a prediction for every next word.\nTo create a classifier from this we use an approach described in the ULMFiT paper as “BPTT for Text Classification (BPT3C)”:\n\n: We divide the document into fixed-length batches of size b. At the beginning of each batch, the model is initialized with the final state of the previous batch; we keep track of the hidden states for mean and max-pooling; gradients are back-propagated to the batches whose hidden states contributed to the final prediction. In practice, we use variable length backpropagation sequences.\n\nIn other words, the classifier contains a for loop, which loops over each batch of a sequence. The state is maintained across batches, and the activations of each batch are stored. At the end, we use the same average and max concatenated pooling trick that we use for computer vision models—but this time, we do not pool over CNN grid cells, but over RNN sequences.\nFor this for loop we need to gather our data in batches, but each text needs to be treated separately, as they each have their own labels. However, it’s very likely that those texts won’t all be of the same length, which means we won’t be able to put them all in the same array, like we did with the language model.\nThat’s where padding is going to help: when grabbing a bunch of texts, we determine the one with the greatest length, then we fill the ones that are shorter with a special token called xxpad. To avoid extreme cases where we have a text with 2,000 tokens in the same batch as a text with 10 tokens (so a lot of padding, and a lot of wasted computation), we alter the randomness by making sure texts of comparable size are put together. The texts will still be in a somewhat random order for the training set (for the validation set we can simply sort them by order of length), but not completely so.\nThis is done automatically behind the scenes by the fastai library when creating our DataLoaders."
  },
  {
    "objectID": "posts/15_arch_details.html#tabular",
    "href": "posts/15_arch_details.html#tabular",
    "title": "Application Architectures Deep Dive",
    "section": "Tabular",
    "text": "Tabular\nFinally, let’s take a look at fastai.tabular models. (We don’t need to look at collaborative filtering separately, since we’ve already seen that these models are just tabular models, or use the dot product approach, which we’ve implemented earlier from scratch.)\nHere is the forward method for TabularModel:\nif self.n_emb != 0:\n    x = [e(x_cat[:,i]) for i,e in enumerate(self.embeds)]\n    x = torch.cat(x, 1)\n    x = self.emb_drop(x)\nif self.n_cont != 0:\n    x_cont = self.bn_cont(x_cont)\n    x = torch.cat([x, x_cont], 1) if self.n_emb != 0 else x_cont\nreturn self.layers(x)\nWe won’t show __init__ here, since it’s not that interesting, but we will look at each line of code in forward in turn. The first line:\nif self.n_emb != 0:\nis just testing whether there are any embeddings to deal with—we can skip this section if we only have continuous variables. self.embeds contains the embedding matrices, so this gets the activations of each:\n    x = [e(x_cat[:,i]) for i,e in enumerate(self.embeds)]\nand concatenates them into a single tensor:\n    x = torch.cat(x, 1)\nThen dropout is applied. You can pass embd_p to __init__ to change this value:\n    x = self.emb_drop(x)\nNow we test whether there are any continuous variables to deal with:\nif self.n_cont != 0:\nThey are passed through a batchnorm layer:\n    x_cont = self.bn_cont(x_cont)\nand concatenated with the embedding activations, if there were any:\n    x = torch.cat([x, x_cont], 1) if self.n_emb != 0 else x_cont\nFinally, this is passed through the linear layers (each of which includes batchnorm, if use_bn is True, and dropout, if ps is set to some value or list of values):\nreturn self.layers(x)\nCongratulations! Now you know every single piece of the architectures used in the fastai library!"
  },
  {
    "objectID": "posts/15_arch_details.html#wrapping-up-architectures",
    "href": "posts/15_arch_details.html#wrapping-up-architectures",
    "title": "Application Architectures Deep Dive",
    "section": "Wrapping Up Architectures",
    "text": "Wrapping Up Architectures\nAs you can see, the details of deep learning architectures need not scare you now. You can look inside the code of fastai and PyTorch and see just what is going on. More importantly, try to understand why it’s going on. Take a look at the papers that are being referenced in the code, and try to see how the code matches up to the algorithms that are described.\nNow that we have investigated all of the pieces of a model and the data that is passed into it, we can consider what this means for practical deep learning. If you have unlimited data, unlimited memory, and unlimited time, then the advice is easy: train a huge model on all of your data for a really long time. But the reason that deep learning is not straightforward is because your data, memory, and time are typically limited. If you are running out of memory or time, then the solution is to train a smaller model. If you are not able to train for long enough to overfit, then you are not taking advantage of the capacity of your model.\nSo, step one is to get to the point where you can overfit. Then the question is how to reduce that overfitting. &lt;&gt; shows how we recommend prioritizing the steps from there.\n\nMany practitioners, when faced with an overfitting model, start at exactly the wrong end of this diagram. Their starting point is to use a smaller model, or more regularization. Using a smaller model should be absolutely the last step you take, unless training your model is taking up too much time or memory. Reducing the size of your model reduces the ability of your model to learn subtle relationships in your data.\nInstead, your first step should be to seek to create more data. That could involve adding more labels to data that you already have, finding additional tasks that your model could be asked to solve (or, to think of it another way, identifying different kinds of labels that you could model), or creating additional synthetic data by using more or different data augmentation techniques. Thanks to the development of Mixup and similar approaches, effective data augmentation is now available for nearly all kinds of data.\nOnce you’ve got as much data as you think you can reasonably get hold of, and are using it as effectively as possible by taking advantage of all the labels that you can find and doing all the augmentation that makes sense, if you are still overfitting you should think about using more generalizable architectures. For instance, adding batch normalization may improve generalization.\nIf you are still overfitting after doing the best you can at using your data and tuning your architecture, then you can take a look at regularization. Generally speaking, adding dropout to the last layer or two will do a good job of regularizing your model. However, as we learned from the story of the development of AWD-LSTM, it is often the case that adding dropout of different types throughout your model can help even more. Generally speaking, a larger model with more regularization is more flexible, and can therefore be more accurate than a smaller model with less regularization.\nOnly after considering all of these options would we recommend that you try using a smaller version of your architecture."
  },
  {
    "objectID": "posts/15_arch_details.html#questionnaire",
    "href": "posts/15_arch_details.html#questionnaire",
    "title": "Application Architectures Deep Dive",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhat is the “head” of a neural net?\nWhat is the “body” of a neural net?\nWhat is “cutting” a neural net? Why do we need to do this for transfer learning?\nWhat is model_meta? Try printing it to see what’s inside.\nRead the source code for create_head and make sure you understand what each line does.\nLook at the output of create_head and make sure you understand why each layer is there, and how the create_head source created it.\nFigure out how to change the dropout, layer size, and number of layers created by vision_learner, and see if you can find values that result in better accuracy from the pet recognizer.\nWhat does AdaptiveConcatPool2d do?\nWhat is “nearest neighbor interpolation”? How can it be used to upsample convolutional activations?\nWhat is a “transposed convolution”? What is another name for it?\nCreate a conv layer with transpose=True and apply it to an image. Check the output shape.\nDraw the U-Net architecture.\nWhat is “BPTT for Text Classification” (BPT3C)?\nHow do we handle different length sequences in BPT3C?\nTry to run each line of TabularModel.forward separately, one line per cell, in a notebook, and look at the input and output shapes at each step.\nHow is self.layers defined in TabularModel?\nWhat are the five steps for preventing over-fitting?\nWhy don’t we reduce architecture complexity before trying other approaches to preventing overfitting?\n\n\nFurther Research\n\nWrite your own custom head and try training the pet recognizer with it. See if you can get a better result than fastai’s default.\nTry switching between AdaptiveConcatPool2d and AdaptiveAvgPool2d in a CNN head and see what difference it makes.\nWrite your own custom splitter to create a separate parameter group for every ResNet block, and a separate group for the stem. Try training with it, and see if it improves the pet recognizer.\nRead the online chapter about generative image models, and create your own colorizer, super-resolution model, or style transfer model.\nCreate a custom head using nearest neighbor interpolation and use it to do segmentation on CamVid."
  },
  {
    "objectID": "posts/13_convolutions.html",
    "href": "posts/13_convolutions.html",
    "title": "Convolutional Neural Networks",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastai.vision.all import *\nfrom fastbook import *\n\nmatplotlib.rc('image', cmap='Greys')\n[[chapter_convolutions]]\nIn &lt;&gt; we learned how to create a neural network recognizing images. We were able to achieve a bit over 98% accuracy at distinguishing 3s from 7s—but we also saw that fastai’s built-in classes were able to get close to 100%. Let’s start trying to close the gap.\nIn this chapter, we will begin by digging into what convolutions are and building a CNN from scratch. We will then study a range of techniques to improve training stability and learn all the tweaks the library usually applies for us to get great results."
  },
  {
    "objectID": "posts/13_convolutions.html#the-magic-of-convolutions",
    "href": "posts/13_convolutions.html#the-magic-of-convolutions",
    "title": "Convolutional Neural Networks",
    "section": "The Magic of Convolutions",
    "text": "The Magic of Convolutions\nOne of the most powerful tools that machine learning practitioners have at their disposal is feature engineering. A feature is a transformation of the data which is designed to make it easier to model. For instance, the add_datepart function that we used for our tabular dataset preprocessing in &lt;&gt; added date features to the Bulldozers dataset. What kinds of features might we be able to create from images?\n\njargon: Feature engineering: Creating new transformations of the input data in order to make it easier to model.\n\nIn the context of an image, a feature is a visually distinctive attribute. For example, the number 7 is characterized by a horizontal edge near the top of the digit, and a top-right to bottom-left diagonal edge underneath that. On the other hand, the number 3 is characterized by a diagonal edge in one direction at the top left and bottom right of the digit, the opposite diagonal at the bottom left and top right, horizontal edges at the middle, top, and bottom, and so forth. So what if we could extract information about where the edges occur in each image, and then use that information as our features, instead of raw pixels?\nIt turns out that finding the edges in an image is a very common task in computer vision, and is surprisingly straightforward. To do it, we use something called a convolution. A convolution requires nothing more than multiplication, and addition—two operations that are responsible for the vast majority of work that we will see in every single deep learning model in this book!\nA convolution applies a kernel across an image. A kernel is a little matrix, such as the 3×3 matrix in the top right of &lt;&gt;.\n\nThe 7×7 grid to the left is the image we’re going to apply the kernel to. The convolution operation multiplies each element of the kernel by each element of a 3×3 block of the image. The results of these multiplications are then added together. The diagram in &lt;&gt; shows an example of applying a kernel to a single location in the image, the 3×3 block around cell 18.\nLet’s do this with code. First, we create a little 3×3 matrix like so:\n\n\nShow code\ntop_edge = tensor([[-1,-1,-1],\n                   [ 0, 0, 0],\n                   [ 1, 1, 1]]).float()\n\n\nWe’re going to call this our kernel (because that’s what fancy computer vision researchers call these). And we’ll need an image, of course:\n\n\nShow code\npath = untar_data(URLs.MNIST_SAMPLE)\n\n\n\n\nShow code\n#hide\nPath.BASE_PATH = path\n\n\n\n\nShow code\nim3 = Image.open(path/'train'/'3'/'12.png')\nshow_image(im3);\n\n\n\n\n\n\n\n\n\nNow we’re going to take the top 3×3-pixel square of our image, and multiply each of those values by each item in our kernel. Then we’ll add them up, like so:\n\n\nShow code\nim3_t = tensor(im3)\nim3_t[0:3,0:3] * top_edge\n\n\ntensor([[-0., -0., -0.],\n        [0., 0., 0.],\n        [0., 0., 0.]])\n\n\n\n\nShow code\n(im3_t[0:3,0:3] * top_edge).sum()\n\n\ntensor(0.)\n\n\nNot very interesting so far—all the pixels in the top-left corner are white. But let’s pick a couple of more interesting spots:\n\n\nShow code\n#hide_output\ndf = pd.DataFrame(im3_t[:10,:20])\ndf.style.set_properties(**{'font-size':'6pt'}).background_gradient('Greys')\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n5\n0\n0\n0\n12\n99\n91\n142\n155\n246\n182\n155\n155\n155\n155\n131\n52\n0\n0\n0\n0\n\n\n6\n0\n0\n0\n138\n254\n254\n254\n254\n254\n254\n254\n254\n254\n254\n254\n252\n210\n122\n33\n0\n\n\n7\n0\n0\n0\n220\n254\n254\n254\n235\n189\n189\n189\n189\n150\n189\n205\n254\n254\n254\n75\n0\n\n\n8\n0\n0\n0\n35\n74\n35\n35\n25\n0\n0\n0\n0\n0\n0\n13\n224\n254\n254\n153\n0\n\n\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n90\n254\n254\n247\n53\n0\n\n\n\n\n\n\nThere’s a top edge at cell 5,8. Let’s repeat our calculation there:\n\n\nShow code\n(im3_t[4:7,6:9] * top_edge).sum()\n\n\ntensor(762.)\n\n\nThere’s a right edge at cell 8,18. What does that give us?:\n\n\nShow code\n(im3_t[7:10,17:20] * top_edge).sum()\n\n\ntensor(-29.)\n\n\nAs you can see, this little calculation is returning a high number where the 3×3-pixel square represents a top edge (i.e., where there are low values at the top of the square, and high values immediately underneath). That’s because the -1 values in our kernel have little impact in that case, but the 1 values have a lot.\nLet’s look a tiny bit at the math. The filter will take any window of size 3×3 in our images, and if we name the pixel values like this:\n\\[\\begin{matrix} a1 & a2 & a3 \\\\ a4 & a5 & a6 \\\\ a7 & a8 & a9 \\end{matrix}\\]\nit will return \\(-a1-a2-a3+a7+a8+a9\\). If we are in a part of the image where \\(a1\\), \\(a2\\), and \\(a3\\) add up to the same as \\(a7\\), \\(a8\\), and \\(a9\\), then the terms will cancel each other out and we will get 0. However, if \\(a7\\) is greater than \\(a1\\), \\(a8\\) is greater than \\(a2\\), and \\(a9\\) is greater than \\(a3\\), we will get a bigger number as a result. So this filter detects horizontal edges—more precisely, edges where we go from bright parts of the image at the top to darker parts at the bottom.\nChanging our filter to have the row of 1s at the top and the -1s at the bottom would detect horizontal edges that go from dark to light. Putting the 1s and -1s in columns versus rows would give us filters that detect vertical edges. Each set of weights will produce a different kind of outcome.\nLet’s create a function to do this for one location, and check it matches our result from before:\n\n\nShow code\ndef apply_kernel(row, col, kernel):\n    return (im3_t[row-1:row+2,col-1:col+2] * kernel).sum()\n\n\n\n\nShow code\napply_kernel(5,7,top_edge)\n\n\ntensor(762.)\n\n\nBut note that we can’t apply it to the corner (e.g., location 0,0), since there isn’t a complete 3×3 square there.\n\nMapping a Convolution Kernel\nWe can map apply_kernel() across the coordinate grid. That is, we’ll be taking our 3×3 kernel, and applying it to each 3×3 section of our image. For instance, &lt;&gt; shows the positions a 3×3 kernel can be applied to in the first row of a 5×5 image.\n\nTo get a grid of coordinates we can use a nested list comprehension, like so:\n\n\nShow code\n[[(i,j) for j in range(1,5)] for i in range(1,5)]\n\n\n[[(1, 1), (1, 2), (1, 3), (1, 4)],\n [(2, 1), (2, 2), (2, 3), (2, 4)],\n [(3, 1), (3, 2), (3, 3), (3, 4)],\n [(4, 1), (4, 2), (4, 3), (4, 4)]]\n\n\n\nnote: Nested List Comprehensions: Nested list comprehensions are used a lot in Python, so if you haven’t seen them before, take a few minutes to make sure you understand what’s happening here, and experiment with writing your own nested list comprehensions.\n\nHere’s the result of applying our kernel over a coordinate grid:\n\n\nShow code\nrng = range(1,27)\ntop_edge3 = tensor([[apply_kernel(i,j,top_edge) for j in rng] for i in rng])\n\nshow_image(top_edge3);\n\n\n\n\n\n\n\n\n\nLooking good! Our top edges are black, and bottom edges are white (since they are the opposite of top edges). Now that our image contains negative numbers too, matplotlib has automatically changed our colors so that white is the smallest number in the image, black the highest, and zeros appear as gray.\nWe can try the same thing for left edges:\n\n\nShow code\nleft_edge = tensor([[-1,1,0],\n                    [-1,1,0],\n                    [-1,1,0]]).float()\n\nleft_edge3 = tensor([[apply_kernel(i,j,left_edge) for j in rng] for i in rng])\n\nshow_image(left_edge3);\n\n\n\n\n\n\n\n\n\nAs we mentioned before, a convolution is the operation of applying such a kernel over a grid in this way. In the paper “A Guide to Convolution Arithmetic for Deep Learning” there are many great diagrams showing how image kernels can be applied. Here’s an example from the paper showing (at the bottom) a light blue 4×4 image, with a dark blue 3×3 kernel being applied, creating a 2×2 green output activation map at the top.\n\nLook at the shape of the result. If the original image has a height of h and a width of w, how many 3×3 windows can we find? As you can see from the example, there are h-2 by w-2 windows, so the image we get has a result as a height of h-2 and a width of w-2.\nWe won’t implement this convolution function from scratch, but use PyTorch’s implementation instead (it is way faster than anything we could do in Python).\n\n\nConvolutions in PyTorch\nConvolution is such an important and widely used operation that PyTorch has it built in. It’s called F.conv2d (recall that F is a fastai import from torch.nn.functional, as recommended by PyTorch). The PyTorch docs tell us that it includes these parameters:\n\ninput:: input tensor of shape (minibatch, in_channels, iH, iW)\nweight:: filters of shape (out_channels, in_channels, kH, kW)\n\nHere iH,iW is the height and width of the image (i.e., 28,28), and kH,kW is the height and width of our kernel (3,3). But apparently PyTorch is expecting rank-4 tensors for both these arguments, whereas currently we only have rank-2 tensors (i.e., matrices, or arrays with two axes).\nThe reason for these extra axes is that PyTorch has a few tricks up its sleeve. The first trick is that PyTorch can apply a convolution to multiple images at the same time. That means we can call it on every item in a batch at once!\nThe second trick is that PyTorch can apply multiple kernels at the same time. So let’s create the diagonal-edge kernels too, and then stack all four of our edge kernels into a single tensor:\n\n\nShow code\ndiag1_edge = tensor([[ 0,-1, 1],\n                     [-1, 1, 0],\n                     [ 1, 0, 0]]).float()\ndiag2_edge = tensor([[ 1,-1, 0],\n                     [ 0, 1,-1],\n                     [ 0, 0, 1]]).float()\n\nedge_kernels = torch.stack([left_edge, top_edge, diag1_edge, diag2_edge])\nedge_kernels.shape\n\n\ntorch.Size([4, 3, 3])\n\n\nTo test this, we’ll need a DataLoader and a sample mini-batch. Let’s use the data block API:\n\n\nShow code\nmnist = DataBlock((ImageBlock(cls=PILImageBW), CategoryBlock), \n                  get_items=get_image_files, \n                  splitter=GrandparentSplitter(),\n                  get_y=parent_label)\n\ndls = mnist.dataloaders(path)\nxb,yb = first(dls.valid)\nxb.shape\n\n\ntorch.Size([64, 1, 28, 28])\n\n\nBy default, fastai puts data on the GPU when using data blocks. Let’s move it to the CPU for our examples:\n\n\nShow code\nxb,yb = to_cpu(xb),to_cpu(yb)\n\n\nOne batch contains 64 images, each of 1 channel, with 28×28 pixels. F.conv2d can handle multichannel (i.e., color) images too. A channel is a single basic color in an image—for regular full-color images there are three channels, red, green, and blue. PyTorch represents an image as a rank-3 tensor, with dimensions [channels, rows, columns].\nWe’ll see how to handle more than one channel later in this chapter. Kernels passed to F.conv2d need to be rank-4 tensors: [channels_in, features_out, rows, columns]. edge_kernels is currently missing one of these. We need to tell PyTorch that the number of input channels in the kernel is one, which we can do by inserting an axis of size one (this is known as a unit axis) in the first location, where the PyTorch docs show in_channels is expected. To insert a unit axis into a tensor, we use the unsqueeze method:\n\n\nShow code\nedge_kernels.shape,edge_kernels.unsqueeze(1).shape\n\n\n(torch.Size([4, 3, 3]), torch.Size([4, 1, 3, 3]))\n\n\nThis is now the correct shape for edge_kernels. Let’s pass this all to conv2d:\n\n\nShow code\nedge_kernels = edge_kernels.unsqueeze(1)\n\n\n\n\nShow code\nbatch_features = F.conv2d(xb, edge_kernels)\nbatch_features.shape\n\n\ntorch.Size([64, 4, 26, 26])\n\n\nThe output shape shows we gave 64 images in the mini-batch, 4 kernels, and 26×26 edge maps (we started with 28×28 images, but lost one pixel from each side as discussed earlier). We can see we get the same results as when we did this manually:\n\n\nShow code\nshow_image(batch_features[0,0]);\n\n\n\n\n\n\n\n\n\nThe most important trick that PyTorch has up its sleeve is that it can use the GPU to do all this work in parallel—that is, applying multiple kernels, to multiple images, across multiple channels. Doing lots of work in parallel is critical to getting GPUs to work efficiently; if we did each of these operations one at a time, we’d often run hundreds of times slower (and if we used our manual convolution loop from the previous section, we’d be millions of times slower!). Therefore, to become a strong deep learning practitioner, one skill to practice is giving your GPU plenty of work to do at a time.\nIt would be nice to not lose those two pixels on each axis. The way we do that is to add padding, which is simply additional pixels added around the outside of our image. Most commonly, pixels of zeros are added.\n\n\nStrides and Padding\nWith appropriate padding, we can ensure that the output activation map is the same size as the original image, which can make things a lot simpler when we construct our architectures. &lt;&gt; shows how adding padding allows us to apply the kernels in the image corners.\n\nWith a 5×5 input, 4×4 kernel, and 2 pixels of padding, we end up with a 6×6 activation map, as we can see in &lt;&gt;.\n\nIf we add a kernel of size ks by ks (with ks an odd number), the necessary padding on each side to keep the same shape is ks//2. An even number for ks would require a different amount of padding on the top/bottom and left/right, but in practice we almost never use an even filter size.\nSo far, when we have applied the kernel to the grid, we have moved it one pixel over at a time. But we can jump further; for instance, we could move over two pixels after each kernel application, as in &lt;&gt;. This is known as a stride-2 convolution. The most common kernel size in practice is 3×3, and the most common padding is 1. As you’ll see, stride-2 convolutions are useful for decreasing the size of our outputs, and stride-1 convolutions are useful for adding layers without changing the output size.\n\nIn an image of size h by w, using a padding of 1 and a stride of 2 will give us a result of size (h+1)//2 by (w+1)//2. The general formula for each dimension is (n + 2*pad - ks)//stride + 1, where pad is the padding, ks, the size of our kernel, and stride is the stride.\nLet’s now take a look at how the pixel values of the result of our convolutions are computed.\n\n\nUnderstanding the Convolution Equations\nTo explain the math behind convolutions, fast.ai student Matt Kleinsmith came up with the very clever idea of showing CNNs from different viewpoints. In fact, it’s so clever, and so helpful, we’re going to show it here too!\nHere’s our 3×3 pixel image, with each pixel labeled with a letter:\n\nAnd here’s our kernel, with each weight labeled with a Greek letter:\n\nSince the filter fits in the image four times, we have four results:\n\n&lt;&gt; shows how we applied the kernel to each section of the image to yield each result.\n\nThe equation view is in &lt;&gt;.\n\nNotice that the bias term, b, is the same for each section of the image. You can consider the bias as part of the filter, just like the weights (α, β, γ, δ) are part of the filter.\nHere’s an interesting insight—a convolution can be represented as a special kind of matrix multiplication, as illustrated in &lt;&gt;. The weight matrix is just like the ones from traditional neural networks. However, this weight matrix has two special properties:\n\nThe zeros shown in gray are untrainable. This means that they’ll stay zero throughout the optimization process.\nSome of the weights are equal, and while they are trainable (i.e., changeable), they must remain equal. These are called shared weights.\n\nThe zeros correspond to the pixels that the filter can’t touch. Each row of the weight matrix corresponds to one application of the filter.\n\nNow that we understand what a convolution is, let’s use them to build a neural net."
  },
  {
    "objectID": "posts/13_convolutions.html#our-first-convolutional-neural-network",
    "href": "posts/13_convolutions.html#our-first-convolutional-neural-network",
    "title": "Convolutional Neural Networks",
    "section": "Our First Convolutional Neural Network",
    "text": "Our First Convolutional Neural Network\nThere is no reason to believe that some particular edge filters are the most useful kernels for image recognition. Furthermore, we’ve seen that in later layers convolutional kernels become complex transformations of features from lower levels, but we don’t have a good idea of how to manually construct these.\nInstead, it would be best to learn the values of the kernels. We already know how to do this—SGD! In effect, the model will learn the features that are useful for classification.\nWhen we use convolutions instead of (or in addition to) regular linear layers we create a convolutional neural network (CNN).\n\nCreating the CNN\nLet’s go back to the basic neural network we had in &lt;&gt;. It was defined like this:\n\n\nShow code\nsimple_net = nn.Sequential(\n    nn.Linear(28*28,30),\n    nn.ReLU(),\n    nn.Linear(30,1)\n)\n\n\nWe can view a model’s definition:\n\n\nShow code\nsimple_net\n\n\nSequential(\n  (0): Linear(in_features=784, out_features=30, bias=True)\n  (1): ReLU()\n  (2): Linear(in_features=30, out_features=1, bias=True)\n)\n\n\nWe now want to create a similar architecture to this linear model, but using convolutional layers instead of linear. nn.Conv2d is the module equivalent of F.conv2d. It’s more convenient than F.conv2d when creating an architecture, because it creates the weight matrix for us automatically when we instantiate it.\nHere’s a possible architecture:\n\n\nShow code\nbroken_cnn = sequential(\n    nn.Conv2d(1,30, kernel_size=3, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(30,1, kernel_size=3, padding=1)\n)\n\n\nOne thing to note here is that we didn’t need to specify 28×28 as the input size. That’s because a linear layer needs a weight in the weight matrix for every pixel, so it needs to know how many pixels there are, but a convolution is applied over each pixel automatically. The weights only depend on the number of input and output channels and the kernel size, as we saw in the previous section.\nThink about what the output shape is going to be, then let’s try it and see:\n\n\nShow code\nbroken_cnn(xb).shape\n\n\ntorch.Size([64, 1, 28, 28])\n\n\nThis is not something we can use to do classification, since we need a single output activation per image, not a 28×28 map of activations. One way to deal with this is to use enough stride-2 convolutions such that the final layer is size 1. That is, after one stride-2 convolution the size will be 14×14, after two it will be 7×7, then 4×4, 2×2, and finally size 1.\nLet’s try that now. First, we’ll define a function with the basic parameters we’ll use in each convolution:\n\n\nShow code\ndef conv(ni, nf, ks=3, act=True):\n    res = nn.Conv2d(ni, nf, stride=2, kernel_size=ks, padding=ks//2)\n    if act: res = nn.Sequential(res, nn.ReLU())\n    return res\n\n\n\nimportant: Refactoring: Refactoring parts of your neural networks like this makes it much less likely you’ll get errors due to inconsistencies in your architectures, and makes it more obvious to the reader which parts of your layers are actually changing.\n\nWhen we use a stride-2 convolution, we often increase the number of features at the same time. This is because we’re decreasing the number of activations in the activation map by a factor of 4; we don’t want to decrease the capacity of a layer by too much at a time.\n\njargon: channels and features: These two terms are largely used interchangeably, and refer to the size of the second axis of a weight matrix, which is, the number of activations per grid cell after a convolution. Features is never used to refer to the input data, but channels can refer to either the input data (generally channels are colors) or activations inside the network.\n\nHere is how we can build a simple CNN:\n\n\nShow code\nsimple_cnn = sequential(\n    conv(1 ,4),            #14x14\n    conv(4 ,8),            #7x7\n    conv(8 ,16),           #4x4\n    conv(16,32),           #2x2\n    conv(32,2, act=False), #1x1\n    Flatten(),\n)\n\n\n\nj: I like to add comments like the ones here after each convolution to show how large the activation map will be after each layer. These comments assume that the input size is 28*28\n\nNow the network outputs two activations, which map to the two possible levels in our labels:\n\n\nShow code\nsimple_cnn(xb).shape\n\n\ntorch.Size([64, 2])\n\n\nWe can now create our Learner:\n\n\nShow code\nlearn = Learner(dls, simple_cnn, loss_func=F.cross_entropy, metrics=accuracy)\n\n\nTo see exactly what’s going on in the model, we can use summary:\n\n\nShow code\nlearn.summary()\n\n\nSequential (Input shape: ['64 x 1 x 28 x 28'])\n================================================================\nLayer (type)         Output Shape         Param #    Trainable \n================================================================\nConv2d               64 x 4 x 14 x 14     40         True      \n________________________________________________________________\nReLU                 64 x 4 x 14 x 14     0          False     \n________________________________________________________________\nConv2d               64 x 8 x 7 x 7       296        True      \n________________________________________________________________\nReLU                 64 x 8 x 7 x 7       0          False     \n________________________________________________________________\nConv2d               64 x 16 x 4 x 4      1,168      True      \n________________________________________________________________\nReLU                 64 x 16 x 4 x 4      0          False     \n________________________________________________________________\nConv2d               64 x 32 x 2 x 2      4,640      True      \n________________________________________________________________\nReLU                 64 x 32 x 2 x 2      0          False     \n________________________________________________________________\nConv2d               64 x 2 x 1 x 1       578        True      \n________________________________________________________________\nFlatten              64 x 2               0          False     \n________________________________________________________________\n\nTotal params: 6,722\nTotal trainable params: 6,722\nTotal non-trainable params: 0\n\nOptimizer used: &lt;function Adam at 0x7fbc9c258cb0&gt;\nLoss function: &lt;function cross_entropy at 0x7fbca9ba0170&gt;\n\nCallbacks:\n  - TrainEvalCallback\n  - Recorder\n  - ProgressCallback\n\n\nNote that the output of the final Conv2d layer is 64x2x1x1. We need to remove those extra 1x1 axes; that’s what Flatten does. It’s basically the same as PyTorch’s squeeze method, but as a module.\nLet’s see if this trains! Since this is a deeper network than we’ve built from scratch before, we’ll use a lower learning rate and more epochs:\n\n\nShow code\nlearn.fit_one_cycle(2, 0.01)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.072684\n0.045110\n0.990186\n00:05\n\n\n1\n0.022580\n0.030775\n0.990186\n00:05\n\n\n\n\n\nSuccess! It’s getting closer to the resnet18 result we had, although it’s not quite there yet, and it’s taking more epochs, and we’re needing to use a lower learning rate. We still have a few more tricks to learn, but we’re getting closer and closer to being able to create a modern CNN from scratch.\n\n\nUnderstanding Convolution Arithmetic\nWe can see from the summary that we have an input of size 64x1x28x28. The axes are batch,channel,height,width. This is often represented as NCHW (where N refers to batch size). Tensorflow, on the other hand, uses NHWC axis order. The first layer is:\n\n\nShow code\nm = learn.model[0]\nm\n\n\nSequential(\n  (0): Conv2d(1, 4, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n  (1): ReLU()\n)\n\n\nSo we have 1 input channel, 4 output channels, and a 3×3 kernel. Let’s check the weights of the first convolution:\n\n\nShow code\nm[0].weight.shape\n\n\ntorch.Size([4, 1, 3, 3])\n\n\nThe summary shows we have 40 parameters, and 4*1*3*3 is 36. What are the other four parameters? Let’s see what the bias contains:\n\n\nShow code\nm[0].bias.shape\n\n\ntorch.Size([4])\n\n\nWe can now use this information to clarify our statement in the previous section: “When we use a stride-2 convolution, we often increase the number of features because we’re decreasing the number of activations in the activation map by a factor of 4; we don’t want to decrease the capacity of a layer by too much at a time.”\nThere is one bias for each channel. (Sometimes channels are called features or filters when they are not input channels.) The output shape is 64x4x14x14, and this will therefore become the input shape to the next layer. The next layer, according to summary, has 296 parameters. Let’s ignore the batch axis to keep things simple. So for each of 14*14=196 locations we are multiplying 296-8=288 weights (ignoring the bias for simplicity), so that’s 196*288=56_448 multiplications at this layer. The next layer will have 7*7*(1168-16)=56_448 multiplications.\nWhat happened here is that our stride-2 convolution halved the grid size from 14x14 to 7x7, and we doubled the number of filters from 8 to 16, resulting in no overall change in the amount of computation. If we left the number of channels the same in each stride-2 layer, the amount of computation being done in the net would get less and less as it gets deeper. But we know that the deeper layers have to compute semantically rich features (such as eyes or fur), so we wouldn’t expect that doing less computation would make sense.\nAnother way to think of this is based on receptive fields.\n\n\nReceptive Fields\nThe receptive field is the area of an image that is involved in the calculation of a layer. On the book’s website, you’ll find an Excel spreadsheet called conv-example.xlsx that shows the calculation of two stride-2 convolutional layers using an MNIST digit. Each layer has a single kernel. &lt;&gt; shows what we see if we click on one of the cells in the conv2 section, which shows the output of the second convolutional layer, and click trace precedents.\n\nHere, the cell with the green border is the cell we clicked on, and the blue highlighted cells are its precedents—that is, the cells used to calculate its value. These cells are the corresponding 3×3 area of cells from the input layer (on the left), and the cells from the filter (on the right). Let’s now click trace precedents again, to see what cells are used to calculate these inputs. &lt;&gt; shows what happens.\n\nIn this example, we have just two convolutional layers, each of stride 2, so this is now tracing right back to the input image. We can see that a 7×7 area of cells in the input layer is used to calculate the single green cell in the Conv2 layer. This 7×7 area is the receptive field in the input of the green activation in Conv2. We can also see that a second filter kernel is needed now, since we have two layers.\nAs you see from this example, the deeper we are in the network (specifically, the more stride-2 convs we have before a layer), the larger the receptive field for an activation in that layer. A large receptive field means that a large amount of the input image is used to calculate each activation in that layer is. We now know that in the deeper layers of the network we have semantically rich features, corresponding to larger receptive fields. Therefore, we’d expect that we’d need more weights for each of our features to handle this increasing complexity. This is another way of saying the same thing we mentioned in the previous section: when we introduce a stride-2 conv in our network, we should also increase the number of channels.\nWhen writing this particular chapter, we had a lot of questions we needed answers for, to be able to explain CNNs to you as best we could. Believe it or not, we found most of the answers on Twitter. We’re going to take a quick break to talk to you about that now, before we move on to color images.\n\n\nA Note About Twitter\nWe are not, to say the least, big users of social networks in general. But our goal in writing this book is to help you become the best deep learning practitioner you can, and we would be remiss not to mention how important Twitter has been in our own deep learning journeys.\nYou see, there’s another part of Twitter, far away from Donald Trump and the Kardashians, which is the part of Twitter where deep learning researchers and practitioners talk shop every day. As we were writing this section, Jeremy wanted to double-check that what we were saying about stride-2 convolutions was accurate, so he asked on Twitter:\n\nA few minutes later, this answer popped up:\n\nChristian Szegedy is the first author of Inception, the 2014 ImageNet winner and source of many key insights used in modern neural networks. Two hours later, this appeared:\n\nDo you recognize that name? You saw it in &lt;&gt;, when we were talking about the Turing Award winners who established the foundations of deep learning today!\nJeremy also asked on Twitter for help checking our description of label smoothing in &lt;&gt; was accurate, and got a response again from directly from Christian Szegedy (label smoothing was originally introduced in the Inception paper):\n\nMany of the top people in deep learning today are Twitter regulars, and are very open about interacting with the wider community. One good way to get started is to look at a list of Jeremy’s recent Twitter likes, or Sylvain’s. That way, you can see a list of Twitter users that we think have interesting and useful things to say.\nTwitter is the main way we both stay up to date with interesting papers, software releases, and other deep learning news. For making connections with the deep learning community, we recommend getting involved both in the fast.ai forums and on Twitter.\nThat said, let’s get back to the meat of this chapter. Up until now, we have only shown you examples of pictures in black and white, with one value per pixel. In practice, most colored images have three values per pixel to define their color. We’ll look at working with color images next."
  },
  {
    "objectID": "posts/13_convolutions.html#color-images",
    "href": "posts/13_convolutions.html#color-images",
    "title": "Convolutional Neural Networks",
    "section": "Color Images",
    "text": "Color Images\nA colour picture is a rank-3 tensor:\n\n\nShow code\nim = image2tensor(Image.open(image_bear()))\nim.shape\n\n\ntorch.Size([3, 1000, 846])\n\n\n\n\nShow code\nshow_image(im);\n\n\n\n\n\n\n\n\n\nThe first axis contains the channels, red, green, and blue:\n\n\nShow code\n_,axs = subplots(1,3)\nfor bear,ax,color in zip(im,axs,('Reds','Greens','Blues')):\n    show_image(255-bear, ax=ax, cmap=color)\n\n\n\n\n\n\n\n\n\nWe saw what the convolution operation was for one filter on one channel of the image (our examples were done on a square). A convolutional layer will take an image with a certain number of channels (three for the first layer for regular RGB color images) and output an image with a different number of channels. Like our hidden size that represented the numbers of neurons in a linear layer, we can decide to have as many filters as we want, and each of them will be able to specialize, some to detect horizontal edges, others to detect vertical edges and so forth, to give something like we studied in &lt;&gt;.\nIn one sliding window, we have a certain number of channels and we need as many filters (we don’t use the same kernel for all the channels). So our kernel doesn’t have a size of 3 by 3, but ch_in (for channels in) is 3 by 3. On each channel, we multiply the elements of our window by the elements of the coresponding filter, then sum the results (as we saw before) and sum over all the filters. In the example given in &lt;&gt;, the result of our conv layer on that window is red + green + blue.\n\nSo, in order to apply a convolution to a color picture we require a kernel tensor with a size that matches the first axis. At each location, the corresponding parts of the kernel and the image patch are multiplied together.\nThese are then all added together, to produce a single number, for each grid location, for each output feature, as shown in &lt;&gt;.\n\nThen we have ch_out filters like this, so in the end, the result of our convolutional layer will be a batch of images with ch_out channels and a height and width given by the formula outlined earlier. This give us ch_out tensors of size ch_in x ks x ks that we represent in one big tensor of four dimensions. In PyTorch, the order of the dimensions for those weights is ch_out x ch_in x ks x ks.\nAdditionally, we may want to have a bias for each filter. In the preceding example, the final result for our convolutional layer would be \\(y_{R} + y_{G} + y_{B} + b\\) in that case. Like in a linear layer, there are as many bias as we have kernels, so the biases is a vector of size ch_out.\nThere are no special mechanisms required when setting up a CNN for training with color images. Just make sure your first layer has three inputs.\nThere are lots of ways of processing color images. For instance, you can change them to black and white, change from RGB to HSV (hue, saturation, and value) color space, and so forth. In general, it turns out experimentally that changing the encoding of colors won’t make any difference to your model results, as long as you don’t lose information in the transformation. So, transforming to black and white is a bad idea, since it removes the color information entirely (and this can be critical; for instance, a pet breed may have a distinctive color); but converting to HSV generally won’t make any difference.\nNow you know what those pictures in &lt;&gt; of “what a neural net learns” from the Zeiler and Fergus paper mean! This is their picture of some of the layer 1 weights which we showed:\n\nThis is taking the three slices of the convolutional kernel, for each output feature, and displaying them as images. We can see that even though the creators of the neural net never explicitly created kernels to find edges, for instance, the neural net automatically discovered these features using SGD.\nNow let’s see how we can train these CNNs, and show you all the techniques fastai uses under the hood for efficient training."
  },
  {
    "objectID": "posts/13_convolutions.html#improving-training-stability",
    "href": "posts/13_convolutions.html#improving-training-stability",
    "title": "Convolutional Neural Networks",
    "section": "Improving Training Stability",
    "text": "Improving Training Stability\nSince we are so good at recognizing 3s from 7s, let’s move on to something harder—recognizing all 10 digits. That means we’ll need to use MNIST instead of MNIST_SAMPLE:\n\n\nShow code\npath = untar_data(URLs.MNIST)\n\n\n\n\nShow code\n#hide\nPath.BASE_PATH = path\n\n\n\n\nShow code\npath.ls()\n\n\n(#2) [Path('testing'),Path('training')]\n\n\nThe data is in two folders named training and testing, so we have to tell GrandparentSplitter about that (it defaults to train and valid). We did do that in the get_dls function, which we create to make it easy to change our batch size later:\n\n\nShow code\ndef get_dls(bs=64):\n    return DataBlock(\n        blocks=(ImageBlock(cls=PILImageBW), CategoryBlock), \n        get_items=get_image_files, \n        splitter=GrandparentSplitter('training','testing'),\n        get_y=parent_label,\n        batch_tfms=Normalize()\n    ).dataloaders(path, bs=bs)\n\ndls = get_dls()\n\n\nRemember, it’s always a good idea to look at your data before you use it:\n\n\nShow code\ndls.show_batch(max_n=9, figsize=(4,4))\n\n\n\n\n\n\n\n\n\nNow that we have our data ready, we can train a simple model on it.\n\nA Simple Baseline\nEarlier in this chapter, we built a model based on a conv function like this:\n\n\nShow code\ndef conv(ni, nf, ks=3, act=True):\n    res = nn.Conv2d(ni, nf, stride=2, kernel_size=ks, padding=ks//2)\n    if act: res = nn.Sequential(res, nn.ReLU())\n    return res\n\n\nLet’s start with a basic CNN as a baseline. We’ll use the same one as earlier, but with one tweak: we’ll use more activations. Since we have more numbers to differentiate, it’s likely we will need to learn more filters.\nAs we discussed, we generally want to double the number of filters each time we have a stride-2 layer. One way to increase the number of filters throughout our network is to double the number of activations in the first layer–then every layer after that will end up twice as big as in the previous version as well.\nBut there is a subtle problem with this. Consider the kernel that is being applied to each pixel. By default, we use a 3×3-pixel kernel. That means that there are a total of 3×3 = 9 pixels that the kernel is being applied to at each location. Previously, our first layer had four output filters. That meant that there were four values being computed from nine pixels at each location. Think about what happens if we double this output to eight filters. Then when we apply our kernel we will be using nine pixels to calculate eight numbers. That means it isn’t really learning much at all: the output size is almost the same as the input size. Neural networks will only create useful features if they’re forced to do so—that is, if the number of outputs from an operation is significantly smaller than the number of inputs.\nTo fix this, we can use a larger kernel in the first layer. If we use a kernel of 5×5 pixels then there are 25 pixels being used at each kernel application. Creating eight filters from this will mean the neural net will have to find some useful features:\n\n\nShow code\ndef simple_cnn():\n    return sequential(\n        conv(1 ,8, ks=5),        #14x14\n        conv(8 ,16),             #7x7\n        conv(16,32),             #4x4\n        conv(32,64),             #2x2\n        conv(64,10, act=False),  #1x1\n        Flatten(),\n    )\n\n\nAs you’ll see in a moment, we can look inside our models while they’re training in order to try to find ways to make them train better. To do this we use the ActivationStats callback, which records the mean, standard deviation, and histogram of activations of every trainable layer (as we’ve seen, callbacks are used to add behavior to the training loop; we’ll explore how they work in &lt;&gt;):\n\n\nShow code\nfrom fastai.callback.hook import *\n\n\nWe want to train quickly, so that means training at a high learning rate. Let’s see how we go at 0.06:\n\n\nShow code\ndef fit(epochs=1):\n    learn = Learner(dls, simple_cnn(), loss_func=F.cross_entropy,\n                    metrics=accuracy, cbs=ActivationStats(with_hist=True))\n    learn.fit(epochs, 0.06)\n    return learn\n\n\n\n\nShow code\nlearn = fit()\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n2.307071\n2.305865\n0.113500\n00:16\n\n\n\n\n\nThis didn’t train at all well! Let’s find out why.\nOne handy feature of the callbacks passed to Learner is that they are made available automatically, with the same name as the callback class, except in snake_case. So, our ActivationStats callback can be accessed through activation_stats. I’m sure you remember learn.recorder… can you guess how that is implemented? That’s right, it’s a callback called Recorder!\nActivationStats includes some handy utilities for plotting the activations during training. plot_layer_stats(idx) plots the mean and standard deviation of the activations of layer number idx, along with the percentage of activations near zero. Here’s the first layer’s plot:\n\n\nShow code\nlearn.activation_stats.plot_layer_stats(0)\n\n\n\n\n\n\n\n\n\nGenerally our model should have a consistent, or at least smooth, mean and standard deviation of layer activations during training. Activations near zero are particularly problematic, because it means we have computation in the model that’s doing nothing at all (since multiplying by zero gives zero). When you have some zeros in one layer, they will therefore generally carry over to the next layer… which will then create more zeros. Here’s the penultimate layer of our network:\n\n\nShow code\nlearn.activation_stats.plot_layer_stats(-2)\n\n\n\n\n\n\n\n\n\nAs expected, the problems get worse towards the end of the network, as the instability and zero activations compound over layers. Let’s look at what we can do to make training more stable.\n\n\nIncrease Batch Size\nOne way to make training more stable is to increase the batch size. Larger batches have gradients that are more accurate, since they’re calculated from more data. On the downside, though, a larger batch size means fewer batches per epoch, which means less opportunities for your model to update weights. Let’s see if a batch size of 512 helps:\n\n\nShow code\ndls = get_dls(512)\n\n\n\n\nShow code\nlearn = fit()\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n2.309385\n2.302744\n0.113500\n00:08\n\n\n\n\n\nLet’s see what the penultimate layer looks like:\n\n\nShow code\nlearn.activation_stats.plot_layer_stats(-2)\n\n\n\n\n\n\n\n\n\nAgain, we’ve got most of our activations near zero. Let’s see what else we can do to improve training stability.\n\n\n1cycle Training\nOur initial weights are not well suited to the task we’re trying to solve. Therefore, it is dangerous to begin training with a high learning rate: we may very well make the training diverge instantly, as we’ve seen. We probably don’t want to end training with a high learning rate either, so that we don’t skip over a minimum. But we want to train at a high learning rate for the rest of the training period, because we’ll be able to train more quickly that way. Therefore, we should change the learning rate during training, from low, to high, and then back to low again.\nLeslie Smith (yes, the same guy that invented the learning rate finder!) developed this idea in his article “Super-Convergence: Very Fast Training of Neural Networks Using Large Learning Rates”. He designed a schedule for learning rate separated into two phases: one where the learning rate grows from the minimum value to the maximum value (warmup), and one where it decreases back to the minimum value (annealing). Smith called this combination of approaches 1cycle training.\n1cycle training allows us to use a much higher maximum learning rate than other types of training, which gives two benefits:\n\nBy training with higher learning rates, we train faster—a phenomenon Smith named super-convergence.\nBy training with higher learning rates, we overfit less because we skip over the sharp local minima to end up in a smoother (and therefore more generalizable) part of the loss.\n\nThe second point is an interesting and subtle one; it is based on the observation that a model that generalizes well is one whose loss would not change very much if you changed the input by a small amount. If a model trains at a large learning rate for quite a while, and can find a good loss when doing so, it must have found an area that also generalizes well, because it is jumping around a lot from batch to batch (that is basically the definition of a high learning rate). The problem is that, as we have discussed, just jumping to a high learning rate is more likely to result in diverging losses, rather than seeing your losses improve. So we don’t jump straight to a high learning rate. Instead, we start at a low learning rate, where our losses do not diverge, and we allow the optimizer to gradually find smoother and smoother areas of our parameters by gradually going to higher and higher learning rates.\nThen, once we have found a nice smooth area for our parameters, we want to find the very best part of that area, which means we have to bring our learning rates down again. This is why 1cycle training has a gradual learning rate warmup, and a gradual learning rate cooldown. Many researchers have found that in practice this approach leads to more accurate models and trains more quickly. That is why it is the approach that is used by default for fine_tune in fastai.\nIn &lt;&gt; we’ll learn all about momentum in SGD. Briefly, momentum is a technique where the optimizer takes a step not only in the direction of the gradients, but also that continues in the direction of previous steps. Leslie Smith introduced the idea of cyclical momentums in “A Disciplined Approach to Neural Network Hyper-Parameters: Part 1”. It suggests that the momentum varies in the opposite direction of the learning rate: when we are at high learning rates, we use less momentum, and we use more again in the annealing phase.\nWe can use 1cycle training in fastai by calling fit_one_cycle:\n\n\nShow code\ndef fit(epochs=1, lr=0.06):\n    learn = Learner(dls, simple_cnn(), loss_func=F.cross_entropy,\n                    metrics=accuracy, cbs=ActivationStats(with_hist=True))\n    learn.fit_one_cycle(epochs, lr)\n    return learn\n\n\n\n\nShow code\nlearn = fit()\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.210838\n0.084827\n0.974300\n00:08\n\n\n\n\n\nWe’re finally making some progress! It’s giving us a reasonable accuracy now.\nWe can view the learning rate and momentum throughout training by calling plot_sched on learn.recorder. learn.recorder (as the name suggests) records everything that happens during training, including losses, metrics, and hyperparameters such as learning rate and momentum:\n\n\nShow code\nlearn.recorder.plot_sched()\n\n\n\n\n\n\n\n\n\nSmith’s original 1cycle paper used a linear warmup and linear annealing. As you can see, we adapted the approach in fastai by combining it with another popular approach: cosine annealing. fit_one_cycle provides the following parameters you can adjust:\n\nlr_max:: The highest learning rate that will be used (this can also be a list of learning rates for each layer group, or a Python slice object containing the first and last layer group learning rates)\ndiv:: How much to divide lr_max by to get the starting learning rate\ndiv_final:: How much to divide lr_max by to get the ending learning rate\npct_start:: What percentage of the batches to use for the warmup\nmoms:: A tuple (mom1,mom2,mom3) where mom1 is the initial momentum, mom2 is the minimum momentum, and mom3 is the final momentum\n\nLet’s take a look at our layer stats again:\n\n\nShow code\nlearn.activation_stats.plot_layer_stats(-2)\n\n\n\n\n\n\n\n\n\nThe percentage of near-zero weights is getting much better, although it’s still quite high.\nWe can see even more about what’s going on in our training using color_dim, passing it a layer index:\n\n\nShow code\nlearn.activation_stats.color_dim(-2)\n\n\n\n\n\n\n\n\n\ncolor_dim was developed by fast.ai in conjunction with a student, Stefano Giomo. Stefano, who refers to the idea as the colorful dimension, provides an in-depth explanation of the history and details behind the method. The basic idea is to create a histogram of the activations of a layer, which we would hope would follow a smooth pattern such as the normal distribution (colorful_dist).\n\nTo create color_dim, we take the histogram shown on the left here, and convert it into just the colored representation shown at the bottom. Then we flip it on its side, as shown on the right. We found that the distribution is clearer if we take the log of the histogram values. Then, Stefano describes:\n\n: The final plot for each layer is made by stacking the histogram of the activations from each batch along the horizontal axis. So each vertical slice in the visualisation represents the histogram of activations for a single batch. The color intensity corresponds to the height of the histogram, in other words the number of activations in each histogram bin.\n\n&lt;&gt; shows how this all fits together.\n\nThis illustrates why log(f) is more colorful than f when f follows a normal distribution because taking a log changes the Gaussian in a quadratic, which isn’t as narrow.\nSo with that in mind, let’s take another look at the result for the penultimate layer:\n\n\nShow code\nlearn.activation_stats.color_dim(-2)\n\n\n\n\n\n\n\n\n\nThis shows a classic picture of “bad training.” We start with nearly all activations at zero—that’s what we see at the far left, with all the dark blue. The bright yellow at the bottom represents the near-zero activations. Then, over the first few batches we see the number of nonzero activations exponentially increasing. But it goes too far, and collapses! We see the dark blue return, and the bottom becomes bright yellow again. It almost looks like training restarts from scratch. Then we see the activations increase again, and collapse again. After repeating this a few times, eventually we see a spread of activations throughout the range.\nIt’s much better if training can be smooth from the start. The cycles of exponential increase and then collapse tend to result in a lot of near-zero activations, resulting in slow training and poor final results. One way to solve this problem is to use batch normalization.\n\n\nBatch Normalization\nTo fix the slow training and poor final results we ended up with in the previous section, we need to fix the initial large percentage of near-zero activations, and then try to maintain a good distribution of activations throughout training.\nSergey Ioffe and Christian Szegedy presented a solution to this problem in the 2015 paper “Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift”. In the abstract, they describe just the problem that we’ve seen:\n\n: Training Deep Neural Networks is complicated by the fact that the distribution of each layer’s inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization… We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs.\n\nTheir solution, they say is:\n\n: Making normalization a part of the model architecture and performing the normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and be less careful about initialization.\n\nThe paper caused great excitement as soon as it was released, because it included the chart in &lt;&gt;, which clearly demonstrated that batch normalization could train a model that was even more accurate than the current state of the art (the Inception architecture) and around 5x faster.\n\nBatch normalization (often just called batchnorm) works by taking an average of the mean and standard deviations of the activations of a layer and using those to normalize the activations. However, this can cause problems because the network might want some activations to be really high in order to make accurate predictions. So they also added two learnable parameters (meaning they will be updated in the SGD step), usually called gamma and beta. After normalizing the activations to get some new activation vector y, a batchnorm layer returns gamma*y + beta.\nThat’s why our activations can have any mean or variance, independent from the mean and standard deviation of the results of the previous layer. Those statistics are learned separately, making training easier on our model. The behavior is different during training and validation: during training, we use the mean and standard deviation of the batch to normalize the data, while during validation we instead use a running mean of the statistics calculated during training.\nLet’s add a batchnorm layer to conv:\n\n\nShow code\ndef conv(ni, nf, ks=3, act=True):\n    layers = [nn.Conv2d(ni, nf, stride=2, kernel_size=ks, padding=ks//2)]\n    if act: layers.append(nn.ReLU())\n    layers.append(nn.BatchNorm2d(nf))\n    return nn.Sequential(*layers)\n\n\nand fit our model:\n\n\nShow code\nlearn = fit()\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.130036\n0.055021\n0.986400\n00:10\n\n\n\n\n\nThat’s a great result! Let’s take a look at color_dim:\n\n\nShow code\nlearn.activation_stats.color_dim(-4)\n\n\n\n\n\n\n\n\n\nThis is just what we hope to see: a smooth development of activations, with no “crashes.” Batchnorm has really delivered on its promise here! In fact, batchnorm has been so successful that we see it (or something very similar) in nearly all modern neural networks.\nAn interesting observation about models containing batch normalization layers is that they tend to generalize better than models that don’t contain them. Although we haven’t as yet seen a rigorous analysis of what’s going on here, most researchers believe that the reason for this is that batch normalization adds some extra randomness to the training process. Each mini-batch will have a somewhat different mean and standard deviation than other mini-batches. Therefore, the activations will be normalized by different values each time. In order for the model to make accurate predictions, it will have to learn to become robust to these variations. In general, adding additional randomization to the training process often helps.\nSince things are going so well, let’s train for a few more epochs and see how it goes. In fact, let’s increase the learning rate, since the abstract of the batchnorm paper claimed we should be able to “train at much higher learning rates”:\n\n\nShow code\nlearn = fit(5, lr=0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.191731\n0.121738\n0.960900\n00:11\n\n\n1\n0.083739\n0.055808\n0.981800\n00:10\n\n\n2\n0.053161\n0.044485\n0.987100\n00:10\n\n\n3\n0.034433\n0.030233\n0.990200\n00:10\n\n\n4\n0.017646\n0.025407\n0.991200\n00:10\n\n\n\n\n\nAt this point, I think it’s fair to say we know how to recognize digits! It’s time to move on to something harder…"
  },
  {
    "objectID": "posts/13_convolutions.html#conclusions",
    "href": "posts/13_convolutions.html#conclusions",
    "title": "Convolutional Neural Networks",
    "section": "Conclusions",
    "text": "Conclusions\nWe’ve seen that convolutions are just a type of matrix multiplication, with two constraints on the weight matrix: some elements are always zero, and some elements are tied (forced to always have the same value). In &lt;&gt; we saw the eight requirements from the 1986 book Parallel Distributed Processing; one of them was “A pattern of connectivity among units.” That’s exactly what these constraints do: they enforce a certain pattern of connectivity.\nThese constraints allow us to use far fewer parameters in our model, without sacrificing the ability to represent complex visual features. That means we can train deeper models faster, with less overfitting. Although the universal approximation theorem shows that it should be possible to represent anything in a fully connected network in one hidden layer, we’ve seen now that in practice we can train much better models by being thoughtful about network architecture.\nConvolutions are by far the most common pattern of connectivity we see in neural nets (along with regular linear layers, which we refer to as fully connected), but it’s likely that many more will be discovered.\nWe’ve also seen how to interpret the activations of layers in the network to see whether training is going well or not, and how batchnorm helps regularize the training and makes it smoother. In the next chapter, we will use both of those layers to build the most popular architecture in computer vision: a residual network."
  },
  {
    "objectID": "posts/13_convolutions.html#questionnaire",
    "href": "posts/13_convolutions.html#questionnaire",
    "title": "Convolutional Neural Networks",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhat is a “feature”?\nWrite out the convolutional kernel matrix for a top edge detector.\nWrite out the mathematical operation applied by a 3×3 kernel to a single pixel in an image.\nWhat is the value of a convolutional kernel apply to a 3×3 matrix of zeros?\nWhat is “padding”?\nWhat is “stride”?\nCreate a nested list comprehension to complete any task that you choose.\nWhat are the shapes of the input and weight parameters to PyTorch’s 2D convolution?\nWhat is a “channel”?\nWhat is the relationship between a convolution and a matrix multiplication?\nWhat is a “convolutional neural network”?\nWhat is the benefit of refactoring parts of your neural network definition?\nWhat is Flatten? Where does it need to be included in the MNIST CNN? Why?\nWhat does “NCHW” mean?\nWhy does the third layer of the MNIST CNN have 7*7*(1168-16) multiplications?\nWhat is a “receptive field”?\nWhat is the size of the receptive field of an activation after two stride 2 convolutions? Why?\nRun conv-example.xlsx yourself and experiment with trace precedents.\nHave a look at Jeremy or Sylvain’s list of recent Twitter “like”s, and see if you find any interesting resources or ideas there.\nHow is a color image represented as a tensor?\nHow does a convolution work with a color input?\nWhat method can we use to see that data in DataLoaders?\nWhy do we double the number of filters after each stride-2 conv?\nWhy do we use a larger kernel in the first conv with MNIST (with simple_cnn)?\nWhat information does ActivationStats save for each layer?\nHow can we access a learner’s callback after training?\nWhat are the three statistics plotted by plot_layer_stats? What does the x-axis represent?\nWhy are activations near zero problematic?\nWhat are the upsides and downsides of training with a larger batch size?\nWhy should we avoid using a high learning rate at the start of training?\nWhat is 1cycle training?\nWhat are the benefits of training with a high learning rate?\nWhy do we want to use a low learning rate at the end of training?\nWhat is “cyclical momentum”?\nWhat callback tracks hyperparameter values during training (along with other information)?\nWhat does one column of pixels in the color_dim plot represent?\nWhat does “bad training” look like in color_dim? Why?\nWhat trainable parameters does a batch normalization layer contain?\nWhat statistics are used to normalize in batch normalization during training? How about during validation?\nWhy do models with batch normalization layers generalize better?\n\n\nFurther Research\n\nWhat features other than edge detectors have been used in computer vision (especially before deep learning became popular)?\nThere are other normalization layers available in PyTorch. Try them out and see what works best. Learn about why other normalization layers have been developed, and how they differ from batch normalization.\nTry moving the activation function after the batch normalization layer in conv. Does it make a difference? See what you can find out about what order is recommended, and why."
  },
  {
    "objectID": "posts/11_midlevel_data.html",
    "href": "posts/11_midlevel_data.html",
    "title": "Data Munging with fastai’s Mid-Level API",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\nfrom IPython.display import display,HTML\n[[chapter_midlevel_data]]\nWe have seen what Tokenizer and Numericalize do to a collection of texts, and how they’re used inside the data block API, which handles those transforms for us directly using the TextBlock. But what if we want to only apply one of those transforms, either to see intermediate results or because we have already tokenized texts? More generally, what can we do when the data block API is not flexible enough to accommodate our particular use case? For this, we need to use fastai’s mid-level API for processing data. The data block API is built on top of that layer, so it will allow you to do everything the data block API does, and much much more."
  },
  {
    "objectID": "posts/11_midlevel_data.html#going-deeper-into-fastais-layered-api",
    "href": "posts/11_midlevel_data.html#going-deeper-into-fastais-layered-api",
    "title": "Data Munging with fastai’s Mid-Level API",
    "section": "Going Deeper into fastai’s Layered API",
    "text": "Going Deeper into fastai’s Layered API\nThe fastai library is built on a layered API. In the very top layer there are applications that allow us to train a model in five lines of codes, as we saw in &lt;&gt;. In the case of creating DataLoaders for a text classifier, for instance, we used the line:\n\n\nShow code\nfrom fastai.text.all import *\n\ndls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid='test')\n\n\nThe factory method TextDataLoaders.from_folder is very convenient when your data is arranged the exact same way as the IMDb dataset, but in practice, that often won’t be the case. The data block API offers more flexibility. As we saw in the last chapter, we can get the same result with:\n\n\nShow code\npath = untar_data(URLs.IMDB)\ndls = DataBlock(\n    blocks=(TextBlock.from_folder(path),CategoryBlock),\n    get_y = parent_label,\n    get_items=partial(get_text_files, folders=['train', 'test']),\n    splitter=GrandparentSplitter(valid_name='test')\n).dataloaders(path)\n\n\nBut it’s sometimes not flexible enough. For debugging purposes, for instance, we might need to apply just parts of the transforms that come with this data block. Or we might want to create a DataLoaders for some application that isn’t directly supported by fastai. In this section, we’ll dig into the pieces that are used inside fastai to implement the data block API. Understanding these will enable you to leverage the power and flexibility of this mid-tier API.\n\nnote: Mid-Level API: The mid-level API does not only contain functionality for creating DataLoaders. It also has the callback system, which allows us to customize the training loop any way we like, and the general optimizer. Both will be covered in &lt;&gt;.\n\n\nTransforms\nWhen we studied tokenization and numericalization in the last chapter, we started by grabbing a bunch of texts:\n\n\nShow code\nfiles = get_text_files(path, folders = ['train', 'test'])\ntxts = L(o.open().read() for o in files[:2000])\n\n\nWe then showed how to tokenize them with a Tokenizer:\n\n\nShow code\ntok = Tokenizer.from_folder(path)\ntok.setup(txts)\ntoks = txts.map(tok)\ntoks[0]\n\n\n(#374) ['xxbos','xxmaj','well',',','\"','cube','\"','(','1997',')'...]\n\n\nand how to numericalize, including automatically creating the vocab for our corpus:\n\n\nShow code\nnum = Numericalize()\nnum.setup(toks)\nnums = toks.map(num)\nnums[0][:10]\n\n\ntensor([   2,    8,   76,   10,   23, 3112,   23,   34, 3113,   33])\n\n\nThe classes also have a decode method. For instance, Numericalize.decode gives us back the string tokens:\n\n\nShow code\nnums_dec = num.decode(nums[0][:10]); nums_dec\n\n\n(#10) ['xxbos','xxmaj','well',',','\"','cube','\"','(','1997',')']\n\n\nand Tokenizer.decode turns this back into a single string (it may not, however, be exactly the same as the original string; this depends on whether the tokenizer is reversible, which the default word tokenizer is not at the time we’re writing this book):\n\n\nShow code\ntok.decode(nums_dec)\n\n\n'xxbos xxmaj well , \" cube \" ( 1997 )'\n\n\ndecode is used by fastai’s show_batch and show_results, as well as some other inference methods, to convert predictions and mini-batches into a human-understandable representation.\nFor each of tok or num in the preceding example, we created an object, called the setup method (which trains the tokenizer if needed for tok and creates the vocab for num), applied it to our raw texts (by calling the object as a function), and then finally decoded the result back to an understandable representation. These steps are needed for most data preprocessing tasks, so fastai provides a class that encapsulates them. This is the Transform class. Both Tokenize and Numericalize are Transforms.\nIn general, a Transform is an object that behaves like a function and has an optional setup method that will initialize some inner state (like the vocab inside num) and an optional decode that will reverse the function (this reversal may not be perfect, as we saw with tok).\nA good example of decode is found in the Normalize transform that we saw in &lt;&gt;: to be able to plot the images its decode method undoes the normalization (i.e., it multiplies by the standard deviation and adds back the mean). On the other hand, data augmentation transforms do not have a decode method, since we want to show the effects on images to make sure the data augmentation is working as we want.\nA special behavior of Transforms is that they always get applied over tuples. In general, our data is always a tuple (input,target) (sometimes with more than one input or more than one target). When applying a transform on an item like this, such as Resize, we don’t want to resize the tuple as a whole; instead, we want to resize the input (if applicable) and the target (if applicable) separately. It’s the same for batch transforms that do data augmentation: when the input is an image and the target is a segmentation mask, the transform needs to be applied (the same way) to the input and the target.\nWe can see this behavior if we pass a tuple of texts to tok:\n\n\nShow code\ntok((txts[0], txts[1]))\n\n\n((#374) ['xxbos','xxmaj','well',',','\"','cube','\"','(','1997',')'...],\n (#207) ['xxbos','xxmaj','conrad','xxmaj','hall','went','out','with','a','bang'...])\n\n\n\n\nWriting Your Own Transform\nIf you want to write a custom transform to apply to your data, the easiest way is to write a function. As you can see in this example, a Transform will only be applied to a matching type, if a type is provided (otherwise it will always be applied). In the following code, the :int in the function signature means that f only gets applied to ints. That’s why tfm(2.0) returns 2.0, but tfm(2) returns 3 here:\n\n\nShow code\ndef f(x:int): return x+1\ntfm = Transform(f)\ntfm(2),tfm(2.0)\n\n\n(3, 2.0)\n\n\nHere, f is converted to a Transform with no setup and no decode method.\nPython has a special syntax for passing a function (like f) to another function (or something that behaves like a function, known as a callable in Python), called a decorator. A decorator is used by prepending a callable with @ and placing it before a function definition (there are lots of good online tutorials about Python decorators, so take a look at one if this is a new concept for you). The following is identical to the previous code:\n\n\nShow code\n@Transform\ndef f(x:int): return x+1\nf(2),f(2.0)\n\n\n(3, 2.0)\n\n\nIf you need either setup or decode, you will need to subclass Transform to implement the actual encoding behavior in encodes, then (optionally), the setup behavior in setups and the decoding behavior in decodes:\n\n\nShow code\nclass NormalizeMean(Transform):\n    def setups(self, items): self.mean = sum(items)/len(items)\n    def encodes(self, x): return x-self.mean\n    def decodes(self, x): return x+self.mean\n\n\nHere, NormalizeMean will initialize some state during the setup (the mean of all elements passed), then the transformation is to subtract that mean. For decoding purposes, we implement the reverse of that transformation by adding the mean. Here is an example of NormalizeMean in action:\n\n\nShow code\ntfm = NormalizeMean()\ntfm.setup([1,2,3,4,5])\nstart = 2\ny = tfm(start)\nz = tfm.decode(y)\ntfm.mean,y,z\n\n\n(3.0, -1.0, 2.0)\n\n\nNote that the method called and the method implemented are different, for each of these methods:\n[options=\"header\"]\n|======\n| Class | To call | To implement\n| `nn.Module` (PyTorch) | `()` (i.e., call as function) | `forward`\n| `Transform` | `()` | `encodes`\n| `Transform` | `decode()` | `decodes`\n| `Transform` | `setup()` | `setups`\n|======\nSo, for instance, you would never call setups directly, but instead would call setup. The reason for this is that setup does some work before and after calling setups for you. To learn more about Transforms and how you can use them to implement different behavior depending on the type of the input, be sure to check the tutorials in the fastai docs.\n\n\nPipeline\nTo compose several transforms together, fastai provides the Pipeline class. We define a Pipeline by passing it a list of Transforms; it will then compose the transforms inside it. When you call Pipeline on an object, it will automatically call the transforms inside, in order:\n\n\nShow code\ntfms = Pipeline([tok, num])\nt = tfms(txts[0]); t[:20]\n\n\ntensor([   2,    8,   76,   10,   23, 3112,   23,   34, 3113,   33,   10,    8, 4477,   22,   88,   32,   10,   27,   42,   14])\n\n\nAnd you can call decode on the result of your encoding, to get back something you can display and analyze:\n\n\nShow code\ntfms.decode(t)[:100]\n\n\n'xxbos xxmaj well , \" cube \" ( 1997 ) , xxmaj vincenzo \\'s first movie , was one of the most interesti'\n\n\nThe only part that doesn’t work the same way as in Transform is the setup. To properly set up a Pipeline of Transforms on some data, you need to use a TfmdLists."
  },
  {
    "objectID": "posts/11_midlevel_data.html#tfmdlists-and-datasets-transformed-collections",
    "href": "posts/11_midlevel_data.html#tfmdlists-and-datasets-transformed-collections",
    "title": "Data Munging with fastai’s Mid-Level API",
    "section": "TfmdLists and Datasets: Transformed Collections",
    "text": "TfmdLists and Datasets: Transformed Collections\nYour data is usually a set of raw items (like filenames, or rows in a DataFrame) to which you want to apply a succession of transformations. We just saw that a succession of transformations is represented by a Pipeline in fastai. The class that groups together this Pipeline with your raw items is called TfmdLists.\n\nTfmdLists\nHere is the short way of doing the transformation we saw in the previous section:\n\n\nShow code\ntls = TfmdLists(files, [Tokenizer.from_folder(path), Numericalize])\n\n\nAt initialization, the TfmdLists will automatically call the setup method of each Transform in order, providing them not with the raw items but the items transformed by all the previous Transforms in order. We can get the result of our Pipeline on any raw element just by indexing into the TfmdLists:\n\n\nShow code\nt = tls[0]; t[:20]\n\n\ntensor([    2,     8,    91,    11,    22,  5793,    22,    37,  4910,    34,    11,     8, 13042,    23,   107,    30,    11,    25,    44,    14])\n\n\nAnd the TfmdLists knows how to decode for show purposes:\n\n\nShow code\ntls.decode(t)[:100]\n\n\n'xxbos xxmaj well , \" cube \" ( 1997 ) , xxmaj vincenzo \\'s first movie , was one of the most interesti'\n\n\nIn fact, it even has a show method:\n\n\nShow code\ntls.show(t)\n\n\nxxbos xxmaj well , \" cube \" ( 1997 ) , xxmaj vincenzo 's first movie , was one of the most interesting and tricky ideas that xxmaj i 've ever seen when talking about movies . xxmaj they had just one scenery , a bunch of actors and a plot . xxmaj so , what made it so special were all the effective direction , great dialogs and a bizarre condition that characters had to deal like rats in a labyrinth . xxmaj his second movie , \" cypher \" ( 2002 ) , was all about its story , but it was n't so good as \" cube \" but here are the characters being tested like rats again . \n\n \" nothing \" is something very interesting and gets xxmaj vincenzo coming back to his ' cube days ' , locking the characters once again in a very different space with no time once more playing with the characters like playing with rats in an experience room . xxmaj but instead of a thriller sci - fi ( even some of the promotional teasers and trailers erroneous seemed like that ) , \" nothing \" is a loose and light comedy that for sure can be called a modern satire about our society and also about the intolerant world we 're living . xxmaj once again xxmaj xxunk amaze us with a great idea into a so small kind of thing . 2 actors and a blinding white scenario , that 's all you got most part of time and you do n't need more than that . xxmaj while \" cube \" is a claustrophobic experience and \" cypher \" confusing , \" nothing \" is completely the opposite but at the same time also desperate . \n\n xxmaj this movie proves once again that a smart idea means much more than just a millionaire budget . xxmaj of course that the movie fails sometimes , but its prime idea means a lot and offsets any flaws . xxmaj there 's nothing more to be said about this movie because everything is a brilliant surprise and a totally different experience that i had in movies since \" cube \" .\n\n\nThe TfmdLists is named with an “s” because it can handle a training and a validation set with a splits argument. You just need to pass the indices of which elements are in the training set, and which are in the validation set:\n\n\nShow code\ncut = int(len(files)*0.8)\nsplits = [list(range(cut)), list(range(cut,len(files)))]\ntls = TfmdLists(files, [Tokenizer.from_folder(path), Numericalize], \n                splits=splits)\n\n\nYou can then access them through the train and valid attributes:\n\n\nShow code\ntls.valid[0][:20]\n\n\ntensor([    2,     8,    20,    30,    87,   510,  1570,    12,   408,   379,  4196,    10,     8,    20,    30,    16,    13, 12216,   202,   509])\n\n\nIf you have manually written a Transform that performs all of your preprocessing at once, turning raw items into a tuple with inputs and targets, then TfmdLists is the class you need. You can directly convert it to a DataLoaders object with the dataloaders method. This is what we will do in our Siamese example later in this chapter.\nIn general, though, you will have two (or more) parallel pipelines of transforms: one for processing your raw items into inputs and one to process your raw items into targets. For instance, here, the pipeline we defined only processes the raw text into inputs. If we want to do text classification, we also have to process the labels into targets.\nFor this we need to do two things. First we take the label name from the parent folder. There is a function, parent_label, for this:\n\n\nShow code\nlbls = files.map(parent_label)\nlbls\n\n\n(#50000) ['pos','pos','pos','pos','pos','pos','pos','pos','pos','pos'...]\n\n\nThen we need a Transform that will grab the unique items and build a vocab with them during setup, then transform the string labels into integers when called. fastai provides this for us; it’s called Categorize:\n\n\nShow code\ncat = Categorize()\ncat.setup(lbls)\ncat.vocab, cat(lbls[0])\n\n\n((#2) ['neg','pos'], TensorCategory(1))\n\n\nTo do the whole setup automatically on our list of files, we can create a TfmdLists as before:\n\n\nShow code\ntls_y = TfmdLists(files, [parent_label, Categorize()])\ntls_y[0]\n\n\nTensorCategory(1)\n\n\nBut then we end up with two separate objects for our inputs and targets, which is not what we want. This is where Datasets comes to the rescue.\n\n\nDatasets\nDatasets will apply two (or more) pipelines in parallel to the same raw object and build a tuple with the result. Like TfmdLists, it will automatically do the setup for us, and when we index into a Datasets, it will return us a tuple with the results of each pipeline:\n\n\nShow code\nx_tfms = [Tokenizer.from_folder(path), Numericalize]\ny_tfms = [parent_label, Categorize()]\ndsets = Datasets(files, [x_tfms, y_tfms])\nx,y = dsets[0]\nx[:20],y\n\n\nLike a TfmdLists, we can pass along splits to a Datasets to split our data between training and validation sets:\n\n\nShow code\nx_tfms = [Tokenizer.from_folder(path), Numericalize]\ny_tfms = [parent_label, Categorize()]\ndsets = Datasets(files, [x_tfms, y_tfms], splits=splits)\nx,y = dsets.valid[0]\nx[:20],y\n\n\n(tensor([    2,     8,    20,    30,    87,   510,  1570,    12,   408,   379,  4196,    10,     8,    20,    30,    16,    13, 12216,   202,   509]),\n TensorCategory(0))\n\n\nIt can also decode any processed tuple or show it directly:\n\n\nShow code\nt = dsets.valid[0]\ndsets.decode(t)\n\n\n('xxbos xxmaj this movie had horrible lighting and terrible camera movements . xxmaj this movie is a jumpy horror flick with no meaning at all . xxmaj the slashes are totally fake looking . xxmaj it looks like some 17 year - old idiot wrote this movie and a 10 year old kid shot it . xxmaj with the worst acting you can ever find . xxmaj people are tired of knives . xxmaj at least move on to guns or fire . xxmaj it has almost exact lines from \" when a xxmaj stranger xxmaj calls \" . xxmaj with gruesome killings , only crazy people would enjoy this movie . xxmaj it is obvious the writer does n\\'t have kids or even care for them . i mean at show some mercy . xxmaj just to sum it up , this movie is a \" b \" movie and it sucked . xxmaj just for your own sake , do n\\'t even think about wasting your time watching this crappy movie .',\n 'neg')\n\n\nThe last step is to convert our Datasets object to a DataLoaders, which can be done with the dataloaders method. Here we need to pass along a special argument to take care of the padding problem (as we saw in the last chapter). This needs to happen just before we batch the elements, so we pass it to before_batch:\n\n\nShow code\ndls = dsets.dataloaders(bs=64, before_batch=pad_input)\n\n\ndataloaders directly calls DataLoader on each subset of our Datasets. fastai’s DataLoader expands the PyTorch class of the same name and is responsible for collating the items from our datasets into batches. It has a lot of points of customization, but the most important ones that you should know are:\n\nafter_item:: Applied on each item after grabbing it inside the dataset. This is the equivalent of item_tfms in DataBlock.\nbefore_batch:: Applied on the list of items before they are collated. This is the ideal place to pad items to the same size.\nafter_batch:: Applied on the batch as a whole after its construction. This is the equivalent of batch_tfms in DataBlock.\n\nAs a conclusion, here is the full code necessary to prepare the data for text classification:\n\n\nShow code\ntfms = [[Tokenizer.from_folder(path), Numericalize], [parent_label, Categorize]]\nfiles = get_text_files(path, folders = ['train', 'test'])\nsplits = GrandparentSplitter(valid_name='test')(files)\ndsets = Datasets(files, tfms, splits=splits)\ndls = dsets.dataloaders(dl_type=SortedDL, before_batch=pad_input)\n\n\nThe two differences from the previous code are the use of GrandparentSplitter to split our training and validation data, and the dl_type argument. This is to tell dataloaders to use the SortedDL class of DataLoader, and not the usual one. SortedDL constructs batches by putting samples of roughly the same lengths into batches.\nThis does the exact same thing as our previous DataBlock:\n\n\nShow code\npath = untar_data(URLs.IMDB)\ndls = DataBlock(\n    blocks=(TextBlock.from_folder(path),CategoryBlock),\n    get_y = parent_label,\n    get_items=partial(get_text_files, folders=['train', 'test']),\n    splitter=GrandparentSplitter(valid_name='test')\n).dataloaders(path)\n\n\nBut now, you know how to customize every single piece of it!\nLet’s practice what we just learned about this mid-level API for data preprocessing, using a computer vision example now."
  },
  {
    "objectID": "posts/11_midlevel_data.html#applying-the-mid-level-data-api-siamesepair",
    "href": "posts/11_midlevel_data.html#applying-the-mid-level-data-api-siamesepair",
    "title": "Data Munging with fastai’s Mid-Level API",
    "section": "Applying the Mid-Level Data API: SiamesePair",
    "text": "Applying the Mid-Level Data API: SiamesePair\nA Siamese model takes two images and has to determine if they are of the same class or not. For this example, we will use the Pet dataset again and prepare the data for a model that will have to predict if two images of pets are of the same breed or not. We will explain here how to prepare the data for such a model, then we will train that model in &lt;&gt;.\nFirst things first, let’s get the images in our dataset:\n\n\nShow code\nfrom fastai.vision.all import *\npath = untar_data(URLs.PETS)\nfiles = get_image_files(path/\"images\")\n\n\nIf we didn’t care about showing our objects at all, we could directly create one transform to completely preprocess that list of files. We will want to look at those images though, so we need to create a custom type. When you call the show method on a TfmdLists or a Datasets object, it will decode items until it reaches a type that contains a show method and use it to show the object. That show method gets passed a ctx, which could be a matplotlib axis for images, or a row of a DataFrame for texts.\nHere we create a SiameseImage object that subclasses fastuple and is intended to contain three things: two images, and a Boolean that’s True if the images are of the same breed. We also implement the special show method, such that it concatenates the two images with a black line in the middle. Don’t worry too much about the part that is in the if test (which is to show the SiameseImage when the images are Python images, not tensors); the important part is in the last three lines:\n\n\nShow code\nclass SiameseImage(fastuple):\n    def show(self, ctx=None, **kwargs): \n        img1,img2,same_breed = self\n        if not isinstance(img1, Tensor):\n            if img2.size != img1.size: img2 = img2.resize(img1.size)\n            t1,t2 = tensor(img1),tensor(img2)\n            t1,t2 = t1.permute(2,0,1),t2.permute(2,0,1)\n        else: t1,t2 = img1,img2\n        line = t1.new_zeros(t1.shape[0], t1.shape[1], 10)\n        return show_image(torch.cat([t1,line,t2], dim=2), \n                          title=same_breed, ctx=ctx)\n\n\nLet’s create a first SiameseImage and check our show method works:\n\n\nShow code\nimg = PILImage.create(files[0])\ns = SiameseImage(img, img, True)\ns.show();\n\n\n\n\n\n\n\n\n\nWe can also try with a second image that’s not from the same class:\n\n\nShow code\nimg1 = PILImage.create(files[1])\ns1 = SiameseImage(img, img1, False)\ns1.show();\n\n\n\n\n\n\n\n\n\nThe important thing with transforms that we saw before is that they dispatch over tuples or their subclasses. That’s precisely why we chose to subclass fastuple in this instance—this way we can apply any transform that works on images to our SiameseImage and it will be applied on each image in the tuple:\n\n\nShow code\ns2 = Resize(224)(s1)\ns2.show();\n\n\n\n\n\n\n\n\n\nHere the Resize transform is applied to each of the two images, but not the Boolean flag. Even if we have a custom type, we can thus benefit from all the data augmentation transforms inside the library.\nWe are now ready to build the Transform that we will use to get our data ready for a Siamese model. First, we will need a function to determine the classes of all our images:\n\n\nShow code\ndef label_func(fname):\n    return re.match(r'^(.*)_\\d+.jpg$', fname.name).groups()[0]\n\n\nFor each image our tranform will, with a probability of 0.5, draw an image from the same class and return a SiameseImage with a true label, or draw an image from another class and return a SiameseImage with a false label. This is all done in the private _draw function. There is one difference between the training and validation sets, which is why the transform needs to be initialized with the splits: on the training set we will make that random pick each time we read an image, whereas on the validation set we make this random pick once and for all at initialization. This way, we get more varied samples during training, but always the same validation set:\n\n\nShow code\nclass SiameseTransform(Transform):\n    def __init__(self, files, label_func, splits):\n        self.labels = files.map(label_func).unique()\n        self.lbl2files = {l: L(f for f in files if label_func(f) == l) \n                          for l in self.labels}\n        self.label_func = label_func\n        self.valid = {f: self._draw(f) for f in files[splits[1]]}\n        \n    def encodes(self, f):\n        f2,t = self.valid.get(f, self._draw(f))\n        img1,img2 = PILImage.create(f),PILImage.create(f2)\n        return SiameseImage(img1, img2, t)\n    \n    def _draw(self, f):\n        same = random.random() &lt; 0.5\n        cls = self.label_func(f)\n        if not same: \n            cls = random.choice(L(l for l in self.labels if l != cls)) \n        return random.choice(self.lbl2files[cls]),same\n\n\nWe can then create our main transform:\n\n\nShow code\nsplits = RandomSplitter()(files)\ntfm = SiameseTransform(files, label_func, splits)\ntfm(files[0]).show();\n\n\n\n\n\n\n\n\n\nIn the mid-level API for data collection we have two objects that can help us apply transforms on a set of items, TfmdLists and Datasets. If you remember what we have just seen, one applies a Pipeline of transforms and the other applies several Pipelines of transforms in parallel, to build tuples. Here, our main transform already builds the tuples, so we use TfmdLists:\n\n\nShow code\ntls = TfmdLists(files, tfm, splits=splits)\nshow_at(tls.valid, 0);\n\n\n\n\n\n\n\n\n\nAnd we can finally get our data in DataLoaders by calling the dataloaders method. One thing to be careful of here is that this method does not take item_tfms and batch_tfms like a DataBlock. The fastai DataLoader has several hooks that are named after events; here what we apply on the items after they are grabbed is called after_item, and what we apply on the batch once it’s built is called after_batch:\n\n\nShow code\ndls = tls.dataloaders(after_item=[Resize(224), ToTensor], \n    after_batch=[IntToFloatTensor, Normalize.from_stats(*imagenet_stats)])\n\n\nNote that we need to pass more transforms than usual—that’s because the data block API usually adds them automatically:\n\nToTensor is the one that converts images to tensors (again, it’s applied on every part of the tuple).\nIntToFloatTensor converts the tensor of images containing integers from 0 to 255 to a tensor of floats, and divides by 255 to make the values between 0 and 1.\n\nWe can now train a model using this DataLoaders. It will need a bit more customization than the usual model provided by vision_learner since it has to take two images instead of one, but we will see how to create such a model and train it in &lt;&gt;."
  },
  {
    "objectID": "posts/11_midlevel_data.html#conclusion",
    "href": "posts/11_midlevel_data.html#conclusion",
    "title": "Data Munging with fastai’s Mid-Level API",
    "section": "Conclusion",
    "text": "Conclusion\nfastai provides a layered API. It takes one line of code to grab the data when it’s in one of the usual settings, making it easy for beginners to focus on training a model without spending too much time assembling the data. Then, the high-level data block API gives you more flexibility by allowing you to mix and match some building blocks. Underneath it, the mid-level API gives you greater flexibility to apply any transformations on your items. In your real-world problems, this is probably what you will need to use, and we hope it makes the step of data-munging as easy as possible."
  },
  {
    "objectID": "posts/11_midlevel_data.html#questionnaire",
    "href": "posts/11_midlevel_data.html#questionnaire",
    "title": "Data Munging with fastai’s Mid-Level API",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhy do we say that fastai has a “layered” API? What does it mean?\nWhy does a Transform have a decode method? What does it do?\nWhy does a Transform have a setup method? What does it do?\nHow does a Transform work when called on a tuple?\nWhich methods do you need to implement when writing your own Transform?\nWrite a Normalize transform that fully normalizes items (subtract the mean and divide by the standard deviation of the dataset), and that can decode that behavior. Try not to peek!\nWrite a Transform that does the numericalization of tokenized texts (it should set its vocab automatically from the dataset seen and have a decode method). Look at the source code of fastai if you need help.\nWhat is a Pipeline?\nWhat is a TfmdLists?\nWhat is a Datasets? How is it different from a TfmdLists?\nWhy are TfmdLists and Datasets named with an “s”?\nHow can you build a DataLoaders from a TfmdLists or a Datasets?\nHow do you pass item_tfms and batch_tfms when building a DataLoaders from a TfmdLists or a Datasets?\nWhat do you need to do when you want to have your custom items work with methods like show_batch or show_results?\nWhy can we easily apply fastai data augmentation transforms to the SiamesePair we built?\n\n\nFurther Research\n\nUse the mid-level API to prepare the data in DataLoaders on your own datasets. Try this with the Pet dataset and the Adult dataset from Chapter 1.\nLook at the Siamese tutorial in the fastai documentation to learn how to customize the behavior of show_batch and show_results for new type of items. Implement it in your own project."
  },
  {
    "objectID": "posts/11_midlevel_data.html#understanding-fastais-applications-wrap-up",
    "href": "posts/11_midlevel_data.html#understanding-fastais-applications-wrap-up",
    "title": "Data Munging with fastai’s Mid-Level API",
    "section": "Understanding fastai’s Applications: Wrap Up",
    "text": "Understanding fastai’s Applications: Wrap Up\nCongratulations—you’ve completed all of the chapters in this book that cover the key practical parts of training models and using deep learning! You know how to use all of fastai’s built-in applications, and how to customize them using the data block API and loss functions. You even know how to create a neural network from scratch, and train it! (And hopefully you now know some of the questions to ask to make sure your creations help improve society too.)\nThe knowledge you already have is enough to create full working prototypes of many types of neural network applications. More importantly, it will help you understand the capabilities and limitations of deep learning models, and how to design a system that’s well adapted to them.\nIn the rest of this book we will be pulling apart those applications, piece by piece, to understand the foundations they are built on. This is important knowledge for a deep learning practitioner, because it is what allows you to inspect and debug models that you build and create new applications that are customized for your particular projects."
  },
  {
    "objectID": "posts/09_tabular.html",
    "href": "posts/09_tabular.html",
    "title": "Tabular Modeling Deep Dive",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook kaggle waterfallcharts treeinterpreter dtreeviz==1.4.1\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\nfrom pandas.api.types import is_string_dtype, is_numeric_dtype, is_categorical_dtype\nfrom fastai.tabular.all import *\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom dtreeviz.trees import *\nfrom IPython.display import Image, display_svg, SVG\n\npd.options.display.max_rows = 20\npd.options.display.max_columns = 8\n[[chapter_tabular]]\nTabular modeling takes data in the form of a table (like a spreadsheet or CSV). The objective is to predict the value in one column based on the values in the other columns. In this chapter we will not only look at deep learning but also more general machine learning techniques like random forests, as they can give better results depending on your problem.\nWe will look at how we should preprocess and clean the data as well as how to interpret the result of our models after training, but first, we will see how we can feed columns that contain categories into a model that expects numbers by using embeddings."
  },
  {
    "objectID": "posts/09_tabular.html#categorical-embeddings",
    "href": "posts/09_tabular.html#categorical-embeddings",
    "title": "Tabular Modeling Deep Dive",
    "section": "Categorical Embeddings",
    "text": "Categorical Embeddings\nIn tabular data some columns may contain numerical data, like “age,” while others contain string values, like “sex.” The numerical data can be directly fed to the model (with some optional preprocessing), but the other columns need to be converted to numbers. Since the values in those correspond to different categories, we often call this type of variables categorical variables. The first type are called continuous variables.\n\njargon: Continuous and Categorical Variables: Continuous variables are numerical data, such as “age,” that can be directly fed to the model, since you can add and multiply them directly. Categorical variables contain a number of discrete levels, such as “movie ID,” for which addition and multiplication don’t have meaning (even if they’re stored as numbers).\n\nAt the end of 2015, the Rossmann sales competition ran on Kaggle. Competitors were given a wide range of information about various stores in Germany, and were tasked with trying to predict sales on a number of days. The goal was to help the company to manage stock properly and be able to satisfy demand without holding unnecessary inventory. The official training set provided a lot of information about the stores. It was also permitted for competitors to use additional data, as long as that data was made public and available to all participants.\nOne of the gold medalists used deep learning, in one of the earliest known examples of a state-of-the-art deep learning tabular model. Their method involved far less feature engineering, based on domain knowledge, than those of the other gold medalists. The paper, “Entity Embeddings of Categorical Variables” describes their approach. In an online-only chapter on the book’s website we show how to replicate it from scratch and attain the same accuracy shown in the paper. In the abstract of the paper the authors (Cheng Guo and Felix Berkhahn) say:\n\n: Entity embedding not only reduces memory usage and speeds up neural networks compared with one-hot encoding, but more importantly by mapping similar values close to each other in the embedding space it reveals the intrinsic properties of the categorical variables… [It] is especially useful for datasets with lots of high cardinality features, where other methods tend to overfit… As entity embedding defines a distance measure for categorical variables it can be used for visualizing categorical data and for data clustering.\n\nWe have already noticed all of these points when we built our collaborative filtering model. We can clearly see that these insights go far beyond just collaborative filtering, however.\nThe paper also points out that (as we discussed in the last chapter) an embedding layer is exactly equivalent to placing an ordinary linear layer after every one-hot-encoded input layer. The authors used the diagram in &lt;&gt; to show this equivalence. Note that “dense layer” is a term with the same meaning as “linear layer,” and the one-hot encoding layers represent inputs.\n\nThe insight is important because we already know how to train linear layers, so this shows that from the point of view of the architecture and our training algorithm the embedding layer is just another layer. We also saw this in practice in the last chapter, when we built a collaborative filtering neural network that looks exactly like this diagram.\nWhere we analyzed the embedding weights for movie reviews, the authors of the entity embeddings paper analyzed the embedding weights for their sales prediction model. What they found was quite amazing, and illustrates their second key insight. This is that the embedding transforms the categorical variables into inputs that are both continuous and meaningful.\nThe images in &lt;&gt; illustrate these ideas. They are based on the approaches used in the paper, along with some analysis we have added.\n\nOn the left is a plot of the embedding matrix for the possible values of the State category. For a categorical variable we call the possible values of the variable its “levels” (or “categories” or “classes”), so here one level is “Berlin,” another is “Hamburg,” etc. On the right is a map of Germany. The actual physical locations of the German states were not part of the provided data, yet the model itself learned where they must be, based only on the behavior of store sales!\nDo you remember how we talked about distance between embeddings? The authors of the paper plotted the distance between store embeddings against the actual geographic distance between the stores (see &lt;&gt;). They found that they matched very closely!\n\nWe’ve even tried plotting the embeddings for days of the week and months of the year, and found that days and months that are near each other on the calendar ended up close as embeddings too, as shown in &lt;&gt;.\n\nWhat stands out in these two examples is that we provide the model fundamentally categorical data about discrete entities (e.g., German states or days of the week), and then the model learns an embedding for these entities that defines a continuous notion of distance between them. Because the embedding distance was learned based on real patterns in the data, that distance tends to match up with our intuitions.\nIn addition, it is valuable in its own right that embeddings are continuous, because models are better at understanding continuous variables. This is unsurprising considering models are built of many continuous parameter weights and continuous activation values, which are updated via gradient descent (a learning algorithm for finding the minimums of continuous functions).\nAnother benefit is that we can combine our continuous embedding values with truly continuous input data in a straightforward manner: we just concatenate the variables, and feed the concatenation into our first dense layer. In other words, the raw categorical data is transformed by an embedding layer before it interacts with the raw continuous input data. This is how fastai and Guo and Berkhahn handle tabular models containing continuous and categorical variables.\nAn example using this concatenation approach is how Google does its recommendations on Google Play, as explained in the paper “Wide & Deep Learning for Recommender Systems”. &lt;&gt; illustrates.\n\nInterestingly, the Google team actually combined both approaches we saw in the previous chapter: the dot product (which they call cross product) and neural network approaches.\nLet’s pause for a moment. So far, the solution to all of our modeling problems has been: train a deep learning model. And indeed, that is a pretty good rule of thumb for complex unstructured data like images, sounds, natural language text, and so forth. Deep learning also works very well for collaborative filtering. But it is not always the best starting point for analyzing tabular data."
  },
  {
    "objectID": "posts/09_tabular.html#beyond-deep-learning",
    "href": "posts/09_tabular.html#beyond-deep-learning",
    "title": "Tabular Modeling Deep Dive",
    "section": "Beyond Deep Learning",
    "text": "Beyond Deep Learning\nMost machine learning courses will throw dozens of different algorithms at you, with a brief technical description of the math behind them and maybe a toy example. You’re left confused by the enormous range of techniques shown and have little practical understanding of how to apply them.\nThe good news is that modern machine learning can be distilled down to a couple of key techniques that are widely applicable. Recent studies have shown that the vast majority of datasets can be best modeled with just two methods:\n\nEnsembles of decision trees (i.e., random forests and gradient boosting machines), mainly for structured data (such as you might find in a database table at most companies)\nMultilayered neural networks learned with SGD (i.e., shallow and/or deep learning), mainly for unstructured data (such as audio, images, and natural language)\n\nAlthough deep learning is nearly always clearly superior for unstructured data, these two approaches tend to give quite similar results for many kinds of structured data. But ensembles of decision trees tend to train faster, are often easier to interpret, do not require special GPU hardware for inference at scale, and often require less hyperparameter tuning. They have also been popular for quite a lot longer than deep learning, so there is a more mature ecosystem of tooling and documentation around them.\nMost importantly, the critical step of interpreting a model of tabular data is significantly easier for decision tree ensembles. There are tools and methods for answering the pertinent questions, like: Which columns in the dataset were the most important for your predictions? How are they related to the dependent variable? How do they interact with each other? And which particular features were most important for some particular observation?\nTherefore, ensembles of decision trees are our first approach for analyzing a new tabular dataset.\nThe exception to this guideline is when the dataset meets one of these conditions:\n\nThere are some high-cardinality categorical variables that are very important (“cardinality” refers to the number of discrete levels representing categories, so a high-cardinality categorical variable is something like a zip code, which can take on thousands of possible levels).\nThere are some columns that contain data that would be best understood with a neural network, such as plain text data.\n\nIn practice, when we deal with datasets that meet these exceptional conditions, we always try both decision tree ensembles and deep learning to see which works best. It is likely that deep learning will be a useful approach in our example of collaborative filtering, as we have at least two high-cardinality categorical variables: the users and the movies. But in practice things tend to be less cut-and-dried, and there will often be a mixture of high- and low-cardinality categorical variables and continuous variables.\nEither way, it’s clear that we are going to need to add decision tree ensembles to our modeling toolbox!\nUp to now we’ve used PyTorch and fastai for pretty much all of our heavy lifting. But these libraries are mainly designed for algorithms that do lots of matrix multiplication and derivatives (that is, stuff like deep learning!). Decision trees don’t depend on these operations at all, so PyTorch isn’t much use.\nInstead, we will be largely relying on a library called scikit-learn (also known as sklearn). Scikit-learn is a popular library for creating machine learning models, using approaches that are not covered by deep learning. In addition, we’ll need to do some tabular data processing and querying, so we’ll want to use the Pandas library. Finally, we’ll also need NumPy, since that’s the main numeric programming library that both sklearn and Pandas rely on.\nWe don’t have time to do a deep dive into all these libraries in this book, so we’ll just be touching on some of the main parts of each. For a far more in depth discussion, we strongly suggest Wes McKinney’s Python for Data Analysis (O’Reilly). Wes is the creator of Pandas, so you can be sure that the information is accurate!\nFirst, let’s gather the data we will use."
  },
  {
    "objectID": "posts/09_tabular.html#the-dataset",
    "href": "posts/09_tabular.html#the-dataset",
    "title": "Tabular Modeling Deep Dive",
    "section": "The Dataset",
    "text": "The Dataset\nThe dataset we use in this chapter is from the Blue Book for Bulldozers Kaggle competition, which has the following description: “The goal of the contest is to predict the sale price of a particular piece of heavy equipment at auction based on its usage, equipment type, and configuration. The data is sourced from auction result postings and includes information on usage and equipment configurations.”\nThis is a very common type of dataset and prediction problem, similar to what you may see in your project or workplace. The dataset is available for download on Kaggle, a website that hosts data science competitions.\n\nKaggle Competitions\nKaggle is an awesome resource for aspiring data scientists or anyone looking to improve their machine learning skills. There is nothing like getting hands-on practice and receiving real-time feedback to help you improve your skills.\nKaggle provides:\n\nInteresting datasets\nFeedback on how you’re doing\nA leaderboard to see what’s good, what’s possible, and what’s state-of-the-art\nBlog posts by winning contestants sharing useful tips and techniques\n\nUntil now all our datasets have been available to download through fastai’s integrated dataset system. However, the dataset we will be using in this chapter is only available from Kaggle. Therefore, you will need to register on the site, then go to the page for the competition. On that page click “Rules,” then “I Understand and Accept.” (Although the competition has finished, and you will not be entering it, you still have to agree to the rules to be allowed to download the data.)\nThe easiest way to download Kaggle datasets is to use the Kaggle API. You can install this using pip by running this in a notebook cell:\n!pip install kaggle\nYou need an API key to use the Kaggle API; to get one, click on your profile picture on the Kaggle website, and choose My Account, then click Create New API Token. This will save a file called kaggle.json to your PC. You need to copy this key on your GPU server. To do so, open the file you downloaded, copy the contents, and paste them in the following cell in the notebook associated with this chapter (e.g., creds = '{\"username\":\"xxx\",\"key\":\"xxx\"}'):\n\n\nShow code\ncreds = ''\n\n\nThen execute this cell (this only needs to be run once):\n\n\nShow code\ncred_path = Path('~/.kaggle/kaggle.json').expanduser()\nif not cred_path.exists():\n    cred_path.parent.mkdir(exist_ok=True)\n    cred_path.write_text(creds)\n    cred_path.chmod(0o600)\n\n\nNow you can download datasets from Kaggle! Pick a path to download the dataset to:\n\n\nShow code\ncomp = 'bluebook-for-bulldozers'\npath = URLs.path(comp)\npath\n\n\nPath('/home/jhoward/.fastai/archive/bluebook-for-bulldozers')\n\n\n\n\nShow code\n#hide\nPath.BASE_PATH = path\n\n\nAnd use the Kaggle API to download the dataset to that path, and extract it:\n\n\nShow code\nfrom kaggle import api\n\nif not path.exists():\n    path.mkdir(parents=true)\n    api.competition_download_cli(comp, path=path)\n    shutil.unpack_archive(str(path/f'{comp}.zip'), str(path))\n\npath.ls(file_type='text')\n\n\n(#7) [Path('ValidSolution.csv'),Path('Machine_Appendix.csv'),Path('TrainAndValid.csv'),Path('median_benchmark.csv'),Path('random_forest_benchmark_test.csv'),Path('Test.csv'),Path('Valid.csv')]\n\n\nNow that we have downloaded our dataset, let’s take a look at it!\n\n\nLook at the Data\nKaggle provides information about some of the fields of our dataset. The Data explains that the key fields in train.csv are:\n\nSalesID:: The unique identifier of the sale.\nMachineID:: The unique identifier of a machine. A machine can be sold multiple times.\nsaleprice:: What the machine sold for at auction (only provided in train.csv).\nsaledate:: The date of the sale.\n\nIn any sort of data science work, it’s important to look at your data directly to make sure you understand the format, how it’s stored, what types of values it holds, etc. Even if you’ve read a description of the data, the actual data may not be what you expect. We’ll start by reading the training set into a Pandas DataFrame. Generally it’s a good idea to specify low_memory=False unless Pandas actually runs out of memory and returns an error. The low_memory parameter, which is True by default, tells Pandas to only look at a few rows of data at a time to figure out what type of data is in each column. This means that Pandas can actually end up using different data type for different rows, which generally leads to data processing errors or model training problems later.\nLet’s load our data and have a look at the columns:\n\n\nShow code\ndf = pd.read_csv(path/'TrainAndValid.csv', low_memory=False)\n\n\n\n\nShow code\ndf.columns\n\n\nIndex(['SalesID', 'SalePrice', 'MachineID', 'ModelID', 'datasource',\n       'auctioneerID', 'YearMade', 'MachineHoursCurrentMeter', 'UsageBand',\n       'saledate', 'fiModelDesc', 'fiBaseModel', 'fiSecondaryDesc',\n       'fiModelSeries', 'fiModelDescriptor', 'ProductSize',\n       'fiProductClassDesc', 'state', 'ProductGroup', 'ProductGroupDesc',\n       'Drive_System', 'Enclosure', 'Forks', 'Pad_Type', 'Ride_Control',\n       'Stick', 'Transmission', 'Turbocharged', 'Blade_Extension',\n       'Blade_Width', 'Enclosure_Type', 'Engine_Horsepower', 'Hydraulics',\n       'Pushblock', 'Ripper', 'Scarifier', 'Tip_Control', 'Tire_Size',\n       'Coupler', 'Coupler_System', 'Grouser_Tracks', 'Hydraulics_Flow',\n       'Track_Type', 'Undercarriage_Pad_Width', 'Stick_Length', 'Thumb',\n       'Pattern_Changer', 'Grouser_Type', 'Backhoe_Mounting', 'Blade_Type',\n       'Travel_Controls', 'Differential_Type', 'Steering_Controls'],\n      dtype='object')\n\n\nThat’s a lot of columns for us to look at! Try looking through the dataset to get a sense of what kind of information is in each one. We’ll shortly see how to “zero in” on the most interesting bits.\nAt this point, a good next step is to handle ordinal columns. This refers to columns containing strings or similar, but where those strings have a natural ordering. For instance, here are the levels of ProductSize:\n\n\nShow code\ndf['ProductSize'].unique()\n\n\narray([nan, 'Medium', 'Small', 'Large / Medium', 'Mini', 'Large', 'Compact'], dtype=object)\n\n\nWe can tell Pandas about a suitable ordering of these levels like so:\n\n\nShow code\nsizes = 'Large','Large / Medium','Medium','Small','Mini','Compact'\n\n\n\n\nShow code\ndf['ProductSize'] = df['ProductSize'].astype('category')\ndf['ProductSize'].cat.set_categories(sizes, ordered=True, inplace=True)\n\n\nThe most important data column is the dependent variable—that is, the one we want to predict. Recall that a model’s metric is a function that reflects how good the predictions are. It’s important to note what metric is being used for a project. Generally, selecting the metric is an important part of the project setup. In many cases, choosing a good metric will require more than just selecting a variable that already exists. It is more like a design process. You should think carefully about which metric, or set of metrics, actually measures the notion of model quality that matters to you. If no variable represents that metric, you should see if you can build the metric from the variables that are available.\nHowever, in this case Kaggle tells us what metric to use: root mean squared log error (RMSLE) between the actual and predicted auction prices. We need do only a small amount of processing to use this: we take the log of the prices, so that rmse of that value will give us what we ultimately need:\n\n\nShow code\ndep_var = 'SalePrice'\n\n\n\n\nShow code\ndf[dep_var] = np.log(df[dep_var])\n\n\nWe are now ready to explore our first machine learning algorithm for tabular data: decision trees."
  },
  {
    "objectID": "posts/09_tabular.html#decision-trees",
    "href": "posts/09_tabular.html#decision-trees",
    "title": "Tabular Modeling Deep Dive",
    "section": "Decision Trees",
    "text": "Decision Trees\nDecision tree ensembles, as the name suggests, rely on decision trees. So let’s start there! A decision tree asks a series of binary (that is, yes or no) questions about the data. After each question the data at that part of the tree is split between a “yes” and a “no” branch, as shown in &lt;&gt;. After one or more questions, either a prediction can be made on the basis of all previous answers or another question is required.\n\nThis sequence of questions is now a procedure for taking any data item, whether an item from the training set or a new one, and assigning that item to a group. Namely, after asking and answering the questions, we can say the item belongs to the same group as all the other training data items that yielded the same set of answers to the questions. But what good is this? The goal of our model is to predict values for items, not to assign them into groups from the training dataset. The value is that we can now assign a prediction value for each of these groups—for regression, we take the target mean of the items in the group.\nLet’s consider how we find the right questions to ask. Of course, we wouldn’t want to have to create all these questions ourselves—that’s what computers are for! The basic steps to train a decision tree can be written down very easily:\n\nLoop through each column of the dataset in turn.\nFor each column, loop through each possible level of that column in turn.\nTry splitting the data into two groups, based on whether they are greater than or less than that value (or if it is a categorical variable, based on whether they are equal to or not equal to that level of that categorical variable).\nFind the average sale price for each of those two groups, and see how close that is to the actual sale price of each of the items of equipment in that group. That is, treat this as a very simple “model” where our predictions are simply the average sale price of the item’s group.\nAfter looping through all of the columns and all the possible levels for each, pick the split point that gave the best predictions using that simple model.\nWe now have two different groups for our data, based on this selected split. Treat each of these as separate datasets, and find the best split for each by going back to step 1 for each group.\nContinue this process recursively, until you have reached some stopping criterion for each group—for instance, stop splitting a group further when it has only 20 items in it.\n\nAlthough this is an easy enough algorithm to implement yourself (and it is a good exercise to do so), we can save some time by using the implementation built into sklearn.\nFirst, however, we need to do a little data preparation.\n\nA: Here’s a productive question to ponder. If you consider that the procedure for defining a decision tree essentially chooses one sequence of splitting questions about variables, you might ask yourself, how do we know this procedure chooses the correct sequence? The rule is to choose the splitting question that produces the best split (i.e., that most accurately separates the items into two distinct categories), and then to apply the same rule to the groups that split produces, and so on. This is known in computer science as a “greedy” approach. Can you imagine a scenario in which asking a “less powerful” splitting question would enable a better split down the road (or should I say down the trunk!) and lead to a better result overall?\n\n\nHandling Dates\nThe first piece of data preparation we need to do is to enrich our representation of dates. The fundamental basis of the decision tree that we just described is bisection— dividing a group into two. We look at the ordinal variables and divide up the dataset based on whether the variable’s value is greater (or lower) than a threshold, and we look at the categorical variables and divide up the dataset based on whether the variable’s level is a particular level. So this algorithm has a way of dividing up the dataset based on both ordinal and categorical data.\nBut how does this apply to a common data type, the date? You might want to treat a date as an ordinal value, because it is meaningful to say that one date is greater than another. However, dates are a bit different from most ordinal values in that some dates are qualitatively different from others in a way that that is often relevant to the systems we are modeling.\nIn order to help our algorithm handle dates intelligently, we’d like our model to know more than whether a date is more recent or less recent than another. We might want our model to make decisions based on that date’s day of the week, on whether a day is a holiday, on what month it is in, and so forth. To do this, we replace every date column with a set of date metadata columns, such as holiday, day of week, and month. These columns provide categorical data that we suspect will be useful.\nfastai comes with a function that will do this for us—we just have to pass a column name that contains dates:\n\n\nShow code\ndf = add_datepart(df, 'saledate')\n\n\nLet’s do the same for the test set while we’re there:\n\n\nShow code\ndf_test = pd.read_csv(path/'Test.csv', low_memory=False)\ndf_test = add_datepart(df_test, 'saledate')\n\n\nWe can see that there are now lots of new columns in our DataFrame:\n\n\nShow code\n' '.join(o for o in df.columns if o.startswith('sale'))\n\n\n'saleWeek saleYear saleMonth saleDay saleDayofweek saleDayofyear saleIs_month_end saleIs_month_start saleIs_quarter_end saleIs_quarter_start saleIs_year_end saleIs_year_start saleElapsed'\n\n\nThis is a good first step, but we will need to do a bit more cleaning. For this, we will use fastai objects called TabularPandas and TabularProc.\n\n\nUsing TabularPandas and TabularProc\nA second piece of preparatory processing is to be sure we can handle strings and missing data. Out of the box, sklearn cannot do either. Instead we will use fastai’s class TabularPandas, which wraps a Pandas DataFrame and provides a few conveniences. To populate a TabularPandas, we will use two TabularProcs, Categorify and FillMissing. A TabularProc is like a regular Transform, except that:\n\nIt returns the exact same object that’s passed to it, after modifying the object in place.\nIt runs the transform once, when data is first passed in, rather than lazily as the data is accessed.\n\nCategorify is a TabularProc that replaces a column with a numeric categorical column. FillMissing is a TabularProc that replaces missing values with the median of the column, and creates a new Boolean column that is set to True for any row where the value was missing. These two transforms are needed for nearly every tabular dataset you will use, so this is a good starting point for your data processing:\n\n\nShow code\nprocs = [Categorify, FillMissing]\n\n\nTabularPandas will also handle splitting the dataset into training and validation sets for us. However we need to be very careful about our validation set. We want to design it so that it is like the test set Kaggle will use to judge the contest.\nRecall the distinction between a validation set and a test set, as discussed in &lt;&gt;. A validation set is data we hold back from training in order to ensure that the training process does not overfit on the training data. A test set is data that is held back even more deeply, from us ourselves, in order to ensure that we don’t overfit on the validation data, as we explore various model architectures and hyperparameters.\nWe don’t get to see the test set. But we do want to define our validation data so that it has the same sort of relationship to the training data as the test set will have.\nIn some cases, just randomly choosing a subset of your data points will do that. This is not one of those cases, because it is a time series.\nIf you look at the date range represented in the test set, you will discover that it covers a six-month period from May 2012, which is later in time than any date in the training set. This is a good design, because the competition sponsor will want to ensure that a model is able to predict the future. But it means that if we are going to have a useful validation set, we also want the validation set to be later in time than the training set. The Kaggle training data ends in April 2012, so we will define a narrower training dataset which consists only of the Kaggle training data from before November 2011, and we’ll define a validation set consisting of data from after November 2011.\nTo do this we use np.where, a useful function that returns (as the first element of a tuple) the indices of all True values:\n\n\nShow code\ncond = (df.saleYear&lt;2011) | (df.saleMonth&lt;10)\ntrain_idx = np.where( cond)[0]\nvalid_idx = np.where(~cond)[0]\n\nsplits = (list(train_idx),list(valid_idx))\n\n\nTabularPandas needs to be told which columns are continuous and which are categorical. We can handle that automatically using the helper function cont_cat_split:\n\n\nShow code\ncont,cat = cont_cat_split(df, 1, dep_var=dep_var)\n\n\n\n\nShow code\nto = TabularPandas(df, procs, cat, cont, y_names=dep_var, splits=splits)\n\n\nA TabularPandas behaves a lot like a fastai Datasets object, including providing train and valid attributes:\n\n\nShow code\nlen(to.train),len(to.valid)\n\n\n(404710, 7988)\n\n\nWe can see that the data is still displayed as strings for categories (we only show a few columns here because the full table is too big to fit on a page):\n\n\nShow code\n#hide_output\nto.show(3)\n\n\n\n\n\n\nsaleWeek\nUsageBand\nfiModelDesc\nfiBaseModel\nfiSecondaryDesc\nfiModelSeries\nfiModelDescriptor\nProductSize\nfiProductClassDesc\nstate\nProductGroup\nProductGroupDesc\nDrive_System\nEnclosure\nForks\nPad_Type\nRide_Control\nStick\nTransmission\nTurbocharged\nBlade_Extension\nBlade_Width\nEnclosure_Type\nEngine_Horsepower\nHydraulics\nPushblock\nRipper\nScarifier\nTip_Control\nTire_Size\nCoupler\nCoupler_System\nGrouser_Tracks\nHydraulics_Flow\nTrack_Type\nUndercarriage_Pad_Width\nStick_Length\nThumb\nPattern_Changer\nGrouser_Type\nBackhoe_Mounting\nBlade_Type\nTravel_Controls\nDifferential_Type\nSteering_Controls\nsaleIs_month_end\nsaleIs_month_start\nsaleIs_quarter_end\nsaleIs_quarter_start\nsaleIs_year_end\nsaleIs_year_start\nsaleElapsed\nauctioneerID_na\nMachineHoursCurrentMeter_na\nSalesID\nMachineID\nModelID\ndatasource\nauctioneerID\nYearMade\nMachineHoursCurrentMeter\nsaleYear\nsaleMonth\nsaleDay\nsaleDayofweek\nsaleDayofyear\nSalePrice\n\n\n\n\n0\n46\nLow\n521D\n521\nD\n#na#\n#na#\n#na#\nWheel Loader - 110.0 to 120.0 Horsepower\nAlabama\nWL\nWheel Loader\n#na#\nEROPS w AC\nNone or Unspecified\n#na#\nNone or Unspecified\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n2 Valve\n#na#\n#na#\n#na#\n#na#\nNone or Unspecified\nNone or Unspecified\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\nStandard\nConventional\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n1163635200\nFalse\nFalse\n1139246\n999089\n3157\n121\n3.0\n2004\n68.0\n2006\n11\n16\n3\n320\n11.097410\n\n\n1\n13\nLow\n950FII\n950\nF\nII\n#na#\nMedium\nWheel Loader - 150.0 to 175.0 Horsepower\nNorth Carolina\nWL\nWheel Loader\n#na#\nEROPS w AC\nNone or Unspecified\n#na#\nNone or Unspecified\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n2 Valve\n#na#\n#na#\n#na#\n#na#\n23.5\nNone or Unspecified\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\nStandard\nConventional\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n1080259200\nFalse\nFalse\n1139248\n117657\n77\n121\n3.0\n1996\n4640.0\n2004\n3\n26\n4\n86\n10.950807\n\n\n2\n9\nHigh\n226\n226\n#na#\n#na#\n#na#\n#na#\nSkid Steer Loader - 1351.0 to 1601.0 Lb Operating Capacity\nNew York\nSSL\nSkid Steer Loaders\n#na#\nOROPS\nNone or Unspecified\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\nAuxiliary\n#na#\n#na#\n#na#\n#na#\n#na#\nNone or Unspecified\nNone or Unspecified\nNone or Unspecified\nStandard\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\n#na#\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n1077753600\nFalse\nFalse\n1139249\n434808\n7009\n121\n3.0\n2001\n2838.0\n2004\n2\n26\n3\n57\n9.210340\n\n\n\n\n\n\n\nShow code\n#hide_input\nto1 = TabularPandas(df, procs, ['state', 'ProductGroup', 'Drive_System', 'Enclosure'], [], y_names=dep_var, splits=splits)\nto1.show(3)\n\n\n\n\n\n\nstate\nProductGroup\nDrive_System\nEnclosure\nSalePrice\n\n\n\n\n0\nAlabama\nWL\n#na#\nEROPS w AC\n11.097410\n\n\n1\nNorth Carolina\nWL\n#na#\nEROPS w AC\n10.950807\n\n\n2\nNew York\nSSL\n#na#\nOROPS\n9.210340\n\n\n\n\n\nHowever, the underlying items are all numeric:\n\n\nShow code\n#hide_output\nto.items.head(3)\n\n\n\n\n\n\n\n\n\nSalesID\nSalePrice\nMachineID\nsaleWeek\n...\nsaleIs_year_start\nsaleElapsed\nauctioneerID_na\nMachineHoursCurrentMeter_na\n\n\n\n\n0\n1139246\n11.097410\n999089\n46\n...\n1\n2647\n1\n1\n\n\n1\n1139248\n10.950807\n117657\n13\n...\n1\n2148\n1\n1\n\n\n2\n1139249\n9.210340\n434808\n9\n...\n1\n2131\n1\n1\n\n\n\n\n3 rows × 67 columns\n\n\n\n\n\nShow code\n#hide_input\nto1.items[['state', 'ProductGroup', 'Drive_System', 'Enclosure']].head(3)\n\n\n\n\n\n\n\n\n\nstate\nProductGroup\nDrive_System\nEnclosure\n\n\n\n\n0\n1\n6\n0\n3\n\n\n1\n33\n6\n0\n3\n\n\n2\n32\n3\n0\n6\n\n\n\n\n\n\n\nThe conversion of categorical columns to numbers is done by simply replacing each unique level with a number. The numbers associated with the levels are chosen consecutively as they are seen in a column, so there’s no particular meaning to the numbers in categorical columns after conversion. The exception is if you first convert a column to a Pandas ordered category (as we did for ProductSize earlier), in which case the ordering you chose is used. We can see the mapping by looking at the classes attribute:\n\n\nShow code\nto.classes['ProductSize']\n\n\n['#na#', 'Large', 'Large / Medium', 'Medium', 'Small', 'Mini', 'Compact']\n\n\nSince it takes a minute or so to process the data to get to this point, we should save it—that way in the future we can continue our work from here without rerunning the previous steps. fastai provides a save method that uses Python’s pickle system to save nearly any Python object:\n\n\nShow code\nsave_pickle(path/'to.pkl',to)\n\n\nTo read this back later, you would type:\nto = (path/'to.pkl').load()\nNow that all this preprocessing is done, we are ready to create a decision tree.\n\n\nCreating the Decision Tree\nTo begin, we define our independent and dependent variables:\n\n\nShow code\n#hide\nto = load_pickle(path/'to.pkl')\n\n\n\n\nShow code\nxs,y = to.train.xs,to.train.y\nvalid_xs,valid_y = to.valid.xs,to.valid.y\n\n\nNow that our data is all numeric, and there are no missing values, we can create a decision tree:\n\n\nShow code\nm = DecisionTreeRegressor(max_leaf_nodes=4)\nm.fit(xs, y);\n\n\nTo keep it simple, we’ve told sklearn to just create four leaf nodes. To see what it’s learned, we can display the tree:\n\n\nShow code\ndraw_tree(m, xs, size=10, leaves_parallel=True, precision=2)\n\n\n\n\n\n\n\n\n\nUnderstanding this picture is one of the best ways to understand decision trees, so we will start at the top and explain each part step by step.\nThe top node represents the initial model before any splits have been done, when all the data is in one group. This is the simplest possible model. It is the result of asking zero questions and will always predict the value to be the average value of the whole dataset. In this case, we can see it predicts a value of 10.10 for the logarithm of the sales price. It gives a mean squared error of 0.48. The square root of this is 0.69. (Remember that unless you see m_rmse, or a root mean squared error, then the value you are looking at is before taking the square root, so it is just the average of the square of the differences.) We can also see that there are 404,710 auction records in this group—that is the total size of our training set. The final piece of information shown here is the decision criterion for the best split that was found, which is to split based on the coupler_system column.\nMoving down and to the left, this node shows us that there were 360,847 auction records for equipment where coupler_system was less than 0.5. The average value of our dependent variable in this group is 10.21. Moving down and to the right from the initial model takes us to the records where coupler_system was greater than 0.5.\nThe bottom row contains our leaf nodes: the nodes with no answers coming out of them, because there are no more questions to be answered. At the far right of this row is the node containing records where coupler_system was greater than 0.5. The average value here is 9.21, so we can see the decision tree algorithm did find a single binary decision that separated high-value from low-value auction results. Asking only about coupler_system predicts an average value of 9.21 versus 10.1.\nReturning back to the top node after the first decision point, we can see that a second binary decision split has been made, based on asking whether YearMade is less than or equal to 1991.5. For the group where this is true (remember, this is now following two binary decisions, based on coupler_system and YearMade) the average value is 9.97, and there are 155,724 auction records in this group. For the group of auctions where this decision is false, the average value is 10.4, and there are 205,123 records. So again, we can see that the decision tree algorithm has successfully split our more expensive auction records into two more groups which differ in value significantly.\nWe can show the same information using Terence Parr’s powerful dtreeviz library:\n\n\nShow code\nsamp_idx = np.random.permutation(len(y))[:500]\ndtreeviz(m, xs.iloc[samp_idx], y.iloc[samp_idx], xs.columns, dep_var,\n        fontname='DejaVu Sans', scale=1.6, label_fontsize=10,\n        orientation='LR')\n\n\n\n\n\n\n\n\n\nThis shows a chart of the distribution of the data for each split point. We can clearly see that there’s a problem with our YearMade data: there are bulldozers made in the year 1000, apparently! Presumably this is actually just a missing value code (a value that doesn’t otherwise appear in the data and that is used as a placeholder in cases where a value is missing). For modeling purposes, 1000 is fine, but as you can see this outlier makes visualization of the values we are interested in more difficult. So, let’s replace it with 1950:\n\n\nShow code\nxs.loc[xs['YearMade']&lt;1900, 'YearMade'] = 1950\nvalid_xs.loc[valid_xs['YearMade']&lt;1900, 'YearMade'] = 1950\n\n\nThat change makes the split much clearer in the tree visualization, even although it doesn’t actually change the result of the model in any significant way. This is a great example of how resilient decision trees are to data issues!\n\n\nShow code\nm = DecisionTreeRegressor(max_leaf_nodes=4).fit(xs, y)\n\ndtreeviz(m, xs.iloc[samp_idx], y.iloc[samp_idx], xs.columns, dep_var,\n        fontname='DejaVu Sans', scale=1.6, label_fontsize=10,\n        orientation='LR')\n\n\n\n\n\n\n\n\n\nLet’s now have the decision tree algorithm build a bigger tree. Here, we are not passing in any stopping criteria such as max_leaf_nodes:\n\n\nShow code\nm = DecisionTreeRegressor()\nm.fit(xs, y);\n\n\nWe’ll create a little function to check the root mean squared error of our model (m_rmse), since that’s how the competition was judged:\n\n\nShow code\ndef r_mse(pred,y): return round(math.sqrt(((pred-y)**2).mean()), 6)\ndef m_rmse(m, xs, y): return r_mse(m.predict(xs), y)\n\n\n\n\nShow code\nm_rmse(m, xs, y)\n\n\n0.0\n\n\nSo, our model is perfect, right? Not so fast… remember we really need to check the validation set, to ensure we’re not overfitting:\n\n\nShow code\nm_rmse(m, valid_xs, valid_y)\n\n\n0.331466\n\n\nOops—it looks like we might be overfitting pretty badly. Here’s why:\n\n\nShow code\nm.get_n_leaves(), len(xs)\n\n\n(324544, 404710)\n\n\nWe’ve got nearly as many leaf nodes as data points! That seems a little over-enthusiastic. Indeed, sklearn’s default settings allow it to continue splitting nodes until there is only one item in each leaf node. Let’s change the stopping rule to tell sklearn to ensure every leaf node contains at least 25 auction records:\n\n\nShow code\nm = DecisionTreeRegressor(min_samples_leaf=25)\nm.fit(to.train.xs, to.train.y)\nm_rmse(m, xs, y), m_rmse(m, valid_xs, valid_y)\n\n\n(0.248562, 0.323396)\n\n\nThat looks much better. Let’s check the number of leaves again:\n\n\nShow code\nm.get_n_leaves()\n\n\n12397\n\n\nMuch more reasonable!\n\nA: Here’s my intuition for an overfitting decision tree with more leaf nodes than data items. Consider the game Twenty Questions. In that game, the chooser secretly imagines an object (like, “our television set”), and the guesser gets to pose 20 yes or no questions to try to guess what the object is (like “Is it bigger than a breadbox?”). The guesser is not trying to predict a numerical value, but just to identify a particular object out of the set of all imaginable objects. When your decision tree has more leaves than there are possible objects in your domain, then it is essentially a well-trained guesser. It has learned the sequence of questions needed to identify a particular data item in the training set, and it is “predicting” only by describing that item’s value. This is a way of memorizing the training set—i.e., of overfitting.\n\nBuilding a decision tree is a good way to create a model of our data. It is very flexible, since it can clearly handle nonlinear relationships and interactions between variables. But we can see there is a fundamental compromise between how well it generalizes (which we can achieve by creating small trees) and how accurate it is on the training set (which we can achieve by using large trees).\nSo how do we get the best of both worlds? We’ll show you right after we handle an important missing detail: how to handle categorical variables.\n\n\nCategorical Variables\nIn the previous chapter, when working with deep learning networks, we dealt with categorical variables by one-hot encoding them and feeding them to an embedding layer. The embedding layer helped the model to discover the meaning of the different levels of these variables (the levels of a categorical variable do not have an intrinsic meaning, unless we manually specify an ordering using Pandas). In a decision tree, we don’t have embeddings layers—so how can these untreated categorical variables do anything useful in a decision tree? For instance, how could something like a product code be used?\nThe short answer is: it just works! Think about a situation where there is one product code that is far more expensive at auction than any other one. In that case, any binary split will result in that one product code being in some group, and that group will be more expensive than the other group. Therefore, our simple decision tree building algorithm will choose that split. Later during training the algorithm will be able to further split the subgroup that contains the expensive product code, and over time, the tree will home in on that one expensive product.\nIt is also possible to use one-hot encoding to replace a single categorical variable with multiple one-hot-encoded columns, where each column represents a possible level of the variable. Pandas has a get_dummies method which does just that.\nHowever, there is not really any evidence that such an approach improves the end result. So, we generally avoid it where possible, because it does end up making your dataset harder to work with. In 2019 this issue was explored in the paper “Splitting on Categorical Predictors in Random Forests” by Marvin Wright and Inke König, which said:\n\n: The standard approach for nominal predictors is to consider all \\(2^{k-1} − 1\\) 2-partitions of the k predictor categories. However, this exponential relationship produces a large number of potential splits to be evaluated, increasing computational complexity and restricting the possible number of categories in most implementations. For binary classification and regression, it was shown that ordering the predictor categories in each split leads to exactly the same splits as the standard approach. This reduces computational complexity because only k − 1 splits have to be considered for a nominal predictor with k categories.\n\nNow that you understand how decisions tree work, it’s time for the best-of-both-worlds solution: random forests."
  },
  {
    "objectID": "posts/09_tabular.html#random-forests",
    "href": "posts/09_tabular.html#random-forests",
    "title": "Tabular Modeling Deep Dive",
    "section": "Random Forests",
    "text": "Random Forests\nIn 1994 Berkeley professor Leo Breiman, one year after his retirement, published a small technical report called “Bagging Predictors”, which turned out to be one of the most influential ideas in modern machine learning. The report began:\n\n: Bagging predictors is a method for generating multiple versions of a predictor and using these to get an aggregated predictor. The aggregation averages over the versions… The multiple versions are formed by making bootstrap replicates of the learning set and using these as new learning sets. Tests… show that bagging can give substantial gains in accuracy. The vital element is the instability of the prediction method. If perturbing the learning set can cause significant changes in the predictor constructed, then bagging can improve accuracy.\n\nHere is the procedure that Breiman is proposing:\n\nRandomly choose a subset of the rows of your data (i.e., “bootstrap replicates of your learning set”).\nTrain a model using this subset.\nSave that model, and then return to step 1 a few times.\nThis will give you a number of trained models. To make a prediction, predict using all of the models, and then take the average of each of those model’s predictions.\n\nThis procedure is known as “bagging.” It is based on a deep and important insight: although each of the models trained on a subset of data will make more errors than a model trained on the full dataset, those errors will not be correlated with each other. Different models will make different errors. The average of those errors, therefore, is: zero! So if we take the average of all of the models’ predictions, then we should end up with a prediction that gets closer and closer to the correct answer, the more models we have. This is an extraordinary result—it means that we can improve the accuracy of nearly any kind of machine learning algorithm by training it multiple times, each time on a different random subset of the data, and averaging its predictions.\nIn 2001 Leo Breiman went on to demonstrate that this approach to building models, when applied to decision tree building algorithms, was particularly powerful. He went even further than just randomly choosing rows for each model’s training, but also randomly selected from a subset of columns when choosing each split in each decision tree. He called this method the random forest. Today it is, perhaps, the most widely used and practically important machine learning method.\nIn essence a random forest is a model that averages the predictions of a large number of decision trees, which are generated by randomly varying various parameters that specify what data is used to train the tree and other tree parameters. Bagging is a particular approach to “ensembling,” or combining the results of multiple models together. To see how it works in practice, let’s get started on creating our own random forest!\n\n\nShow code\n#hide\n# pip install —pre -f https://sklearn-nightly.scdn8.secure.raxcdn.com scikit-learn —U\n\n\n\nCreating a Random Forest\nWe can create a random forest just like we created a decision tree, except now, we are also specifying parameters that indicate how many trees should be in the forest, how we should subset the data items (the rows), and how we should subset the fields (the columns).\nIn the following function definition n_estimators defines the number of trees we want, max_samples defines how many rows to sample for training each tree, and max_features defines how many columns to sample at each split point (where 0.5 means “take half the total number of columns”). We can also specify when to stop splitting the tree nodes, effectively limiting the depth of the tree, by including the same min_samples_leaf parameter we used in the last section. Finally, we pass n_jobs=-1 to tell sklearn to use all our CPUs to build the trees in parallel. By creating a little function for this, we can more quickly try different variations in the rest of this chapter:\n\n\nShow code\ndef rf(xs, y, n_estimators=40, max_samples=200_000,\n       max_features=0.5, min_samples_leaf=5, **kwargs):\n    return RandomForestRegressor(n_jobs=-1, n_estimators=n_estimators,\n        max_samples=max_samples, max_features=max_features,\n        min_samples_leaf=min_samples_leaf, oob_score=True).fit(xs, y)\n\n\n\n\nShow code\nm = rf(xs, y);\n\n\nOur validation RMSE is now much improved over our last result produced by the DecisionTreeRegressor, which made just one tree using all the available data:\n\n\nShow code\nm_rmse(m, xs, y), m_rmse(m, valid_xs, valid_y)\n\n\n(0.170917, 0.233975)\n\n\nOne of the most important properties of random forests is that they aren’t very sensitive to the hyperparameter choices, such as max_features. You can set n_estimators to as high a number as you have time to train—the more trees you have, the more accurate the model will be. max_samples can often be left at its default, unless you have over 200,000 data points, in which case setting it to 200,000 will make it train faster with little impact on accuracy. max_features=0.5 and min_samples_leaf=4 both tend to work well, although sklearn’s defaults work well too.\nThe sklearn docs show an example of the effects of different max_features choices, with increasing numbers of trees. In the plot, the blue plot line uses the fewest features and the green line uses the most (it uses all the features). As you can see in &lt;&gt;, the models with the lowest error result from using a subset of features but with a larger number of trees.\n\nTo see the impact of n_estimators, let’s get the predictions from each individual tree in our forest (these are in the estimators_ attribute):\n\n\nShow code\npreds = np.stack([t.predict(valid_xs) for t in m.estimators_])\n\n\nAs you can see, preds.mean(0) gives the same results as our random forest:\n\n\nShow code\nr_mse(preds.mean(0), valid_y)\n\n\n0.233975\n\n\nLet’s see what happens to the RMSE as we add more and more trees. As you can see, the improvement levels off quite a bit after around 30 trees:\n\n\nShow code\nplt.plot([r_mse(preds[:i+1].mean(0), valid_y) for i in range(40)]);\n\n\n\n\n\n\n\n\n\nThe performance on our validation set is worse than on our training set. But is that because we’re overfitting, or because the validation set covers a different time period, or a bit of both? With the existing information we’ve seen, we can’t tell. However, random forests have a very clever trick called out-of-bag (OOB) error that can help us with this (and more!).\n\n\nOut-of-Bag Error\nRecall that in a random forest, each tree is trained on a different subset of the training data. The OOB error is a way of measuring prediction error on the training set by only including in the calculation of a row’s error trees where that row was not included in training. This allows us to see whether the model is overfitting, without needing a separate validation set.\n\nA: My intuition for this is that, since every tree was trained with a different randomly selected subset of rows, out-of-bag error is a little like imagining that every tree therefore also has its own validation set. That validation set is simply the rows that were not selected for that tree’s training.\n\nThis is particularly beneficial in cases where we have only a small amount of training data, as it allows us to see whether our model generalizes without removing items to create a validation set. The OOB predictions are available in the oob_prediction_ attribute. Note that we compare them to the training labels, since this is being calculated on trees using the training set.\n\n\nShow code\nr_mse(m.oob_prediction_, y)\n\n\n0.210681\n\n\nWe can see that our OOB error is much lower than our validation set error. This means that something else is causing that error, in addition to normal generalization error. We’ll discuss the reasons for this later in this chapter.\nThis is one way to interpret our model’s predictions—let’s focus on more of those now."
  },
  {
    "objectID": "posts/09_tabular.html#model-interpretation",
    "href": "posts/09_tabular.html#model-interpretation",
    "title": "Tabular Modeling Deep Dive",
    "section": "Model Interpretation",
    "text": "Model Interpretation\nFor tabular data, model interpretation is particularly important. For a given model, the things we are most likely to be interested in are:\n\nHow confident are we in our predictions using a particular row of data?\nFor predicting with a particular row of data, what were the most important factors, and how did they influence that prediction?\nWhich columns are the strongest predictors, which can we ignore?\nWhich columns are effectively redundant with each other, for purposes of prediction?\nHow do predictions vary, as we vary these columns?\n\nAs we will see, random forests are particularly well suited to answering these questions. Let’s start with the first one!\n\nTree Variance for Prediction Confidence\nWe saw how the model averages the individual tree’s predictions to get an overall prediction—that is, an estimate of the value. But how can we know the confidence of the estimate? One simple way is to use the standard deviation of predictions across the trees, instead of just the mean. This tells us the relative confidence of predictions. In general, we would want to be more cautious of using the results for rows where trees give very different results (higher standard deviations), compared to cases where they are more consistent (lower standard deviations).\nIn the earlier section on creating a random forest, we saw how to get predictions over the validation set, using a Python list comprehension to do this for each tree in the forest:\n\n\nShow code\npreds = np.stack([t.predict(valid_xs) for t in m.estimators_])\n\n\n\n\nShow code\npreds.shape\n\n\n(40, 7988)\n\n\nNow we have a prediction for every tree and every auction (40 trees and 7,988 auctions) in the validation set.\nUsing this we can get the standard deviation of the predictions over all the trees, for each auction:\n\n\nShow code\npreds_std = preds.std(0)\n\n\nHere are the standard deviations for the predictions for the first five auctions—that is, the first five rows of the validation set:\n\n\nShow code\npreds_std[:5]\n\n\narray([0.25065395, 0.11043862, 0.08242067, 0.26988508, 0.15730173])\n\n\nAs you can see, the confidence in the predictions varies widely. For some auctions, there is a low standard deviation because the trees agree. For others it’s higher, as the trees don’t agree. This is information that would be useful in a production setting; for instance, if you were using this model to decide what items to bid on at auction, a low-confidence prediction might cause you to look more carefully at an item before you made a bid.\n\n\nFeature Importance\nIt’s not normally enough just to know that a model can make accurate predictions—we also want to know how it’s making predictions. feature importance gives us insight into this. We can get these directly from sklearn’s random forest by looking in the feature_importances_ attribute. Here’s a simple function we can use to pop them into a DataFrame and sort them:\n\n\nShow code\ndef rf_feat_importance(m, df):\n    return pd.DataFrame({'cols':df.columns, 'imp':m.feature_importances_}\n                       ).sort_values('imp', ascending=False)\n\n\nThe feature importances for our model show that the first few most important columns have much higher importance scores than the rest, with (not surprisingly) YearMade and ProductSize being at the top of the list:\n\n\nShow code\nfi = rf_feat_importance(m, xs)\nfi[:10]\n\n\n\n\n\n\n\n\n\ncols\nimp\n\n\n\n\n59\nYearMade\n0.180070\n\n\n7\nProductSize\n0.113915\n\n\n31\nCoupler_System\n0.104699\n\n\n8\nfiProductClassDesc\n0.064118\n\n\n33\nHydraulics_Flow\n0.059110\n\n\n56\nModelID\n0.059087\n\n\n51\nsaleElapsed\n0.051231\n\n\n4\nfiSecondaryDesc\n0.041778\n\n\n32\nGrouser_Tracks\n0.037560\n\n\n2\nfiModelDesc\n0.030933\n\n\n\n\n\n\n\nA plot of the feature importances shows the relative importances more clearly:\n\n\nShow code\ndef plot_fi(fi):\n    return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)\n\nplot_fi(fi[:30]);\n\n\n\n\n\n\n\n\n\nThe way these importances are calculated is quite simple yet elegant. The feature importance algorithm loops through each tree, and then recursively explores each branch. At each branch, it looks to see what feature was used for that split, and how much the model improves as a result of that split. The improvement (weighted by the number of rows in that group) is added to the importance score for that feature. This is summed across all branches of all trees, and finally the scores are normalized such that they add to 1.\n\n\nRemoving Low-Importance Variables\nIt seems likely that we could use just a subset of the columns by removing the variables of low importance and still get good results. Let’s try just keeping those with a feature importance greater than 0.005:\n\n\nShow code\nto_keep = fi[fi.imp&gt;0.005].cols\nlen(to_keep)\n\n\n21\n\n\nWe can retrain our model using just this subset of the columns:\n\n\nShow code\nxs_imp = xs[to_keep]\nvalid_xs_imp = valid_xs[to_keep]\n\n\n\n\nShow code\nm = rf(xs_imp, y)\n\n\nAnd here’s the result:\n\n\nShow code\nm_rmse(m, xs_imp, y), m_rmse(m, valid_xs_imp, valid_y)\n\n\n(0.181204, 0.230329)\n\n\nOur accuracy is about the same, but we have far fewer columns to study:\n\n\nShow code\nlen(xs.columns), len(xs_imp.columns)\n\n\n(66, 21)\n\n\nWe’ve found that generally the first step to improving a model is simplifying it—78 columns was too many for us to study them all in depth! Furthermore, in practice often a simpler, more interpretable model is easier to roll out and maintain.\nThis also makes our feature importance plot easier to interpret. Let’s look at it again:\n\n\nShow code\nplot_fi(rf_feat_importance(m, xs_imp));\n\n\n\n\n\n\n\n\n\nOne thing that makes this harder to interpret is that there seem to be some variables with very similar meanings: for example, ProductGroup and ProductGroupDesc. Let’s try to remove any redundent features.\n\n\nRemoving Redundant Features\nLet’s start with:\n\n\nShow code\ncluster_columns(xs_imp)\n\n\n\n\n\n\n\n\n\nIn this chart, the pairs of columns that are most similar are the ones that were merged together early, far from the “root” of the tree at the left. Unsurprisingly, the fields ProductGroup and ProductGroupDesc were merged quite early, as were saleYear and saleElapsed and fiModelDesc and fiBaseModel. These might be so closely correlated they are practically synonyms for each other.\n\nnote: Determining Similarity: The most similar pairs are found by calculating the rank correlation, which means that all the values are replaced with their rank (i.e., first, second, third, etc. within the column), and then the correlation is calculated. (Feel free to skip over this minor detail though, since it’s not going to come up again in the book!)\n\nLet’s try removing some of these closely related features to see if the model can be simplified without impacting the accuracy. First, we create a function that quickly trains a random forest and returns the OOB score, by using a lower max_samples and higher min_samples_leaf. The OOB score is a number returned by sklearn that ranges between 1.0 for a perfect model and 0.0 for a random model. (In statistics it’s called R^2, although the details aren’t important for this explanation.) We don’t need it to be very accurate—we’re just going to use it to compare different models, based on removing some of the possibly redundant columns:\n\n\nShow code\ndef get_oob(df):\n    m = RandomForestRegressor(n_estimators=40, min_samples_leaf=15,\n        max_samples=50000, max_features=0.5, n_jobs=-1, oob_score=True)\n    m.fit(df, y)\n    return m.oob_score_\n\n\nHere’s our baseline:\n\n\nShow code\nget_oob(xs_imp)\n\n\n0.8768243241012634\n\n\nNow we try removing each of our potentially redundant variables, one at a time:\n\n\nShow code\n{c:get_oob(xs_imp.drop(c, axis=1)) for c in (\n    'saleYear', 'saleElapsed', 'ProductGroupDesc','ProductGroup',\n    'fiModelDesc', 'fiBaseModel',\n    'Hydraulics_Flow','Grouser_Tracks', 'Coupler_System')}\n\n\n{'saleYear': 0.8766429216799364,\n 'saleElapsed': 0.8725120463477113,\n 'ProductGroupDesc': 0.8773289113713139,\n 'ProductGroup': 0.8768277447901079,\n 'fiModelDesc': 0.8760365396140016,\n 'fiBaseModel': 0.8769194097714894,\n 'Hydraulics_Flow': 0.8775975083138958,\n 'Grouser_Tracks': 0.8780246481379101,\n 'Coupler_System': 0.8780158691125818}\n\n\nNow let’s try dropping multiple variables. We’ll drop one from each of the tightly aligned pairs we noticed earlier. Let’s see what that does:\n\n\nShow code\nto_drop = ['saleYear', 'ProductGroupDesc', 'fiBaseModel', 'Grouser_Tracks']\nget_oob(xs_imp.drop(to_drop, axis=1))\n\n\n0.8747772191306009\n\n\nLooking good! This is really not much worse than the model with all the fields. Let’s create DataFrames without these columns, and save them:\n\n\nShow code\nxs_final = xs_imp.drop(to_drop, axis=1)\nvalid_xs_final = valid_xs_imp.drop(to_drop, axis=1)\n\n\n\n\nShow code\nsave_pickle(path/'xs_final.pkl', xs_final)\nsave_pickle(path/'valid_xs_final.pkl', valid_xs_final)\n\n\nWe can load them back later with:\n\n\nShow code\nxs_final = load_pickle(path/'xs_final.pkl')\nvalid_xs_final = load_pickle(path/'valid_xs_final.pkl')\n\n\nNow we can check our RMSE again, to confirm that the accuracy hasn’t substantially changed.\n\n\nShow code\nm = rf(xs_final, y)\nm_rmse(m, xs_final, y), m_rmse(m, valid_xs_final, valid_y)\n\n\n(0.183426, 0.231894)\n\n\nBy focusing on the most important variables, and removing some redundant ones, we’ve greatly simplified our model. Now, let’s see how those variables affect our predictions using partial dependence plots.\n\n\nPartial Dependence\nAs we’ve seen, the two most important predictors are ProductSize and YearMade. We’d like to understand the relationship between these predictors and sale price. It’s a good idea to first check the count of values per category (provided by the Pandas value_counts method), to see how common each category is:\n\n\nShow code\np = valid_xs_final['ProductSize'].value_counts(sort=False).plot.barh()\nc = to.classes['ProductSize']\nplt.yticks(range(len(c)), c);\n\n\n\n\n\n\n\n\n\nThe largrest group is #na#, which is the label fastai applies to missing values.\nLet’s do the same thing for YearMade. Since this is a numeric feature, we’ll need to draw a histogram, which groups the year values into a few discrete bins:\n\n\nShow code\nax = valid_xs_final['YearMade'].hist()\n\n\n\n\n\n\n\n\n\nOther than the special value 1950 which we used for coding missing year values, most of the data is from after 1990.\nNow we’re ready to look at partial dependence plots. Partial dependence plots try to answer the question: if a row varied on nothing other than the feature in question, how would it impact the dependent variable?\nFor instance, how does YearMade impact sale price, all other things being equal?\nTo answer this question, we can’t just take the average sale price for each YearMade. The problem with that approach is that many other things vary from year to year as well, such as which products are sold, how many products have air-conditioning, inflation, and so forth. So, merely averaging over all the auctions that have the same YearMade would also capture the effect of how every other field also changed along with YearMade and how that overall change affected price.\nInstead, what we do is replace every single value in the YearMade column with 1950, and then calculate the predicted sale price for every auction, and take the average over all auctions. Then we do the same for 1951, 1952, and so forth until our final year of 2011. This isolates the effect of only YearMade (even if it does so by averaging over some imagined records where we assign a YearMade value that might never actually exist alongside some other values).\n\nA: If you are philosophically minded it is somewhat dizzying to contemplate the different kinds of hypotheticality that we are juggling to make this calculation. First, there’s the fact that every prediction is hypothetical, because we are not noting empirical data. Second, there’s the point that we’re not merely interested in asking how sale price would change if we changed YearMade and everything else along with it. Rather, we’re very specifically asking, how sale price would change in a hypothetical world where only YearMade changed. Phew! It is impressive that we can ask such questions. I recommend Judea Pearl and Dana Mackenzie’s recent book on causality, The Book of Why (Basic Books), if you’re interested in more deeply exploring formalisms for analyzing these subtleties.\n\nWith these averages, we can then plot each of these years on the x-axis, and each of the predictions on the y-axis. This, finally, is a partial dependence plot. Let’s take a look:\n\n\nShow code\nfrom sklearn.inspection import plot_partial_dependence\n\nfig,ax = plt.subplots(figsize=(12, 4))\nplot_partial_dependence(m, valid_xs_final, ['YearMade','ProductSize'],\n                        grid_resolution=20, ax=ax);\n\n\n\n\n\n\n\n\n\nLooking first of all at the YearMade plot, and specifically at the section covering the years after 1990 (since as we noted this is where we have the most data), we can see a nearly linear relationship between year and price. Remember that our dependent variable is after taking the logarithm, so this means that in practice there is an exponential increase in price. This is what we would expect: depreciation is generally recognized as being a multiplicative factor over time, so, for a given sale date, varying year made ought to show an exponential relationship with sale price.\nThe ProductSize partial plot is a bit concerning. It shows that the final group, which we saw is for missing values, has the lowest price. To use this insight in practice, we would want to find out why it’s missing so often, and what that means. Missing values can sometimes be useful predictors—it entirely depends on what causes them to be missing. Sometimes, however, they can indicate data leakage.\n\n\nData Leakage\nIn the paper “Leakage in Data Mining: Formulation, Detection, and Avoidance”, Shachar Kaufman, Saharon Rosset, and Claudia Perlich describe leakage as:\n\n: The introduction of information about the target of a data mining problem, which should not be legitimately available to mine from. A trivial example of leakage would be a model that uses the target itself as an input, thus concluding for example that ‘it rains on rainy days’. In practice, the introduction of this illegitimate information is unintentional, and facilitated by the data collection, aggregation and preparation process.\n\nThey give as an example:\n\n: A real-life business intelligence project at IBM where potential customers for certain products were identified, among other things, based on keywords found on their websites. This turned out to be leakage since the website content used for training had been sampled at the point in time where the potential customer has already become a customer, and where the website contained traces of the IBM products purchased, such as the word ‘Websphere’ (e.g., in a press release about the purchase or a specific product feature the client uses).\n\nData leakage is subtle and can take many forms. In particular, missing values often represent data leakage.\nFor instance, Jeremy competed in a Kaggle competition designed to predict which researchers would end up receiving research grants. The information was provided by a university and included thousands of examples of research projects, along with information about the researchers involved and data on whether or not each grant was eventually accepted. The university hoped to be able to use the models developed in this competition to rank which grant applications were most likely to succeed, so it could prioritize its processing.\nJeremy used a random forest to model the data, and then used feature importance to find out which features were most predictive. He noticed three surprising things:\n\nThe model was able to correctly predict who would receive grants over 95% of the time.\nApparently meaningless identifier columns were the most important predictors.\nThe day of week and day of year columns were also highly predictive; for instance, the vast majority of grant applications dated on a Sunday were accepted, and many accepted grant applications were dated on January 1.\n\nFor the identifier columns, one partial dependence plot per column showed that when the information was missing the application was almost always rejected. It turned out that in practice, the university only filled out much of this information after a grant application was accepted. Often, for applications that were not accepted, it was just left blank. Therefore, this information was not something that was actually available at the time that the application was received, and it would not be available for a predictive model—it was data leakage.\nIn the same way, the final processing of successful applications was often done automatically as a batch at the end of the week, or the end of the year. It was this final processing date which ended up in the data, so again, this information, while predictive, was not actually available at the time that the application was received.\nThis example showcases the most practical and simple approaches to identifying data leakage, which are to build a model and then:\n\nCheck whether the accuracy of the model is too good to be true.\nLook for important predictors that don’t make sense in practice.\nLook for partial dependence plot results that don’t make sense in practice.\n\nThinking back to our bear detector, this mirrors the advice that we provided in &lt;&gt;—it is often a good idea to build a model first and then do your data cleaning, rather than vice versa. The model can help you identify potentially problematic data issues.\nIt can also help you identify which factors influence specific predictions, with tree interpreters.\n\n\nTree Interpreter\n\n\nShow code\n#hide\nimport warnings\nwarnings.simplefilter('ignore', FutureWarning)\n\nfrom treeinterpreter import treeinterpreter\nfrom waterfall_chart import plot as waterfall\n\n\nAt the start of this section, we said that we wanted to be able to answer five questions:\n\nHow confident are we in our predictions using a particular row of data?\nFor predicting with a particular row of data, what were the most important factors, and how did they influence that prediction?\nWhich columns are the strongest predictors?\nWhich columns are effectively redundant with each other, for purposes of prediction?\nHow do predictions vary, as we vary these columns?\n\nWe’ve handled four of these already; only the second question remains. To answer this question, we need to use the treeinterpreter library. We’ll also use the waterfallcharts library to draw the chart of the results.\n!pip install treeinterpreter\n!pip install waterfallcharts\nWe have already seen how to compute feature importances across the entire random forest. The basic idea was to look at the contribution of each variable to improving the model, at each branch of every tree, and then add up all of these contributions per variable.\nWe can do exactly the same thing, but for just a single row of data. For instance, let’s say we are looking at some particular item at auction. Our model might predict that this item will be very expensive, and we want to know why. So, we take that one row of data and put it through the first decision tree, looking to see what split is used at each point throughout the tree. For each split, we see what the increase or decrease in the addition is, compared to the parent node of the tree. We do this for every tree, and add up the total change in importance by split variable.\nFor instance, let’s pick the first few rows of our validation set:\n\n\nShow code\nrow = valid_xs_final.iloc[:5]\n\n\nWe can then pass these to treeinterpreter:\n\n\nShow code\nprediction,bias,contributions = treeinterpreter.predict(m, row.values)\n\n\nprediction is simply the prediction that the random forest makes. bias is the prediction based on taking the mean of the dependent variable (i.e., the model that is the root of every tree). contributions is the most interesting bit—it tells us the total change in predicition due to each of the independent variables. Therefore, the sum of contributions plus bias must equal the prediction, for each row. Let’s look just at the first row:\n\n\nShow code\nprediction[0], bias[0], contributions[0].sum()\n\n\n(array([10.01216396]), 10.104746057831765, -0.0925820990266335)\n\n\nThe clearest way to display the contributions is with a waterfall plot. This shows how the positive and negative contributions from all the independent variables sum up to create the final prediction, which is the righthand column labeled “net” here:\n\n\nShow code\nwaterfall(valid_xs_final.columns, contributions[0], threshold=0.08, \n          rotation_value=45,formatting='{:,.3f}');\n\n\n\n\n\n\n\n\n\nThis kind of information is most useful in production, rather than during model development. You can use it to provide useful information to users of your data product about the underlying reasoning behind the predictions.\nNow that we covered some classic machine learning techniques to solve this problem, let’s see how deep learning can help!"
  },
  {
    "objectID": "posts/09_tabular.html#extrapolation-and-neural-networks",
    "href": "posts/09_tabular.html#extrapolation-and-neural-networks",
    "title": "Tabular Modeling Deep Dive",
    "section": "Extrapolation and Neural Networks",
    "text": "Extrapolation and Neural Networks\nA problem with random forests, like all machine learning or deep learning algorithms, is that they don’t always generalize well to new data. We will see in which situations neural networks generalize better, but first, let’s look at the extrapolation problem that random forests have.\n\nThe Extrapolation Problem\n\n\nShow code\n#hide\nnp.random.seed(42)\n\n\nLet’s consider the simple task of making predictions from 40 data points showing a slightly noisy linear relationship:\n\n\nShow code\nx_lin = torch.linspace(0,20, steps=40)\ny_lin = x_lin + torch.randn_like(x_lin)\nplt.scatter(x_lin, y_lin);\n\n\n\n\n\n\n\n\n\nAlthough we only have a single independent variable, sklearn expects a matrix of independent variables, not a single vector. So we have to turn our vector into a matrix with one column. In other words, we have to change the shape from [40] to [40,1]. One way to do that is with the unsqueeze method, which adds a new unit axis to a tensor at the requested dimension:\n\n\nShow code\nxs_lin = x_lin.unsqueeze(1)\nx_lin.shape,xs_lin.shape\n\n\n(torch.Size([40]), torch.Size([40, 1]))\n\n\nA more flexible approach is to slice an array or tensor with the special value None, which introduces an additional unit axis at that location:\n\n\nShow code\nx_lin[:,None].shape\n\n\ntorch.Size([40, 1])\n\n\nWe can now create a random forest for this data. We’ll use only the first 30 rows to train the model:\n\n\nShow code\nm_lin = RandomForestRegressor().fit(xs_lin[:30],y_lin[:30])\n\n\nThen we’ll test the model on the full dataset. The blue dots are the training data, and the red dots are the predictions:\n\n\nShow code\nplt.scatter(x_lin, y_lin, 20)\nplt.scatter(x_lin, m_lin.predict(xs_lin), color='red', alpha=0.5);\n\n\n\n\n\n\n\n\n\nWe have a big problem! Our predictions outside of the domain that our training data covered are all too low. Why do you suppose this is?\nRemember, a random forest just averages the predictions of a number of trees. And a tree simply predicts the average value of the rows in a leaf. Therefore, a tree and a random forest can never predict values outside of the range of the training data. This is particularly problematic for data where there is a trend over time, such as inflation, and you wish to make predictions for a future time. Your predictions will be systematically too low.\nBut the problem extends beyond time variables. Random forests are not able to extrapolate outside of the types of data they have seen, in a more general sense. That’s why we need to make sure our validation set does not contain out-of-domain data.\n\n\nFinding Out-of-Domain Data\nSometimes it is hard to know whether your test set is distributed in the same way as your training data, or, if it is different, what columns reflect that difference. There’s actually an easy way to figure this out, which is to use a random forest!\nBut in this case we don’t use the random forest to predict our actual dependent variable. Instead, we try to predict whether a row is in the validation set or the training set. To see this in action, let’s combine our training and validation sets together, create a dependent variable that represents which dataset each row comes from, build a random forest using that data, and get its feature importance:\n\n\nShow code\ndf_dom = pd.concat([xs_final, valid_xs_final])\nis_valid = np.array([0]*len(xs_final) + [1]*len(valid_xs_final))\n\nm = rf(df_dom, is_valid)\nrf_feat_importance(m, df_dom)[:6]\n\n\n\n\n\n\n\n\n\ncols\nimp\n\n\n\n\n6\nsaleElapsed\n0.891571\n\n\n9\nSalesID\n0.091174\n\n\n14\nMachineID\n0.012950\n\n\n0\nYearMade\n0.001520\n\n\n10\nEnclosure\n0.000430\n\n\n5\nModelID\n0.000395\n\n\n\n\n\n\n\nThis shows that there are three columns that differ significantly between the training and validation sets: saleElapsed, SalesID, and MachineID. It’s fairly obvious why this is the case for saleElapsed: it’s the number of days between the start of the dataset and each row, so it directly encodes the date. The difference in SalesID suggests that identifiers for auction sales might increment over time. MachineID suggests something similar might be happening for individual items sold in those auctions.\nLet’s get a baseline of the original random forest model’s RMSE, then see what the effect is of removing each of these columns in turn:\n\n\nShow code\nm = rf(xs_final, y)\nprint('orig', m_rmse(m, valid_xs_final, valid_y))\n\nfor c in ('SalesID','saleElapsed','MachineID'):\n    m = rf(xs_final.drop(c,axis=1), y)\n    print(c, m_rmse(m, valid_xs_final.drop(c,axis=1), valid_y))\n\n\norig 0.232883\nSalesID 0.230347\nsaleElapsed 0.235529\nMachineID 0.230735\n\n\nIt looks like we should be able to remove SalesID and MachineID without losing any accuracy. Let’s check:\n\n\nShow code\ntime_vars = ['SalesID','MachineID']\nxs_final_time = xs_final.drop(time_vars, axis=1)\nvalid_xs_time = valid_xs_final.drop(time_vars, axis=1)\n\nm = rf(xs_final_time, y)\nm_rmse(m, valid_xs_time, valid_y)\n\n\n0.229498\n\n\nRemoving these variables has slightly improved the model’s accuracy; but more importantly, it should make it more resilient over time, and easier to maintain and understand. We recommend that for all datasets you try building a model where your dependent variable is is_valid, like we did here. It can often uncover subtle domain shift issues that you may otherwise miss.\nOne thing that might help in our case is to simply avoid using old data. Often, old data shows relationships that just aren’t valid any more. Let’s try just using the most recent few years of the data:\n\n\nShow code\nxs['saleYear'].hist();\n\n\n\n\n\n\n\n\n\nHere’s the result of training on this subset:\n\n\nShow code\nfilt = xs['saleYear']&gt;2004\nxs_filt = xs_final_time[filt]\ny_filt = y[filt]\n\n\n\n\nShow code\nm = rf(xs_filt, y_filt)\nm_rmse(m, xs_filt, y_filt), m_rmse(m, valid_xs_time, valid_y)\n\n\n(0.177284, 0.228008)\n\n\nIt’s a tiny bit better, which shows that you shouldn’t always just use your entire dataset; sometimes a subset can be better.\nLet’s see if using a neural network helps.\n\n\nUsing a Neural Network\nWe can use the same approach to build a neural network model. Let’s first replicate the steps we took to set up the TabularPandas object:\n\n\nShow code\ndf_nn = pd.read_csv(path/'TrainAndValid.csv', low_memory=False)\ndf_nn['ProductSize'] = df_nn['ProductSize'].astype('category')\ndf_nn['ProductSize'].cat.set_categories(sizes, ordered=True, inplace=True)\ndf_nn[dep_var] = np.log(df_nn[dep_var])\ndf_nn = add_datepart(df_nn, 'saledate')\n\n\nWe can leverage the work we did to trim unwanted columns in the random forest by using the same set of columns for our neural network:\n\n\nShow code\ndf_nn_final = df_nn[list(xs_final_time.columns) + [dep_var]]\n\n\nCategorical columns are handled very differently in neural networks, compared to decision tree approaches. As we saw in &lt;&gt;, in a neural net a great way to handle categorical variables is by using embeddings. To create embeddings, fastai needs to determine which columns should be treated as categorical variables. It does this by comparing the number of distinct levels in the variable to the value of the max_card parameter. If it’s lower, fastai will treat the variable as categorical. Embedding sizes larger than 10,000 should generally only be used after you’ve tested whether there are better ways to group the variable, so we’ll use 9,000 as our max_card:\n\n\nShow code\ncont_nn,cat_nn = cont_cat_split(df_nn_final, max_card=9000, dep_var=dep_var)\n\n\nIn this case, there’s one variable that we absolutely do not want to treat as categorical: the saleElapsed variable. A categorical variable cannot, by definition, extrapolate outside the range of values that it has seen, but we want to be able to predict auction sale prices in the future. Let’s verify that cont_cat_split did the correct thing.\n\n\nShow code\ncont_nn\n\n\n['saleElapsed']\n\n\nLet’s take a look at the cardinality of each of the categorical variables that we have chosen so far:\n\n\nShow code\ndf_nn_final[cat_nn].nunique()\n\n\nYearMade                73\nProductSize              6\nCoupler_System           2\nfiProductClassDesc      74\nHydraulics_Flow          3\nModelID               5281\nfiSecondaryDesc        177\nfiModelDesc           5059\nEnclosure                6\nHydraulics              12\nProductGroup             6\nDrive_System             4\nTire_Size               17\ndtype: int64\n\n\nThe fact that there are two variables pertaining to the “model” of the equipment, both with similar very high cardinalities, suggests that they may contain similar, redundant information. Note that we would not necessarily see this when analyzing redundant features, since that relies on similar variables being sorted in the same order (that is, they need to have similarly named levels). Having a column with 5,000 levels means needing 5,000 columns in our embedding matrix, which would be nice to avoid if possible. Let’s see what the impact of removing one of these model columns has on the random forest:\n\n\nShow code\nxs_filt2 = xs_filt.drop('fiModelDescriptor', axis=1)\nvalid_xs_time2 = valid_xs_time.drop('fiModelDescriptor', axis=1)\nm2 = rf(xs_filt2, y_filt)\nm_rmse(m2, xs_filt2, y_filt), m_rmse(m2, valid_xs_time2, valid_y)\n\n\n(0.176713, 0.230195)\n\n\nThere’s minimal impact, so we will remove it as a predictor for our neural network:\n\n\nShow code\ncat_nn.remove('fiModelDescriptor')\n\n\nWe can create our TabularPandas object in the same way as when we created our random forest, with one very important addition: normalization. A random forest does not need any normalization—the tree building procedure cares only about the order of values in a variable, not at all about how they are scaled. But as we have seen, a neural network definitely does care about this. Therefore, we add the Normalize processor when we build our TabularPandas object:\n\n\nShow code\nprocs_nn = [Categorify, FillMissing, Normalize]\nto_nn = TabularPandas(df_nn_final, procs_nn, cat_nn, cont_nn,\n                      splits=splits, y_names=dep_var)\n\n\nTabular models and data don’t generally require much GPU RAM, so we can use larger batch sizes:\n\n\nShow code\ndls = to_nn.dataloaders(1024)\n\n\nAs we’ve discussed, it’s a good idea to set y_range for regression models, so let’s find the min and max of our dependent variable:\n\n\nShow code\ny = to_nn.train.y\ny.min(),y.max()\n\n\n(8.465899467468262, 11.863582611083984)\n\n\nWe can now create the Learner to create this tabular model. As usual, we use the application-specific learner function, to take advantage of its application-customized defaults. We set the loss function to MSE, since that’s what this competition uses.\nBy default, for tabular data fastai creates a neural network with two hidden layers, with 200 and 100 activations, respectively. This works quite well for small datasets, but here we’ve got quite a large dataset, so we increase the layer sizes to 500 and 250:\n\n\nShow code\nlearn = tabular_learner(dls, y_range=(8,12), layers=[500,250],\n                        n_out=1, loss_func=F.mse_loss)\n\n\n\n\nShow code\nlearn.lr_find()\n\n\n\n\n\nSuggestedLRs(lr_min=0.002754228748381138, lr_steep=0.00015848931798245758)\n\n\n\n\n\n\n\n\n\nThere’s no need to use fine_tune, so we’ll train with fit_one_cycle for a few epochs and see how it looks:\n\n\nShow code\nlearn.fit_one_cycle(5, 1e-2)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.068459\n0.061185\n00:09\n\n\n1\n0.056469\n0.058471\n00:09\n\n\n2\n0.048689\n0.052404\n00:09\n\n\n3\n0.044529\n0.052138\n00:09\n\n\n4\n0.040860\n0.051236\n00:09\n\n\n\n\n\nWe can use our r_mse function to compare the result to the random forest result we got earlier:\n\n\nShow code\npreds,targs = learn.get_preds()\nr_mse(preds,targs)\n\n\n\n\n\n0.226353\n\n\nIt’s quite a bit better than the random forest (although it took longer to train, and it’s fussier about hyperparameter tuning).\nBefore we move on, let’s save our model in case we want to come back to it again later:\n\n\nShow code\nlearn.save('nn')\n\n\nPath('models/nn.pth')\n\n\n\n\nSidebar: fastai’s Tabular Classes\nIn fastai, a tabular model is simply a model that takes columns of continuous or categorical data, and predicts a category (a classification model) or a continuous value (a regression model). Categorical independent variables are passed through an embedding, and concatenated, as we saw in the neural net we used for collaborative filtering, and then continuous variables are concatenated as well.\nThe model created in tabular_learner is an object of class TabularModel. Take a look at the source for tabular_learner now (remember, that’s tabular_learner?? in Jupyter). You’ll see that like collab_learner, it first calls get_emb_sz to calculate appropriate embedding sizes (you can override these by using the emb_szs parameter, which is a dictionary containing any column names you want to set sizes for manually), and it sets a few other defaults. Other than that, it just creates the TabularModel, and passes that to TabularLearner (note that TabularLearner is identical to Learner, except for a customized predict method).\nThat means that really all the work is happening in TabularModel, so take a look at the source for that now. With the exception of the BatchNorm1d and Dropout layers (which we’ll be learning about shortly), you now have the knowledge required to understand this whole class. Take a look at the discussion of EmbeddingNN at the end of the last chapter. Recall that it passed n_cont=0 to TabularModel. We now can see why that was: because there are zero continuous variables (in fastai the n_ prefix means “number of,” and cont is an abbreviation for “continuous”).\n\n\nEnd sidebar\nAnother thing that can help with generalization is to use several models and average their predictions—a technique, as mentioned earlier, known as ensembling."
  },
  {
    "objectID": "posts/09_tabular.html#ensembling",
    "href": "posts/09_tabular.html#ensembling",
    "title": "Tabular Modeling Deep Dive",
    "section": "Ensembling",
    "text": "Ensembling\nThink back to the original reasoning behind why random forests work so well: each tree has errors, but those errors are not correlated with each other, so the average of those errors should tend towards zero once there are enough trees. Similar reasoning could be used to consider averaging the predictions of models trained using different algorithms.\nIn our case, we have two very different models, trained using very different algorithms: a random forest, and a neural network. It would be reasonable to expect that the kinds of errors that each one makes would be quite different. Therefore, we might expect that the average of their predictions would be better than either one’s individual predictions.\nAs we saw earlier, a random forest is itself an ensemble. But we can then include a random forest in another ensemble—an ensemble of the random forest and the neural network! While ensembling won’t make the difference between a successful and an unsuccessful modeling process, it can certainly add a nice little boost to any models that you have built.\nOne minor issue we have to be aware of is that our PyTorch model and our sklearn model create data of different types: PyTorch gives us a rank-2 tensor (i.e, a column matrix), whereas NumPy gives us a rank-1 array (a vector). squeeze removes any unit axes from a tensor, and to_np converts it into a NumPy array:\n\n\nShow code\nrf_preds = m.predict(valid_xs_time)\nens_preds = (to_np(preds.squeeze()) + rf_preds) /2\n\n\nThis gives us a better result than either model achieved on its own:\n\n\nShow code\nr_mse(ens_preds,valid_y)\n\n\n0.222134\n\n\nIn fact, this result is better than any score shown on the Kaggle leaderboard. It’s not directly comparable, however, because the Kaggle leaderboard uses a separate dataset that we do not have access to. Kaggle does not allow us to submit to this old competition to find out how we would have done, but our results certainly look very encouraging!\n\nBoosting\nSo far our approach to ensembling has been to use bagging, which involves combining many models (each trained on a different data subset) together by averaging them. As we saw, when this is applied to decision trees, this is called a random forest.\nThere is another important approach to ensembling, called boosting, where we add models instead of averaging them. Here is how boosting works:\n\nTrain a small model that underfits your dataset.\nCalculate the predictions in the training set for this model.\nSubtract the predictions from the targets; these are called the “residuals” and represent the error for each point in the training set.\nGo back to step 1, but instead of using the original targets, use the residuals as the targets for the training.\nContinue doing this until you reach some stopping criterion, such as a maximum number of trees, or you observe your validation set error getting worse.\n\nUsing this approach, each new tree will be attempting to fit the error of all of the previous trees combined. Because we are continually creating new residuals, by subtracting the predictions of each new tree from the residuals from the previous tree, the residuals will get smaller and smaller.\nTo make predictions with an ensemble of boosted trees, we calculate the predictions from each tree, and then add them all together. There are many models following this basic approach, and many names for the same models. Gradient boosting machines (GBMs) and gradient boosted decision trees (GBDTs) are the terms you’re most likely to come across, or you may see the names of specific libraries implementing these; at the time of writing, XGBoost is the most popular.\nNote that, unlike with random forests, with this approach there is nothing to stop us from overfitting. Using more trees in a random forest does not lead to overfitting, because each tree is independent of the others. But in a boosted ensemble, the more trees you have, the better the training error becomes, and eventually you will see overfitting on the validation set.\nWe are not going to go into detail on how to train a gradient boosted tree ensemble here, because the field is moving rapidly, and any guidance we give will almost certainly be outdated by the time you read this. As we write this, sklearn has just added a HistGradientBoostingRegressor class that provides excellent performance. There are many hyperparameters to tweak for this class, and for all gradient boosted tree methods we have seen. Unlike random forests, gradient boosted trees are extremely sensitive to the choices of these hyperparameters; in practice, most people use a loop that tries a range of different hyperparameters to find the ones that work best.\nOne more technique that has gotten great results is to use embeddings learned by a neural net in a machine learning model.\n\n\nCombining Embeddings with Other Methods\nThe abstract of the entity embedding paper we mentioned at the start of this chapter states: “the embeddings obtained from the trained neural network boost the performance of all tested machine learning methods considerably when used as the input features instead”. It includes the very interesting table in &lt;&gt;.\n\nThis is showing the mean average percent error (MAPE) compared among four different modeling techniques, three of which we have already seen, along with k-nearest neighbors (KNN), which is a very simple baseline method. The first numeric column contains the results of using the methods on the data provided in the competition; the second column shows what happens if you first train a neural network with categorical embeddings, and then use those categorical embeddings instead of the raw categorical columns in the model. As you see, in every case, the models are dramatically improved by using the embeddings instead of the raw categories.\nThis is a really important result, because it shows that you can get much of the performance improvement of a neural network without actually having to use a neural network at inference time. You could just use an embedding, which is literally just an array lookup, along with a small decision tree ensemble.\nThese embeddings need not even be necessarily learned separately for each model or task in an organization. Instead, once a set of embeddings are learned for some column for some task, they could be stored in a central place, and reused across multiple models. In fact, we know from private communication with other practitioners at large companies that this is already happening in many places."
  },
  {
    "objectID": "posts/09_tabular.html#conclusion-our-advice-for-tabular-modeling",
    "href": "posts/09_tabular.html#conclusion-our-advice-for-tabular-modeling",
    "title": "Tabular Modeling Deep Dive",
    "section": "Conclusion: Our Advice for Tabular Modeling",
    "text": "Conclusion: Our Advice for Tabular Modeling\nWe have dicussed two approaches to tabular modeling: decision tree ensembles and neural networks. We’ve also mentioned two different decision tree ensembles: random forests, and gradient boosting machines. Each is very effective, but each also has compromises:\n\nRandom forests are the easiest to train, because they are extremely resilient to hyperparameter choices and require very little preprocessing. They are very fast to train, and should not overfit if you have enough trees. But they can be a little less accurate, especially if extrapolation is required, such as predicting future time periods.\nGradient boosting machines in theory are just as fast to train as random forests, but in practice you will have to try lots of different hyperparameters. They can overfit, but they are often a little more accurate than random forests.\nNeural networks take the longest time to train, and require extra preprocessing, such as normalization; this normalization needs to be used at inference time as well. They can provide great results and extrapolate well, but only if you are careful with your hyperparameters and take care to avoid overfitting.\n\nWe suggest starting your analysis with a random forest. This will give you a strong baseline, and you can be confident that it’s a reasonable starting point. You can then use that model for feature selection and partial dependence analysis, to get a better understanding of your data.\nFrom that foundation, you can try neural nets and GBMs, and if they give you significantly better results on your validation set in a reasonable amount of time, you can use them. If decision tree ensembles are working well for you, try adding the embeddings for the categorical variables to the data, and see if that helps your decision trees learn better."
  },
  {
    "objectID": "posts/09_tabular.html#questionnaire",
    "href": "posts/09_tabular.html#questionnaire",
    "title": "Tabular Modeling Deep Dive",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhat is a continuous variable?\nWhat is a categorical variable?\nProvide two of the words that are used for the possible values of a categorical variable.\nWhat is a “dense layer”?\nHow do entity embeddings reduce memory usage and speed up neural networks?\nWhat kinds of datasets are entity embeddings especially useful for?\nWhat are the two main families of machine learning algorithms?\nWhy do some categorical columns need a special ordering in their classes? How do you do this in Pandas?\nSummarize what a decision tree algorithm does.\nWhy is a date different from a regular categorical or continuous variable, and how can you preprocess it to allow it to be used in a model?\nShould you pick a random validation set in the bulldozer competition? If no, what kind of validation set should you pick?\nWhat is pickle and what is it useful for?\nHow are mse, samples, and values calculated in the decision tree drawn in this chapter?\nHow do we deal with outliers, before building a decision tree?\nHow do we handle categorical variables in a decision tree?\nWhat is bagging?\nWhat is the difference between max_samples and max_features when creating a random forest?\nIf you increase n_estimators to a very high value, can that lead to overfitting? Why or why not?\nIn the section “Creating a Random Forest”, just after &lt;&gt;, why did preds.mean(0) give the same result as our random forest?\nWhat is “out-of-bag-error”?\nMake a list of reasons why a model’s validation set error might be worse than the OOB error. How could you test your hypotheses?\nExplain why random forests are well suited to answering each of the following question:\n\nHow confident are we in our predictions using a particular row of data?\nFor predicting with a particular row of data, what were the most important factors, and how did they influence that prediction?\nWhich columns are the strongest predictors?\nHow do predictions vary as we vary these columns?\n\nWhat’s the purpose of removing unimportant variables?\nWhat’s a good type of plot for showing tree interpreter results?\nWhat is the “extrapolation problem”?\nHow can you tell if your test or validation set is distributed in a different way than your training set?\nWhy do we ensure saleElapsed is a continuous variable, even although it has less than 9,000 distinct values?\nWhat is “boosting”?\nHow could we use embeddings with a random forest? Would we expect this to help?\nWhy might we not always use a neural net for tabular modeling?\n\n\nFurther Research\n\nPick a competition on Kaggle with tabular data (current or past) and try to adapt the techniques seen in this chapter to get the best possible results. Compare your results to the private leaderboard.\nImplement the decision tree algorithm in this chapter from scratch yourself, and try it on the dataset you used in the first exercise.\nUse the embeddings from the neural net in this chapter in a random forest, and see if you can improve on the random forest results we saw.\nExplain what each line of the source of TabularModel does (with the exception of the BatchNorm1d and Dropout layers)."
  },
  {
    "objectID": "posts/07_sizing_and_tta.html",
    "href": "posts/07_sizing_and_tta.html",
    "title": "Training a State-of-the-Art Model",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_sizing_and_tta]]\nThis chapter introduces more advanced techniques for training an image classification model and getting state-of-the-art results. You can skip it if you want to learn more about other applications of deep learning and come back to it later—knowledge of this material will not be assumed in later chapters.\nWe will look at what normalization is, a powerful data augmentation technique called mixup, the progressive resizing approach and test time augmentation. To show all of this, we are going to train a model from scratch (not using transfer learning) using a subset of ImageNet called Imagenette. It contains a subset of 10 very different categories from the original ImageNet dataset, making for quicker training when we want to experiment.\nThis is going to be much harder to do well than with our previous datasets because we’re using full-size, full-color images, which are photos of objects of different sizes, in different orientations, in different lighting, and so forth. So, in this chapter we’re going to introduce some important techniques for getting the most out of your dataset, especially when you’re training from scratch, or using transfer learning to train a model on a very different kind of dataset than the pretrained model used."
  },
  {
    "objectID": "posts/07_sizing_and_tta.html#imagenette",
    "href": "posts/07_sizing_and_tta.html#imagenette",
    "title": "Training a State-of-the-Art Model",
    "section": "Imagenette",
    "text": "Imagenette\nWhen fast.ai first started there were three main datasets that people used for building and testing computer vision models:\n\nImageNet:: 1.3 million images of various sizes around 500 pixels across, in 1,000 categories, which took a few days to train\nMNIST:: 50,000 28×28-pixel grayscale handwritten digits\nCIFAR10:: 60,000 32×32-pixel color images in 10 classes\n\nThe problem was that the smaller datasets didn’t actually generalize effectively to the large ImageNet dataset. The approaches that worked well on ImageNet generally had to be developed and trained on ImageNet. This led to many people believing that only researchers with access to giant computing resources could effectively contribute to developing image classification algorithms.\nWe thought that seemed very unlikely to be true. We had never actually seen a study that showed that ImageNet happen to be exactly the right size, and that other datasets could not be developed which would provide useful insights. So we thought we would try to create a new dataset that researchers could test their algorithms on quickly and cheaply, but which would also provide insights likely to work on the full ImageNet dataset.\nAbout three hours later we had created Imagenette. We selected 10 classes from the full ImageNet that looked very different from one another. As we had hoped, we were able to quickly and cheaply create a classifier capable of recognizing these classes. We then tried out a few algorithmic tweaks to see how they impacted Imagenette. We found some that worked pretty well, and tested them on ImageNet as well—and we were very pleased to find that our tweaks worked well on ImageNet too!\nThere is an important message here: the dataset you get given is not necessarily the dataset you want. It’s particularly unlikely to be the dataset that you want to do your development and prototyping in. You should aim to have an iteration speed of no more than a couple of minutes—that is, when you come up with a new idea you want to try out, you should be able to train a model and see how it goes within a couple of minutes. If it’s taking longer to do an experiment, think about how you could cut down your dataset, or simplify your model, to improve your experimentation speed. The more experiments you can do, the better!\nLet’s get started with this dataset:\n\n\nShow code\nfrom fastai.vision.all import *\npath = untar_data(URLs.IMAGENETTE)\n\n\nFirst we’ll get our dataset into a DataLoaders object, using the presizing trick introduced in &lt;&gt;:\n\n\nShow code\ndblock = DataBlock(blocks=(ImageBlock(), CategoryBlock()),\n                   get_items=get_image_files,\n                   get_y=parent_label,\n                   item_tfms=Resize(460),\n                   batch_tfms=aug_transforms(size=224, min_scale=0.75))\ndls = dblock.dataloaders(path, bs=64)\n\n\nand do a training run that will serve as a baseline:\n\n\nShow code\nmodel = xresnet50(n_out=dls.c)\nlearn = Learner(dls, model, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn.fit_one_cycle(5, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.583403\n2.064317\n0.401792\n01:03\n\n\n1\n1.208877\n1.260106\n0.601568\n01:02\n\n\n2\n0.925265\n1.036154\n0.664302\n01:03\n\n\n3\n0.730190\n0.700906\n0.777819\n01:03\n\n\n4\n0.585707\n0.541810\n0.825243\n01:03\n\n\n\n\n\nThat’s a good baseline, since we are not using a pretrained model, but we can do better. When working with models that are being trained from scratch, or fine-tuned to a very different dataset than the one used for the pretraining, there are some additional techniques that are really important. In the rest of the chapter we’ll consider some of the key approaches you’ll want to be familiar with. The first one is normalizing your data."
  },
  {
    "objectID": "posts/07_sizing_and_tta.html#normalization",
    "href": "posts/07_sizing_and_tta.html#normalization",
    "title": "Training a State-of-the-Art Model",
    "section": "Normalization",
    "text": "Normalization\nWhen training a model, it helps if your input data is normalized—that is, has a mean of 0 and a standard deviation of 1. But most images and computer vision libraries use values between 0 and 255 for pixels, or between 0 and 1; in either case, your data is not going to have a mean of 0 and a standard deviation of 1.\nLet’s grab a batch of our data and look at those values, by averaging over all axes except for the channel axis, which is axis 1:\n\n\nShow code\nx,y = dls.one_batch()\nx.mean(dim=[0,2,3]),x.std(dim=[0,2,3])\n\n\n(TensorImage([0.4842, 0.4711, 0.4511], device='cuda:5'),\n TensorImage([0.2873, 0.2893, 0.3110], device='cuda:5'))\n\n\nAs we expected, the mean and standard deviation are not very close to the desired values. Fortunately, normalizing the data is easy to do in fastai by adding the Normalize transform. This acts on a whole mini-batch at once, so you can add it to the batch_tfms section of your data block. You need to pass to this transform the mean and standard deviation that you want to use; fastai comes with the standard ImageNet mean and standard deviation already defined. (If you do not pass any statistics to the Normalize transform, fastai will automatically calculate them from a single batch of your data.)\nLet’s add this transform (using imagenet_stats as Imagenette is a subset of ImageNet) and take a look at one batch now:\n\n\nShow code\ndef get_dls(bs, size):\n    dblock = DataBlock(blocks=(ImageBlock, CategoryBlock),\n                   get_items=get_image_files,\n                   get_y=parent_label,\n                   item_tfms=Resize(460),\n                   batch_tfms=[*aug_transforms(size=size, min_scale=0.75),\n                               Normalize.from_stats(*imagenet_stats)])\n    return dblock.dataloaders(path, bs=bs)\n\n\n\n\nShow code\ndls = get_dls(64, 224)\n\n\n\n\nShow code\nx,y = dls.one_batch()\nx.mean(dim=[0,2,3]),x.std(dim=[0,2,3])\n\n\n(TensorImage([-0.0787,  0.0525,  0.2136], device='cuda:5'),\n TensorImage([1.2330, 1.2112, 1.3031], device='cuda:5'))\n\n\nLet’s check what effect this had on training our model:\n\n\nShow code\nmodel = xresnet50(n_out=dls.c)\nlearn = Learner(dls, model, loss_func=CrossEntropyLossFlat(), metrics=accuracy)\nlearn.fit_one_cycle(5, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.632865\n2.250024\n0.391337\n01:02\n\n\n1\n1.294041\n1.579932\n0.517177\n01:02\n\n\n2\n0.960535\n1.069164\n0.657207\n01:04\n\n\n3\n0.730220\n0.767433\n0.771845\n01:05\n\n\n4\n0.577889\n0.550673\n0.824496\n01:06\n\n\n\n\n\nAlthough it only helped a little here, normalization becomes especially important when using pretrained models. The pretrained model only knows how to work with data of the type that it has seen before. If the average pixel value was 0 in the data it was trained with, but your data has 0 as the minimum possible value of a pixel, then the model is going to be seeing something very different to what is intended!\nThis means that when you distribute a model, you need to also distribute the statistics used for normalization, since anyone using it for inference, or transfer learning, will need to use the same statistics. By the same token, if you’re using a model that someone else has trained, make sure you find out what normalization statistics they used, and match them.\nWe didn’t have to handle normalization in previous chapters because when using a pretrained model through vision_learner, the fastai library automatically adds the proper Normalize transform; the model has been pretrained with certain statistics in Normalize (usually coming from the ImageNet dataset), so the library can fill those in for you. Note that this only applies with pretrained models, which is why we need to add this information manually here, when training from scratch.\nAll our training up until now has been done at size 224. We could have begun training at a smaller size before going to that. This is called progressive resizing."
  },
  {
    "objectID": "posts/07_sizing_and_tta.html#progressive-resizing",
    "href": "posts/07_sizing_and_tta.html#progressive-resizing",
    "title": "Training a State-of-the-Art Model",
    "section": "Progressive Resizing",
    "text": "Progressive Resizing\nWhen fast.ai and its team of students won the DAWNBench competition in 2018, one of the most important innovations was something very simple: start training using small images, and end training using large images. Spending most of the epochs training with small images, helps training complete much faster. Completing training using large images makes the final accuracy much higher. We call this approach progressive resizing.\n\njargon: progressive resizing: Gradually using larger and larger images as you train.\n\nAs we have seen, the kinds of features that are learned by convolutional neural networks are not in any way specific to the size of the image—early layers find things like edges and gradients, and later layers may find things like noses and sunsets. So, when we change image size in the middle of training, it doesn’t mean that we have to find totally different parameters for our model.\nBut clearly there are some differences between small images and big ones, so we shouldn’t expect our model to continue working exactly as well, with no changes at all. Does this remind you of something? When we developed this idea, it reminded us of transfer learning! We are trying to get our model to learn to do something a little bit different from what it has learned to do before. Therefore, we should be able to use the fine_tune method after we resize our images.\nThere is an additional benefit to progressive resizing: it is another form of data augmentation. Therefore, you should expect to see better generalization of your models that are trained with progressive resizing.\nTo implement progressive resizing it is most convenient if you first create a get_dls function which takes an image size and a batch size as we did in the section before, and returns your DataLoaders:\nNow you can create your DataLoaders with a small size and use fit_one_cycle in the usual way, training for a few less epochs than you might otherwise do:\n\n\nShow code\ndls = get_dls(128, 128)\nlearn = Learner(dls, xresnet50(n_out=dls.c), loss_func=CrossEntropyLossFlat(), \n                metrics=accuracy)\nlearn.fit_one_cycle(4, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.902943\n2.447006\n0.401419\n00:30\n\n\n1\n1.315203\n1.572992\n0.525765\n00:30\n\n\n2\n1.001199\n0.767886\n0.759149\n00:30\n\n\n3\n0.765864\n0.665562\n0.797984\n00:30\n\n\n\n\n\nThen you can replace the DataLoaders inside the Learner, and fine-tune:\n\n\nShow code\nlearn.dls = get_dls(64, 224)\nlearn.fine_tune(5, 1e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.985213\n1.654063\n0.565721\n01:06\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.706869\n0.689622\n0.784541\n01:07\n\n\n1\n0.739217\n0.928541\n0.712472\n01:07\n\n\n2\n0.629462\n0.788906\n0.764003\n01:07\n\n\n3\n0.491912\n0.502622\n0.836445\n01:06\n\n\n4\n0.414880\n0.431332\n0.863331\n01:06\n\n\n\n\n\nAs you can see, we’re getting much better performance, and the initial training on small images was much faster on each epoch.\nYou can repeat the process of increasing size and training more epochs as many times as you like, for as big an image as you wish—but of course, you will not get any benefit by using an image size larger than the size of your images on disk.\nNote that for transfer learning, progressive resizing may actually hurt performance. This is most likely to happen if your pretrained model was quite similar to your transfer learning task and dataset and was trained on similar-sized images, so the weights don’t need to be changed much. In that case, training on smaller images may damage the pretrained weights.\nOn the other hand, if the transfer learning task is going to use images that are of different sizes, shapes, or styles than those used in the pretraining task, progressive resizing will probably help. As always, the answer to “Will it help?” is “Try it!”\nAnother thing we could try is applying data augmentation to the validation set. Up until now, we have only applied it on the training set; the validation set always gets the same images. But maybe we could try to make predictions for a few augmented versions of the validation set and average them. We’ll consider this approach next."
  },
  {
    "objectID": "posts/07_sizing_and_tta.html#test-time-augmentation",
    "href": "posts/07_sizing_and_tta.html#test-time-augmentation",
    "title": "Training a State-of-the-Art Model",
    "section": "Test Time Augmentation",
    "text": "Test Time Augmentation\nWe have been using random cropping as a way to get some useful data augmentation, which leads to better generalization, and results in a need for less training data. When we use random cropping, fastai will automatically use center cropping for the validation set—that is, it will select the largest square area it can in the center of the image, without going past the image’s edges.\nThis can often be problematic. For instance, in a multi-label dataset sometimes there are small objects toward the edges of an image; these could be entirely cropped out by center cropping. Even for problems such as our pet breed classification example, it’s possible that some critical feature necessary for identifying the correct breed, such as the color of the nose, could be cropped out.\nOne solution to this problem is to avoid random cropping entirely. Instead, we could simply squish or stretch the rectangular images to fit into a square space. But then we miss out on a very useful data augmentation, and we also make the image recognition more difficult for our model, because it has to learn how to recognize squished and squeezed images, rather than just correctly proportioned images.\nAnother solution is to not just center crop for validation, but instead to select a number of areas to crop from the original rectangular image, pass each of them through our model, and take the maximum or average of the predictions. In fact, we could do this not just for different crops, but for different values across all of our test time augmentation parameters. This is known as test time augmentation (TTA).\n\njargon: test time augmentation (TTA): During inference or validation, creating multiple versions of each image, using data augmentation, and then taking the average or maximum of the predictions for each augmented version of the image.\n\nDepending on the dataset, test time augmentation can result in dramatic improvements in accuracy. It does not change the time required to train at all, but will increase the amount of time required for validation or inference by the number of test-time-augmented images requested. By default, fastai will use the unaugmented center crop image plus four randomly augmented images.\nYou can pass any DataLoader to fastai’s tta method; by default, it will use your validation set:\n\n\nShow code\npreds,targs = learn.tta()\naccuracy(preds, targs).item()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.8737863898277283\n\n\nAs we can see, using TTA gives us good a boost in performance, with no additional training required. However, it does make inference slower—if you’re averaging five images for TTA, inference will be five times slower.\nWe’ve seen examples of how data augmentation helps train better models. Let’s now focus on a new data augmentation technique called Mixup."
  },
  {
    "objectID": "posts/07_sizing_and_tta.html#mixup",
    "href": "posts/07_sizing_and_tta.html#mixup",
    "title": "Training a State-of-the-Art Model",
    "section": "Mixup",
    "text": "Mixup\nMixup, introduced in the 2017 paper “mixup: Beyond Empirical Risk Minimization” by Hongyi Zhang et al., is a very powerful data augmentation technique that can provide dramatically higher accuracy, especially when you don’t have much data and don’t have a pretrained model that was trained on data similar to your dataset. The paper explains: “While data augmentation consistently leads to improved generalization, the procedure is dataset-dependent, and thus requires the use of expert knowledge.” For instance, it’s common to flip images as part of data augmentation, but should you flip only horizontally, or also vertically? The answer is that it depends on your dataset. In addition, if flipping (for instance) doesn’t provide enough data augmentation for you, you can’t “flip more.” It’s helpful to have data augmentation techniques where you can “dial up” or “dial down” the amount of change, to see what works best for you.\nMixup works as follows, for each image:\n\nSelect another image from your dataset at random.\nPick a weight at random.\nTake a weighted average (using the weight from step 2) of the selected image with your image; this will be your independent variable.\nTake a weighted average (with the same weight) of this image’s labels with your image’s labels; this will be your dependent variable.\n\nIn pseudocode, we’re doing this (where t is the weight for our weighted average):\nimage2,target2 = dataset[randint(0,len(dataset)]\nt = random_float(0.5,1.0)\nnew_image = t * image1 + (1-t) * image2\nnew_target = t * target1 + (1-t) * target2\nFor this to work, our targets need to be one-hot encoded. The paper describes this using the equations shown in &lt;&gt; where \\(\\lambda\\) is the same as t in our pseudocode:\n\n\nSidebar: Papers and Math\nWe’re going to be looking at more and more research papers from here on in the book. Now that you have the basic jargon, you might be surprised to discover how much of them you can understand, with a little practice! One issue you’ll notice is that Greek letters, such as \\(\\lambda\\), appear in most papers. It’s a very good idea to learn the names of all the Greek letters, since otherwise it’s very hard to read the papers to yourself, and remember them (or to read code based on them, since code often uses the names of the Greek letters spelled out, such as lambda).\nThe bigger issue with papers is that they use math, instead of code, to explain what’s going on. If you don’t have much of a math background, this will likely be intimidating and confusing at first. But remember: what is being shown in the math, is something that will be implemented in code. It’s just another way of talking about the same thing! After reading a few papers, you’ll pick up more and more of the notation. If you don’t know what a symbol is, try looking it up in Wikipedia’s list of mathematical symbols or drawing it in Detexify, which (using machine learning!) will find the name of your hand-drawn symbol. Then you can search online for that name to find out what it’s for.\n\n\nEnd sidebar\n&lt;&gt; shows what it looks like when we take a linear combination of images, as done in Mixup.\n\n\nShow code\n#hide_input\n#id mixup_example\n#caption Mixing a church and a gas station\n#alt An image of a church, a gas station and the two mixed up.\nchurch = PILImage.create(get_image_files_sorted(path/'train'/'n03028079')[0])\ngas = PILImage.create(get_image_files_sorted(path/'train'/'n03425413')[0])\nchurch = church.resize((256,256))\ngas = gas.resize((256,256))\ntchurch = tensor(church).float() / 255.\ntgas = tensor(gas).float() / 255.\n\n_,axs = plt.subplots(1, 3, figsize=(12,4))\nshow_image(tchurch, ax=axs[0]);\nshow_image(tgas, ax=axs[1]);\nshow_image((0.3*tchurch + 0.7*tgas), ax=axs[2]);\n\n\n\n\n\n\n\n\n\nThe third image is built by adding 0.3 times the first one and 0.7 times the second. In this example, should the model predict “church” or “gas station”? The right answer is 30% church and 70% gas station, since that’s what we’ll get if we take the linear combination of the one-hot-encoded targets. For instance, suppose we have 10 classes and “church” is represented by the index 2 and “gas station” is represented by the index 7, the one-hot-encoded representations are:\n[0, 0, 1, 0, 0, 0, 0, 0, 0, 0] and [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\nso our final target is:\n[0, 0, 0.3, 0, 0, 0, 0, 0.7, 0, 0]\nThis all done for us inside fastai by adding a callback to our Learner. Callbacks are what is used inside fastai to inject custom behavior in the training loop (like a learning rate schedule, or training in mixed precision). We’ll be learning all about callbacks, including how to make your own, in &lt;&gt;. For now, all you need to know is that you use the cbs parameter to Learner to pass callbacks.\nHere is how we train a model with Mixup:\nmodel = xresnet50(n_out=dls.c)\nlearn = Learner(dls, model, loss_func=CrossEntropyLossFlat(), \n                metrics=accuracy, cbs=MixUp())\nlearn.fit_one_cycle(5, 3e-3)\nWhat happens when we train a model with data that’s “mixed up” in this way? Clearly, it’s going to be harder to train, because it’s harder to see what’s in each image. And the model has to predict two labels per image, rather than just one, as well as figuring out how much each one is weighted. Overfitting seems less likely to be a problem, however, because we’re not showing the same image in each epoch, but are instead showing a random combination of two images.\nMixup requires far more epochs to train to get better accuracy, compared to other augmentation approaches we’ve seen. You can try training Imagenette with and without Mixup by using the examples/train_imagenette.py script in the fastai repo. At the time of writing, the leaderboard in the Imagenette repo is showing that Mixup is used for all leading results for trainings of &gt;80 epochs, and for fewer epochs Mixup is not being used. This is in line with our experience of using Mixup too.\nOne of the reasons that Mixup is so exciting is that it can be applied to types of data other than photos. In fact, some people have even shown good results by using Mixup on activations inside their models, not just on inputs—this allows Mixup to be used for NLP and other data types too.\nThere’s another subtle issue that Mixup deals with for us, which is that it’s not actually possible with the models we’ve seen before for our loss to ever be perfect. The problem is that our labels are 1s and 0s, but the outputs of softmax and sigmoid can never equal 1 or 0. This means training our model pushes our activations ever closer to those values, such that the more epochs we do, the more extreme our activations become.\nWith Mixup we no longer have that problem, because our labels will only be exactly 1 or 0 if we happen to “mix” with another image of the same class. The rest of the time our labels will be a linear combination, such as the 0.7 and 0.3 we got in the church and gas station example earlier.\nOne issue with this, however, is that Mixup is “accidentally” making the labels bigger than 0, or smaller than 1. That is to say, we’re not explicitly telling our model that we want to change the labels in this way. So, if we want to make the labels closer to, or further away from 0 and 1, we have to change the amount of Mixup—which also changes the amount of data augmentation, which might not be what we want. There is, however, a way to handle this more directly, which is to use label smoothing."
  },
  {
    "objectID": "posts/07_sizing_and_tta.html#label-smoothing",
    "href": "posts/07_sizing_and_tta.html#label-smoothing",
    "title": "Training a State-of-the-Art Model",
    "section": "Label Smoothing",
    "text": "Label Smoothing\nIn the theoretical expression of loss, in classification problems, our targets are one-hot encoded (in practice we tend to avoid doing this to save memory, but what we compute is the same loss as if we had used one-hot encoding). That means the model is trained to return 0 for all categories but one, for which it is trained to return 1. Even 0.999 is not “good enough”, the model will get gradients and learn to predict activations with even higher confidence. This encourages overfitting and gives you at inference time a model that is not going to give meaningful probabilities: it will always say 1 for the predicted category even if it’s not too sure, just because it was trained this way.\nThis can become very harmful if your data is not perfectly labeled. In the bear classifier we studied in &lt;&gt;, we saw that some of the images were mislabeled, or contained two different kinds of bears. In general, your data will never be perfect. Even if the labels were manually produced by humans, they could make mistakes, or have differences of opinions on images that are harder to label.\nInstead, we could replace all our 1s with a number a bit less than 1, and our 0s by a number a bit more than 0, and then train. This is called label smoothing. By encouraging your model to be less confident, label smoothing will make your training more robust, even if there is mislabeled data. The result will be a model that generalizes better.\nThis is how label smoothing works in practice: we start with one-hot-encoded labels, then replace all 0s with \\(\\frac{\\epsilon}{N}\\) (that’s the Greek letter epsilon, which is what was used in the paper that introduced label smoothing and is used in the fastai code), where \\(N\\) is the number of classes and \\(\\epsilon\\) is a parameter (usually 0.1, which would mean we are 10% unsure of our labels). Since we want the labels to add up to 1, replace the 1 by \\(1-\\epsilon + \\frac{\\epsilon}{N}\\). This way, we don’t encourage the model to predict something overconfidently. In our Imagenette example where we have 10 classes, the targets become something like (here for a target that corresponds to the index 3):\n[0.01, 0.01, 0.01, 0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]\nIn practice, we don’t want to one-hot encode the labels, and fortunately we won’t need to (the one-hot encoding is just good to explain what label smoothing is and visualize it).\n\nSidebar: Label Smoothing, the Paper\nHere is how the reasoning behind label smoothing was explained in the paper by Christian Szegedy et al.:\n\n: This maximum is not achievable for finite \\(z_k\\) but is approached if \\(z_y\\gg z_k\\) for all \\(k\\neq y\\)—that is, if the logit corresponding to the ground-truth label is much great than all other logits. This, however, can cause two problems. First, it may result in over-fitting: if the model learns to assign full probability to the ground-truth label for each training example, it is not guaranteed to generalize. Second, it encourages the differences between the largest logit and all others to become large, and this, combined with the bounded gradient \\(\\frac{\\partial\\ell}{\\partial z_k}\\), reduces the ability of the model to adapt. Intuitively, this happens because the model becomes too confident about its predictions.\n\nLet’s practice our paper-reading skills to try to interpret this. “This maximum” is refering to the previous part of the paragraph, which talked about the fact that 1 is the value of the label for the positive class. So it’s not possible for any value (except infinity) to result in 1 after sigmoid or softmax. In a paper, you won’t normally see “any value” written; instead it will get a symbol, which in this case is \\(z_k\\). This shorthand is helpful in a paper, because it can be referred to again later and the reader will know what value is being discussed.\nThen it says “if \\(z_y\\gg z_k\\) for all \\(k\\neq y\\).” In this case, the paper immediately follows the math with an English description, which is handy because you can just read that. In the math, the \\(y\\) is refering to the target (\\(y\\) is defined earlier in the paper; sometimes it’s hard to find where symbols are defined, but nearly all papers will define all their symbols somewhere), and \\(z_y\\) is the activation corresponding to the target. So to get close to 1, this activation needs to be much higher than all the others for that prediction.\nNext, consider the statement “if the model learns to assign full probability to the ground-truth label for each training example, it is not guaranteed to generalize.” This is saying that making \\(z_y\\) really big means we’ll need large weights and large activations throughout our model. Large weights lead to “bumpy” functions, where a small change in input results in a big change to predictions. This is really bad for generalization, because it means just one pixel changing a bit could change our prediction entirely!\nFinally, we have “it encourages the differences between the largest logit and all others to become large, and this, combined with the bounded gradient \\(\\frac{\\partial\\ell}{\\partial z_k}\\), reduces the ability of the model to adapt.” The gradient of cross-entropy, remember, is basically output - target. Both output and target are between 0 and 1, so the difference is between -1 and 1, which is why the paper says the gradient is “bounded” (it can’t be infinite). Therefore our SGD steps are bounded too. “Reduces the ability of the model to adapt” means that it is hard for it to be updated in a transfer learning setting. This follows because the difference in loss due to incorrect predictions is unbounded, but we can only take a limited step each time.\n\n\nEnd sidebar\nTo use this in practice, we just have to change the loss function in our call to Learner:\nmodel = xresnet50(n_out=dls.c)\nlearn = Learner(dls, model, loss_func=LabelSmoothingCrossEntropy(), \n                metrics=accuracy)\nlearn.fit_one_cycle(5, 3e-3)\nLike with Mixup, you won’t generally see significant improvements from label smoothing until you train more epochs. Try it yourself and see: how many epochs do you have to train before label smoothing shows an improvement?"
  },
  {
    "objectID": "posts/07_sizing_and_tta.html#conclusion",
    "href": "posts/07_sizing_and_tta.html#conclusion",
    "title": "Training a State-of-the-Art Model",
    "section": "Conclusion",
    "text": "Conclusion\nYou have now seen everything you need to train a state-of-the-art model in computer vision, whether from scratch or using transfer learning. Now all you have to do is experiment on your own problems! See if training longer with Mixup and/or label smoothing avoids overfitting and gives you better results. Try progressive resizing, and test time augmentation.\nMost importantly, remember that if your dataset is big, there is no point prototyping on the whole thing. Find a small subset that is representative of the whole, like we did with Imagenette, and experiment on it.\nIn the next three chapters, we will look at the other applications directly supported by fastai: collaborative filtering, tabular modeling and working with text. We will go back to computer vision in the next section of the book, with a deep dive into convolutional neural networks in &lt;&gt;."
  },
  {
    "objectID": "posts/07_sizing_and_tta.html#questionnaire",
    "href": "posts/07_sizing_and_tta.html#questionnaire",
    "title": "Training a State-of-the-Art Model",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhat is the difference between ImageNet and Imagenette? When is it better to experiment on one versus the other?\nWhat is normalization?\nWhy didn’t we have to care about normalization when using a pretrained model?\nWhat is progressive resizing?\nImplement progressive resizing in your own project. Did it help?\nWhat is test time augmentation? How do you use it in fastai?\nIs using TTA at inference slower or faster than regular inference? Why?\nWhat is Mixup? How do you use it in fastai?\nWhy does Mixup prevent the model from being too confident?\nWhy does training with Mixup for five epochs end up worse than training without Mixup?\nWhat is the idea behind label smoothing?\nWhat problems in your data can label smoothing help with?\nWhen using label smoothing with five categories, what is the target associated with the index 1?\nWhat is the first step to take when you want to prototype quick experiments on a new dataset?\n\n\nFurther Research\n\nUse the fastai documentation to build a function that crops an image to a square in each of the four corners, then implement a TTA method that averages the predictions on a center crop and those four crops. Did it help? Is it better than the TTA method of fastai?\nFind the Mixup paper on arXiv and read it. Pick one or two more recent articles introducing variants of Mixup and read them, then try to implement them on your problem.\nFind the script training Imagenette using Mixup and use it as an example to build a script for a long training on your own project. Execute it and see if it helps.\nRead the sidebar “Label Smoothing, the Paper”, look at the relevant section of the original paper and see if you can follow it. Don’t be afraid to ask for help!"
  },
  {
    "objectID": "posts/05_pet_breeds.html",
    "href": "posts/05_pet_breeds.html",
    "title": "Image Classification",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_pet_breeds]]\nNow that you understand what deep learning is, what it’s for, and how to create and deploy a model, it’s time for us to go deeper! In an ideal world deep learning practitioners wouldn’t have to know every detail of how things work under the hood… But as yet, we don’t live in an ideal world. The truth is, to make your model really work, and work reliably, there are a lot of details you have to get right, and a lot of details that you have to check. This process requires being able to look inside your neural network as it trains, and as it makes predictions, find possible problems, and know how to fix them.\nSo, from here on in the book we are going to do a deep dive into the mechanics of deep learning. What is the architecture of a computer vision model, an NLP model, a tabular model, and so on? How do you create an architecture that matches the needs of your particular domain? How do you get the best possible results from the training process? How do you make things faster? What do you have to change as your datasets change?\nWe will start by repeating the same basic applications that we looked at in the first chapter, but we are going to do two things:\nIn order to do these two things, we will have to learn all of the pieces of the deep learning puzzle. This includes different types of layers, regularization methods, optimizers, how to put layers together into architectures, labeling techniques, and much more. We are not just going to dump all of these things on you, though; we will introduce them progressively as needed, to solve actual problems related to the projects we are working on."
  },
  {
    "objectID": "posts/05_pet_breeds.html#from-dogs-and-cats-to-pet-breeds",
    "href": "posts/05_pet_breeds.html#from-dogs-and-cats-to-pet-breeds",
    "title": "Image Classification",
    "section": "From Dogs and Cats to Pet Breeds",
    "text": "From Dogs and Cats to Pet Breeds\nIn our very first model we learned how to classify dogs versus cats. Just a few years ago this was considered a very challenging task—but today, it’s far too easy! We will not be able to show you the nuances of training models with this problem, because we get a nearly perfect result without worrying about any of the details. But it turns out that the same dataset also allows us to work on a much more challenging problem: figuring out what breed of pet is shown in each image.\nIn &lt;&gt; we presented the applications as already-solved problems. But this is not how things work in real life. We start with some dataset that we know nothing about. We then have to figure out how it is put together, how to extract the data we need from it, and what that data looks like. For the rest of this book we will be showing you how to solve these problems in practice, including all of the intermediate steps necessary to understand the data that you are working with and test your modeling as you go.\nWe already downloaded the Pet dataset, and we can get a path to this dataset using the same code as in &lt;&gt;:\n\n\nShow code\nfrom fastai.vision.all import *\npath = untar_data(URLs.PETS)\n\n\nNow if we are going to understand how to extract the breed of each pet from each image we’re going to need to understand how this data is laid out. Such details of data layout are a vital piece of the deep learning puzzle. Data is usually provided in one of these two ways:\n\nIndividual files representing items of data, such as text documents or images, possibly organized into folders or with filenames representing information about those items\nA table of data, such as in CSV format, where each row is an item which may include filenames providing a connection between the data in the table and data in other formats, such as text documents and images\n\nThere are exceptions to these rules—particularly in domains such as genomics, where there can be binary database formats or even network streams—but overall the vast majority of the datasets you’ll work with will use some combination of these two formats.\nTo see what is in our dataset we can use the ls method:\n\n\nShow code\n#hide\nPath.BASE_PATH = path\n\n\n\n\nShow code\npath.ls()\n\n\n(#3) [Path('annotations'),Path('images'),Path('models')]\n\n\nWe can see that this dataset provides us with images and annotations directories. The website for the dataset tells us that the annotations directory contains information about where the pets are rather than what they are. In this chapter, we will be doing classification, not localization, which is to say that we care about what the pets are, not where they are. Therefore, we will ignore the annotations directory for now. So, let’s have a look inside the images directory:\n\n\nShow code\n(path/\"images\").ls()\n\n\n(#7394) [Path('images/great_pyrenees_173.jpg'),Path('images/wheaten_terrier_46.jpg'),Path('images/Ragdoll_262.jpg'),Path('images/german_shorthaired_3.jpg'),Path('images/american_bulldog_196.jpg'),Path('images/boxer_188.jpg'),Path('images/staffordshire_bull_terrier_173.jpg'),Path('images/basset_hound_71.jpg'),Path('images/staffordshire_bull_terrier_37.jpg'),Path('images/yorkshire_terrier_18.jpg')...]\n\n\nMost functions and methods in fastai that return a collection use a class called L. L can be thought of as an enhanced version of the ordinary Python list type, with added conveniences for common operations. For instance, when we display an object of this class in a notebook it appears in the format shown there. The first thing that is shown is the number of items in the collection, prefixed with a #. You’ll also see in the preceding output that the list is suffixed with an ellipsis. This means that only the first few items are displayed—which is a good thing, because we would not want more than 7,000 filenames on our screen!\nBy examining these filenames, we can see how they appear to be structured. Each filename contains the pet breed, and then an underscore (_), a number, and finally the file extension. We need to create a piece of code that extracts the breed from a single Path. Jupyter notebooks make this easy, because we can gradually build up something that works, and then use it for the entire dataset. We do have to be careful to not make too many assumptions at this point. For instance, if you look carefully you may notice that some of the pet breeds contain multiple words, so we cannot simply break at the first _ character that we find. To allow us to test our code, let’s pick out one of these filenames:\n\n\nShow code\nfname = (path/\"images\").ls()[0]\n\n\nThe most powerful and flexible way to extract information from strings like this is to use a regular expression, also known as a regex. A regular expression is a special string, written in the regular expression language, which specifies a general rule for deciding if another string passes a test (i.e., “matches” the regular expression), and also possibly for plucking a particular part or parts out of that other string.\nIn this case, we need a regular expression that extracts the pet breed from the filename.\nWe do not have the space to give you a complete regular expression tutorial here, but there are many excellent ones online and we know that many of you will already be familiar with this wonderful tool. If you’re not, that is totally fine—this is a great opportunity for you to rectify that! We find that regular expressions are one of the most useful tools in our programming toolkit, and many of our students tell us that this is one of the things they are most excited to learn about. So head over to Google and search for “regular expressions tutorial” now, and then come back here after you’ve had a good look around. The book’s website also provides a list of our favorites.\n\na: Not only are regular expressions dead handy, but they also have interesting roots. They are “regular” because they were originally examples of a “regular” language, the lowest rung within the Chomsky hierarchy, a grammar classification developed by linguist Noam Chomsky, who also wrote Syntactic Structures, the pioneering work searching for the formal grammar underlying human language. This is one of the charms of computing: it may be that the hammer you reach for every day in fact came from a spaceship.\n\nWhen you are writing a regular expression, the best way to start is just to try it against one example at first. Let’s use the findall method to try a regular expression against the filename of the fname object:\n\n\nShow code\nre.findall(r'(.+)_\\d+.jpg$', fname.name)\n\n\n['great_pyrenees']\n\n\nThis regular expression plucks out all the characters leading up to the last underscore character, as long as the subsequence characters are numerical digits and then the JPEG file extension.\nNow that we confirmed the regular expression works for the example, let’s use it to label the whole dataset. fastai comes with many classes to help with labeling. For labeling with regular expressions, we can use the RegexLabeller class. In this example we use the data block API we saw in &lt;&gt; (in fact, we nearly always use the data block API—it’s so much more flexible than the simple factory methods we saw in &lt;&gt;):\n\n\nShow code\npets = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                 get_items=get_image_files, \n                 splitter=RandomSplitter(seed=42),\n                 get_y=using_attr(RegexLabeller(r'(.+)_\\d+.jpg$'), 'name'),\n                 item_tfms=Resize(460),\n                 batch_tfms=aug_transforms(size=224, min_scale=0.75))\ndls = pets.dataloaders(path/\"images\")\n\n\nOne important piece of this DataBlock call that we haven’t seen before is in these two lines:\nitem_tfms=Resize(460),\nbatch_tfms=aug_transforms(size=224, min_scale=0.75)\nThese lines implement a fastai data augmentation strategy which we call presizing. Presizing is a particular way to do image augmentation that is designed to minimize data destruction while maintaining good performance."
  },
  {
    "objectID": "posts/05_pet_breeds.html#presizing",
    "href": "posts/05_pet_breeds.html#presizing",
    "title": "Image Classification",
    "section": "Presizing",
    "text": "Presizing\nWe need our images to have the same dimensions, so that they can collate into tensors to be passed to the GPU. We also want to minimize the number of distinct augmentation computations we perform. The performance requirement suggests that we should, where possible, compose our augmentation transforms into fewer transforms (to reduce the number of computations and the number of lossy operations) and transform the images into uniform sizes (for more efficient processing on the GPU).\nThe challenge is that, if performed after resizing down to the augmented size, various common data augmentation transforms might introduce spurious empty zones, degrade data, or both. For instance, rotating an image by 45 degrees fills corner regions of the new bounds with emptiness, which will not teach the model anything. Many rotation and zooming operations will require interpolating to create pixels. These interpolated pixels are derived from the original image data but are still of lower quality.\nTo work around these challenges, presizing adopts two strategies that are shown in &lt;&gt;:\n\nResize images to relatively “large” dimensions—that is, dimensions significantly larger than the target training dimensions.\nCompose all of the common augmentation operations (including a resize to the final target size) into one, and perform the combined operation on the GPU only once at the end of processing, rather than performing the operations individually and interpolating multiple times.\n\nThe first step, the resize, creates images large enough that they have spare margin to allow further augmentation transforms on their inner regions without creating empty zones. This transformation works by resizing to a square, using a large crop size. On the training set, the crop area is chosen randomly, and the size of the crop is selected to cover the entire width or height of the image, whichever is smaller.\nIn the second step, the GPU is used for all data augmentation, and all of the potentially destructive operations are done together, with a single interpolation at the end.\n\nThis picture shows the two steps:\n\nCrop full width or height: This is in item_tfms, so it’s applied to each individual image before it is copied to the GPU. It’s used to ensure all images are the same size. On the training set, the crop area is chosen randomly. On the validation set, the center square of the image is always chosen.\nRandom crop and augment: This is in batch_tfms, so it’s applied to a batch all at once on the GPU, which means it’s fast. On the validation set, only the resize to the final size needed for the model is done here. On the training set, the random crop and any other augmentations are done first.\n\nTo implement this process in fastai you use Resize as an item transform with a large size, and RandomResizedCrop as a batch transform with a smaller size. RandomResizedCrop will be added for you if you include the min_scale parameter in your aug_transforms function, as was done in the DataBlock call in the previous section. Alternatively, you can use pad or squish instead of crop (the default) for the initial Resize.\n&lt;&gt; shows the difference between an image that has been zoomed, interpolated, rotated, and then interpolated again (which is the approach used by all other deep learning libraries), shown here on the right, and an image that has been zoomed and rotated as one operation and then interpolated just once on the left (the fastai approach), shown here on the left.\n\n\nShow code\n#hide_input\n#id interpolations\n#caption A comparison of fastai's data augmentation strategy (left) and the traditional approach (right).\ndblock1 = DataBlock(blocks=(ImageBlock(), CategoryBlock()),\n                   get_y=parent_label,\n                   item_tfms=Resize(460))\n# Place an image in the 'images/grizzly.jpg' subfolder where this notebook is located before running this\ndls1 = dblock1.dataloaders([(Path.cwd()/'images'/'grizzly.jpg')]*100, bs=8)\ndls1.train.get_idxs = lambda: Inf.ones\nx,y = dls1.valid.one_batch()\n_,axs = subplots(1, 2)\n\nx1 = TensorImage(x.clone())\nx1 = x1.affine_coord(sz=224)\nx1 = x1.rotate(draw=30, p=1.)\nx1 = x1.zoom(draw=1.2, p=1.)\nx1 = x1.warp(draw_x=-0.2, draw_y=0.2, p=1.)\n\ntfms = setup_aug_tfms([Rotate(draw=30, p=1, size=224), Zoom(draw=1.2, p=1., size=224),\n                       Warp(draw_x=-0.2, draw_y=0.2, p=1., size=224)])\nx = Pipeline(tfms)(x)\n#x.affine_coord(coord_tfm=coord_tfm, sz=size, mode=mode, pad_mode=pad_mode)\nTensorImage(x[0]).show(ctx=axs[0])\nTensorImage(x1[0]).show(ctx=axs[1]);\n\n\n\n\n\n\n\n\n\nYou can see that the image on the right is less well defined and has reflection padding artifacts in the bottom-left corner; also, the grass at the top left has disappeared entirely. We find that in practice using presizing significantly improves the accuracy of models, and often results in speedups too.\nThe fastai library also provides simple ways to check your data looks right before training a model, which is an extremely important step. We’ll look at those next.\n\nChecking and Debugging a DataBlock\nWe can never just assume that our code is working perfectly. Writing a DataBlock is just like writing a blueprint. You will get an error message if you have a syntax error somewhere in your code, but you have no guarantee that your template is going to work on your data source as you intend. So, before training a model you should always check your data. You can do this using the show_batch method:\n\n\nShow code\ndls.show_batch(nrows=1, ncols=3)\n\n\n\n\n\n\n\n\n\nTake a look at each image, and check that each one seems to have the correct label for that breed of pet. Often, data scientists work with data with which they are not as familiar as domain experts may be: for instance, I actually don’t know what a lot of these pet breeds are. Since I am not an expert on pet breeds, I would use Google images at this point to search for a few of these breeds, and make sure the images look similar to what I see in this output.\nIf you made a mistake while building your DataBlock, it is very likely you won’t see it before this step. To debug this, we encourage you to use the summary method. It will attempt to create a batch from the source you give it, with a lot of details. Also, if it fails, you will see exactly at which point the error happens, and the library will try to give you some help. For instance, one common mistake is to forget to use a Resize transform, so you end up with pictures of different sizes and are not able to batch them. Here is what the summary would look like in that case (note that the exact text may have changed since the time of writing, but it will give you an idea):\n\n\nShow code\n#hide_output\npets1 = DataBlock(blocks = (ImageBlock, CategoryBlock),\n                 get_items=get_image_files, \n                 splitter=RandomSplitter(seed=42),\n                 get_y=using_attr(RegexLabeller(r'(.+)_\\d+.jpg$'), 'name'))\npets1.summary(path/\"images\")\n\n\nSetting-up type transforms pipelines\nCollecting items from /home/jhoward/.fastai/data/oxford-iiit-pet/images\nFound 7390 items\n2 datasets of sizes 5912,1478\nSetting up Pipeline: PILBase.create\nSetting up Pipeline: partial -&gt; Categorize\n\nBuilding one sample\n  Pipeline: PILBase.create\n    starting from\n      /home/jhoward/.fastai/data/oxford-iiit-pet/images/american_pit_bull_terrier_31.jpg\n    applying PILBase.create gives\n      PILImage mode=RGB size=500x414\n  Pipeline: partial -&gt; Categorize\n    starting from\n      /home/jhoward/.fastai/data/oxford-iiit-pet/images/american_pit_bull_terrier_31.jpg\n    applying partial gives\n      american_pit_bull_terrier\n    applying Categorize gives\n      TensorCategory(13)\n\nFinal sample: (PILImage mode=RGB size=500x414, TensorCategory(13))\n\n\nSetting up after_item: Pipeline: ToTensor\nSetting up before_batch: Pipeline: \nSetting up after_batch: Pipeline: IntToFloatTensor\n\nBuilding one batch\nApplying item_tfms to the first sample:\n  Pipeline: ToTensor\n    starting from\n      (PILImage mode=RGB size=500x414, TensorCategory(13))\n    applying ToTensor gives\n      (TensorImage of size 3x414x500, TensorCategory(13))\n\nAdding the next 3 samples\n\nNo before_batch transform to apply\n\nCollating items in a batch\nError! It's not possible to collate your items in a batch\nCould not collate the 0-th members of your tuples because got the following shapes\ntorch.Size([3, 414, 500]),torch.Size([3, 375, 500]),torch.Size([3, 500, 281]),torch.Size([3, 203, 300])\n\n\n\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-11-8c0a3d421ca2&gt; in &lt;module&gt;\n      4                  splitter=RandomSplitter(seed=42),\n      5                  get_y=using_attr(RegexLabeller(r'(.+)_\\d+.jpg$'), 'name'))\n----&gt; 6 pets1.summary(path/\"images\")\n\n~/git/fastai/fastai/data/block.py in summary(self, source, bs, show_batch, **kwargs)\n    182         why = _find_fail_collate(s)\n    183         print(\"Make sure all parts of your samples are tensors of the same size\" if why is None else why)\n--&gt; 184         raise e\n    185 \n    186     if len([f for f in dls.train.after_batch.fs if f.name != 'noop'])!=0:\n\n~/git/fastai/fastai/data/block.py in summary(self, source, bs, show_batch, **kwargs)\n    176     print(\"\\nCollating items in a batch\")\n    177     try:\n--&gt; 178         b = dls.train.create_batch(s)\n    179         b = retain_types(b, s[0] if is_listy(s) else s)\n    180     except Exception as e:\n\n~/git/fastai/fastai/data/load.py in create_batch(self, b)\n    125     def retain(self, res, b):  return retain_types(res, b[0] if is_listy(b) else b)\n    126     def create_item(self, s):  return next(self.it) if s is None else self.dataset[s]\n--&gt; 127     def create_batch(self, b): return (fa_collate,fa_convert)[self.prebatched](b)\n    128     def do_batch(self, b): return self.retain(self.create_batch(self.before_batch(b)), b)\n    129     def to(self, device): self.device = device\n\n~/git/fastai/fastai/data/load.py in fa_collate(t)\n     44     b = t[0]\n     45     return (default_collate(t) if isinstance(b, _collate_types)\n---&gt; 46             else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence)\n     47             else default_collate(t))\n     48 \n\n~/git/fastai/fastai/data/load.py in &lt;listcomp&gt;(.0)\n     44     b = t[0]\n     45     return (default_collate(t) if isinstance(b, _collate_types)\n---&gt; 46             else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence)\n     47             else default_collate(t))\n     48 \n\n~/git/fastai/fastai/data/load.py in fa_collate(t)\n     43 def fa_collate(t):\n     44     b = t[0]\n---&gt; 45     return (default_collate(t) if isinstance(b, _collate_types)\n     46             else type(t[0])([fa_collate(s) for s in zip(*t)]) if isinstance(b, Sequence)\n     47             else default_collate(t))\n\n~/anaconda3/lib/python3.7/site-packages/torch/utils/data/_utils/collate.py in default_collate(batch)\n     53             storage = elem.storage()._new_shared(numel)\n     54             out = elem.new(storage)\n---&gt; 55         return torch.stack(batch, 0, out=out)\n     56     elif elem_type.__module__ == 'numpy' and elem_type.__name__ != 'str_' \\\n     57             and elem_type.__name__ != 'string_':\n\nRuntimeError: invalid argument 0: Sizes of tensors must match except in dimension 0. Got 414 and 375 in dimension 2 at /opt/conda/conda-bld/pytorch_1579022060824/work/aten/src/TH/generic/THTensor.cpp:612\n\n\n\nSetting-up type transforms pipelines\nCollecting items from /home/sgugger/.fastai/data/oxford-iiit-pet/images\nFound 7390 items\n2 datasets of sizes 5912,1478\nSetting up Pipeline: PILBase.create\nSetting up Pipeline: partial -&gt; Categorize\n\nBuilding one sample\n  Pipeline: PILBase.create\n    starting from\n      /home/sgugger/.fastai/data/oxford-iiit-pet/images/american_bulldog_83.jpg\n    applying PILBase.create gives\n      PILImage mode=RGB size=375x500\n  Pipeline: partial -&gt; Categorize\n    starting from\n      /home/sgugger/.fastai/data/oxford-iiit-pet/images/american_bulldog_83.jpg\n    applying partial gives\n      american_bulldog\n    applying Categorize gives\n      TensorCategory(12)\n\nFinal sample: (PILImage mode=RGB size=375x500, TensorCategory(12))\n\nSetting up after_item: Pipeline: ToTensor\nSetting up before_batch: Pipeline: \nSetting up after_batch: Pipeline: IntToFloatTensor\n\nBuilding one batch\nApplying item_tfms to the first sample:\n  Pipeline: ToTensor\n    starting from\n      (PILImage mode=RGB size=375x500, TensorCategory(12))\n    applying ToTensor gives\n      (TensorImage of size 3x500x375, TensorCategory(12))\n\nAdding the next 3 samples\n\nNo before_batch transform to apply\n\nCollating items in a batch\nError! It's not possible to collate your items in a batch\nCould not collate the 0-th members of your tuples because got the following \nshapes:\ntorch.Size([3, 500, 375]),torch.Size([3, 375, 500]),torch.Size([3, 333, 500]),\ntorch.Size([3, 375, 500])\nYou can see exactly how we gathered the data and split it, how we went from a filename to a sample (the tuple (image, category)), then what item transforms were applied and how it failed to collate those samples in a batch (because of the different shapes).\nOnce you think your data looks right, we generally recommend the next step should be using it to train a simple model. We often see people put off the training of an actual model for far too long. As a result, they don’t actually find out what their baseline results look like. Perhaps your problem doesn’t need lots of fancy domain-specific engineering. Or perhaps the data doesn’t seem to train the model at all. These are things that you want to know as soon as possible. For this initial test, we’ll use the same simple model that we used in &lt;&gt;:\n\n\nShow code\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlearn.fine_tune(2)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.551305\n0.322132\n0.106225\n00:19\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.529473\n0.312148\n0.095399\n00:23\n\n\n1\n0.330207\n0.245883\n0.080514\n00:24\n\n\n\n\n\nAs we’ve briefly discussed before, the table shown when we fit a model shows us the results after each epoch of training. Remember, an epoch is one complete pass through all of the images in the data. The columns shown are the average loss over the items of the training set, the loss on the validation set, and any metrics that we requested—in this case, the error rate.\nRemember that loss is whatever function we’ve decided to use to optimize the parameters of our model. But we haven’t actually told fastai what loss function we want to use. So what is it doing? fastai will generally try to select an appropriate loss function based on what kind of data and model you are using. In this case we have image data and a categorical outcome, so fastai will default to using cross-entropy loss."
  },
  {
    "objectID": "posts/05_pet_breeds.html#cross-entropy-loss",
    "href": "posts/05_pet_breeds.html#cross-entropy-loss",
    "title": "Image Classification",
    "section": "Cross-Entropy Loss",
    "text": "Cross-Entropy Loss\nCross-entropy loss is a loss function that is similar to the one we used in the previous chapter, but (as we’ll see) has two benefits:\n\nIt works even when our dependent variable has more than two categories.\nIt results in faster and more reliable training.\n\nIn order to understand how cross-entropy loss works for dependent variables with more than two categories, we first have to understand what the actual data and activations that are seen by the loss function look like.\n\nViewing Activations and Labels\nLet’s take a look at the activations of our model. To actually get a batch of real data from our DataLoaders, we can use the one_batch method:\n\n\nShow code\nx,y = dls.one_batch()\n\n\nAs you see, this returns the dependent and independent variables, as a mini-batch. Let’s see what is actually contained in our dependent variable:\n\n\nShow code\ny\n\n\nTensorCategory([ 0,  5, 23, 36,  5, 20, 29, 34, 33, 32, 31, 24, 12, 36,  8, 26, 30,  2, 12, 17,  7, 23, 12, 29, 21,  4, 35, 33,  0, 20, 26, 30,  3,  6, 36,  2, 17, 32, 11,  6,  3, 30,  5, 26, 26, 29,  7, 36,\n        31, 26, 26,  8, 13, 30, 11, 12, 36, 31, 34, 20, 15,  8,  8, 23], device='cuda:5')\n\n\nOur batch size is 64, so we have 64 rows in this tensor. Each row is a single integer between 0 and 36, representing our 37 possible pet breeds. We can view the predictions (that is, the activations of the final layer of our neural network) using Learner.get_preds. This function either takes a dataset index (0 for train and 1 for valid) or an iterator of batches. Thus, we can pass it a simple list with our batch to get our predictions. It returns predictions and targets by default, but since we already have the targets, we can effectively ignore them by assigning to the special variable _:\n\n\nShow code\npreds,_ = learn.get_preds(dl=[(x,y)])\npreds[0]\n\n\n\n\n\ntensor([9.9911e-01, 5.0433e-05, 3.7515e-07, 8.8590e-07, 8.1794e-05, 1.8991e-05, 9.9280e-06, 5.4656e-07, 6.7920e-06, 2.3486e-04, 3.7872e-04, 2.0796e-05, 4.0443e-07, 1.6933e-07, 2.0502e-07, 3.1354e-08,\n        9.4115e-08, 2.9782e-06, 2.0243e-07, 8.5262e-08, 1.0900e-07, 1.0175e-07, 4.4780e-09, 1.4285e-07, 1.0718e-07, 8.1411e-07, 3.6618e-07, 4.0950e-07, 3.8525e-08, 2.3660e-07, 5.3747e-08, 2.5448e-07,\n        6.5860e-08, 8.0937e-05, 2.7464e-07, 5.6760e-07, 1.5462e-08])\n\n\nThe actual predictions are 37 probabilities between 0 and 1, which add up to 1 in total:\n\n\nShow code\nlen(preds[0]),preds[0].sum()\n\n\n(37, tensor(1.0000))\n\n\nTo transform the activations of our model into predictions like this, we used something called the softmax activation function.\n\n\nSoftmax\nIn our classification model, we use the softmax activation function in the final layer to ensure that the activations are all between 0 and 1, and that they sum to 1.\nSoftmax is similar to the sigmoid function, which we saw earlier. As a reminder sigmoid looks like this:\n\n\nShow code\nplot_function(torch.sigmoid, min=-4,max=4)\n\n\n\n\n\n\n\n\n\nWe can apply this function to a single column of activations from a neural network, and get back a column of numbers between 0 and 1, so it’s a very useful activation function for our final layer.\nNow think about what happens if we want to have more categories in our target (such as our 37 pet breeds). That means we’ll need more activations than just a single column: we need an activation per category. We can create, for instance, a neural net that predicts 3s and 7s that returns two activations, one for each class—this will be a good first step toward creating the more general approach. Let’s just use some random numbers with a standard deviation of 2 (so we multiply randn by 2) for this example, assuming we have 6 images and 2 possible categories (where the first column represents 3s and the second is 7s):\n\n\nShow code\n#hide\ntorch.random.manual_seed(42);\n\n\n\n\nShow code\nacts = torch.randn((6,2))*2\nacts\n\n\ntensor([[ 0.6734,  0.2576],\n        [ 0.4689,  0.4607],\n        [-2.2457, -0.3727],\n        [ 4.4164, -1.2760],\n        [ 0.9233,  0.5347],\n        [ 1.0698,  1.6187]])\n\n\nWe can’t just take the sigmoid of this directly, since we don’t get rows that add to 1 (i.e., we want the probability of being a 3 plus the probability of being a 7 to add up to 1):\n\n\nShow code\nacts.sigmoid()\n\n\ntensor([[0.6623, 0.5641],\n        [0.6151, 0.6132],\n        [0.0957, 0.4079],\n        [0.9881, 0.2182],\n        [0.7157, 0.6306],\n        [0.7446, 0.8346]])\n\n\nIn &lt;&gt;, our neural net created a single activation per image, which we passed through the sigmoid function. That single activation represented the model’s confidence that the input was a 3. Binary problems are a special case of classification problems, because the target can be treated as a single boolean value, as we did in mnist_loss. But binary problems can also be thought of in the context of the more general group of classifiers with any number of categories: in this case, we happen to have two categories. As we saw in the bear classifier, our neural net will return one activation per category.\nSo in the binary case, what do those activations really indicate? A single pair of activations simply indicates the relative confidence of the input being a 3 versus being a 7. The overall values, whether they are both high, or both low, don’t matter—all that matters is which is higher, and by how much.\nWe would expect that since this is just another way of representing the same problem, that we would be able to use sigmoid directly on the two-activation version of our neural net. And indeed we can! We can just take the difference between the neural net activations, because that reflects how much more sure we are of the input being a 3 than a 7, and then take the sigmoid of that:\n\n\nShow code\n(acts[:,0]-acts[:,1]).sigmoid()\n\n\ntensor([0.6025, 0.5021, 0.1332, 0.9966, 0.5959, 0.3661])\n\n\nThe second column (the probability of it being a 7) will then just be that value subtracted from 1. Now, we need a way to do all this that also works for more than two columns. It turns out that this function, called softmax, is exactly that:\ndef softmax(x): return exp(x) / exp(x).sum(dim=1, keepdim=True)\n\njargon: Exponential function (exp): Literally defined as e**x, where e is a special number approximately equal to 2.718. It is the inverse of the natural logarithm function. Note that exp is always positive, and it increases very rapidly!\n\nLet’s check that softmax returns the same values as sigmoid for the first column, and those values subtracted from 1 for the second column:\n\n\nShow code\nsm_acts = torch.softmax(acts, dim=1)\nsm_acts\n\n\ntensor([[0.6025, 0.3975],\n        [0.5021, 0.4979],\n        [0.1332, 0.8668],\n        [0.9966, 0.0034],\n        [0.5959, 0.4041],\n        [0.3661, 0.6339]])\n\n\nsoftmax is the multi-category equivalent of sigmoid—we have to use it any time we have more than two categories and the probabilities of the categories must add to 1, and we often use it even when there are just two categories, just to make things a bit more consistent. We could create other functions that have the properties that all activations are between 0 and 1, and sum to 1; however, no other function has the same relationship to the sigmoid function, which we’ve seen is smooth and symmetric. Also, we’ll see shortly that the softmax function works well hand-in-hand with the loss function we will look at in the next section.\nIf we have three output activations, such as in our bear classifier, calculating softmax for a single bear image would then look like something like &lt;&gt;.\n\nWhat does this function do in practice? Taking the exponential ensures all our numbers are positive, and then dividing by the sum ensures we are going to have a bunch of numbers that add up to 1. The exponential also has a nice property: if one of the numbers in our activations x is slightly bigger than the others, the exponential will amplify this (since it grows, well… exponentially), which means that in the softmax, that number will be closer to 1.\nIntuitively, the softmax function really wants to pick one class among the others, so it’s ideal for training a classifier when we know each picture has a definite label. (Note that it may be less ideal during inference, as you might want your model to sometimes tell you it doesn’t recognize any of the classes that it has seen during training, and not pick a class because it has a slightly bigger activation score. In this case, it might be better to train a model using multiple binary output columns, each using a sigmoid activation.)\nSoftmax is the first part of the cross-entropy loss—the second part is log likelihood.\n\n\nLog Likelihood\nWhen we calculated the loss for our MNIST example in the last chapter we used:\ndef mnist_loss(inputs, targets):\n    inputs = inputs.sigmoid()\n    return torch.where(targets==1, 1-inputs, inputs).mean()\nJust as we moved from sigmoid to softmax, we need to extend the loss function to work with more than just binary classification—it needs to be able to classify any number of categories (in this case, we have 37 categories). Our activations, after softmax, are between 0 and 1, and sum to 1 for each row in the batch of predictions. Our targets are integers between 0 and 36. Furthermore, cross-entropy loss generalizes our binary classification loss and allows for more than one correct label per example (which is called multi-label classificaiton, which we will discuss in Chapter 6).\nIn the binary case, we used torch.where to select between inputs and 1-inputs. When we treat a binary classification as a general classification problem with two categories, it actually becomes even easier, because (as we saw in the previous section) we now have two columns, containing the equivalent of inputs and 1-inputs. Since there is only one correct label per example, all we need to do is select the appropriate column (as opposed to multiplying multiple probabilities). Let’s try to implement this in PyTorch. For our synthetic 3s and 7s example, let’s say these are our labels:\n\n\nShow code\ntarg = tensor([0,1,0,1,1,0])\n\n\nand these are the softmax activations:\n\n\nShow code\nsm_acts\n\n\ntensor([[0.6025, 0.3975],\n        [0.5021, 0.4979],\n        [0.1332, 0.8668],\n        [0.9966, 0.0034],\n        [0.5959, 0.4041],\n        [0.3661, 0.6339]])\n\n\nThen for each item of targ we can use that to select the appropriate column of sm_acts using tensor indexing, like so:\n\n\nShow code\nidx = range(6)\nsm_acts[idx, targ]\n\n\ntensor([0.6025, 0.4979, 0.1332, 0.0034, 0.4041, 0.3661])\n\n\nTo see exactly what’s happening here, let’s put all the columns together in a table. Here, the first two columns are our activations, then we have the targets and the row index. We explain the last column, result below:\n\n\nShow code\n#hide_input\nfrom IPython.display import HTML\ndf = pd.DataFrame(sm_acts, columns=[\"3\",\"7\"])\ndf['targ'] = targ\ndf['idx'] = idx\ndf['result'] = sm_acts[range(6), targ]\nt = df.style.hide_index()\n#To have html code compatible with our script\nhtml = t._repr_html_().split('&lt;/style&gt;')[1]\nhtml = re.sub(r'&lt;table id=\"([^\"]+)\"\\s*&gt;', r'&lt;table &gt;', html)\ndisplay(HTML(html))\n\n\n\n\n\n3\n7\ntarg\nidx\nresult\n\n\n\n\n0.602469\n0.397531\n0\n0\n0.602469\n\n\n0.502065\n0.497935\n1\n1\n0.497935\n\n\n0.133188\n0.866811\n0\n2\n0.133188\n\n\n0.996640\n0.003360\n1\n3\n0.003360\n\n\n0.595949\n0.404051\n1\n4\n0.404051\n\n\n0.366118\n0.633882\n0\n5\n0.366118\n\n\n\n\n\nLooking at this table, you can see that the result column can be calculated by taking the targ and idx columns as indices into the two-column matrix containing the 3 and 7 columns. That’s what sm_acts[idx, targ] is actually doing. The really interesting thing here is that this actually works just as well with more than two columns. To see this, consider what would happen if we added an activation column for every digit (0 through 9), and then targ contained a number from 0 to 9.\nPyTorch provides a function that does exactly the same thing as sm_acts[range(n), targ] (except it takes the negative, because when applying the log afterward, we will have negative numbers), called nll_loss (NLL stands for negative log likelihood):\n\n\nShow code\n-sm_acts[idx, targ]\n\n\ntensor([-0.6025, -0.4979, -0.1332, -0.0034, -0.4041, -0.3661])\n\n\n\n\nShow code\nF.nll_loss(sm_acts, targ, reduction='none')\n\n\ntensor([-0.6025, -0.4979, -0.1332, -0.0034, -0.4041, -0.3661])\n\n\nDespite its name, this PyTorch function does not take the log. We’ll see why in the next section, but first, let’s see why taking the logarithm can be useful.\n\nwarning: Confusing Name, Beware: The nll in nll_loss stands for “negative log likelihood,” but it doesn’t actually take the log at all! It assumes you have already taken the log. PyTorch has a function called log_softmax that combines log and softmax in a fast and accurate way. nll_loss is designed to be used after log_softmax.\n\n\nTaking the Log\nRecall that cross entropy loss may involve the multiplication of many numbers. Multiplying lots of negative numbers together can cause problems like numerical underflow in computers. Therefore, we want to transform these probabilities to larger values so we can perform mathematical operations on them. There is a mathematical function that does exactly this: the logarithm (available as torch.log). It is not defined for numbers less than 0, and looks like this between 0 and 1:\n\n\nShow code\nplot_function(torch.log, min=0,max=1, ty='log(x)', tx='x')\n\n\n\n\n\n\n\n\n\nAdditionally, we want to ensure our model is able to detect differences between small numbers. For example, consider the probabilities of .01 and .001. Indeed, those numbers are very close together—but in another sense, 0.01 is 10 times more confident than 0.001. By taking the log of our probabilities, we prevent these important differences from being ignored.\nDoes “logarithm” ring a bell? The logarithm function has this identity:\ny = b**a\na = log(y,b)\nIn this case, we’re assuming that log(y,b) returns log y base b. However, PyTorch actually doesn’t define log this way: log in Python uses the special number e (2.718…) as the base.\nPerhaps a logarithm is something that you have not thought about for the last 20 years or so. But it’s a mathematical idea that is going to be really critical for many things in deep learning, so now would be a great time to refresh your memory. The key thing to know about logarithms is this relationship:\nlog(a*b) = log(a)+log(b)\nWhen we see it in that format, it looks a bit boring; but think about what this really means. It means that logarithms increase linearly when the underlying signal increases exponentially or multiplicatively. This is used, for instance, in the Richter scale of earthquake severity, and the dB scale of noise levels. It’s also often used on financial charts, where we want to show compound growth rates more clearly. Computer scientists love using logarithms, because it means that multiplication, which can create really really large and really really small numbers, can be replaced by addition, which is much less likely to result in scales that are difficult for our computers to handle.\nObserve that the log of a number approaches negative infinity as the number approaches zero. In our case, since the result relfects the predicted probability of the correct label, we want our loss function to return a small value when the prediction is “good” (closer to 1) and a large value when the prediction is “bad” (closer to 0). We can achieve this by taking the negative of the log:\n\n\nShow code\nplot_function(lambda x: -1*torch.log(x), min=0,max=1, tx='x', ty='- log(x)', title = 'Log Loss when true label = 1')\n\n\n\n\n\n\n\n\n\n\ns: It’s not just computer scientists that love logs! Until computers came along, engineers and scientists used a special ruler called a “slide rule” that did multiplication by adding logarithms. Logarithms are widely used in physics, for multiplying very big or very small numbers, and many other fields.\n\nLet’s go ahead and update our previous table with an additional column, loss to reflect this loss function:\n\n\nShow code\n#hide_input\nfrom IPython.display import HTML\ndf['loss'] = -torch.log(tensor(df['result']))\nt = df.style.hide_index()\n#To have html code compatible with our script\nhtml = t._repr_html_().split('&lt;/style&gt;')[1]\nhtml = re.sub(r'&lt;table id=\"([^\"]+)\"\\s*&gt;', r'&lt;table &gt;', html)\ndisplay(HTML(html))\n\n\n\n\n\n3\n7\ntarg\nidx\nresult\nloss\n\n\n\n\n0.602469\n0.397531\n0\n0\n0.602469\n0.506720\n\n\n0.502065\n0.497935\n1\n1\n0.497935\n0.697285\n\n\n0.133188\n0.866811\n0\n2\n0.133188\n2.015990\n\n\n0.996640\n0.003360\n1\n3\n0.003360\n5.695763\n\n\n0.595949\n0.404051\n1\n4\n0.404051\n0.906213\n\n\n0.366118\n0.633882\n0\n5\n0.366118\n1.004798\n\n\n\n\n\nNotice how the loss is very large in the third and fourth rows where the predictions are confident and wrong, or in other words have high probabilities on the wrong class. One benefit of using the log to calculate the loss is that our loss function penalizes predictions that are both confident and wrong. This kind of penalty works well in practice to aid in more effective model training.\n\ns: There are other loss functions such as focal loss that allow you control this penalty with a parameter. We do not discuss that loss function in this book.\n\nWe’re calculating the loss from the column containing the correct label. Because there is only one “right” answer per example, we don’t need to consider the other columns, because by the definition of softmax, they add up to 1 minus the activation corresponding to the correct label. As long as the activation columns sum to 1 (as they will, if we use softmax), then we’ll have a loss function that shows how well we’re predicting each digit. Therefore, making the activation for the correct label as high as possible must mean we’re also decreasing the activations of the remaining columns.\n\n\n\nNegative Log Likelihood\nTaking the mean of the negative log of our probabilities (taking the mean of the loss column of our table) gives us the negative log likelihood loss, which is another name for cross-entropy loss. Recall that PyTorch’s nll_loss assumes that you already took the log of the softmax, so it doesn’t actually do the logarithm for you.\nWhen we first take the softmax, and then the log likelihood of that, that combination is called cross-entropy loss. In PyTorch, this is available as nn.CrossEntropyLoss (which, in practice, actually does log_softmax and then nll_loss):\n\n\nShow code\nloss_func = nn.CrossEntropyLoss()\n\n\nAs you see, this is a class. Instantiating it gives you an object which behaves like a function:\n\n\nShow code\nloss_func(acts, targ)\n\n\ntensor(1.8045)\n\n\nAll PyTorch loss functions are provided in two forms, the class just shown above, and also a plain functional form, available in the F namespace:\n\n\nShow code\nF.cross_entropy(acts, targ)\n\n\ntensor(1.8045)\n\n\nEither one works fine and can be used in any situation. We’ve noticed that most people tend to use the class version, and that’s more often used in PyTorch’s official docs and examples, so we’ll tend to use that too.\nBy default PyTorch loss functions take the mean of the loss of all items. You can use reduction='none' to disable that:\n\n\nShow code\nnn.CrossEntropyLoss(reduction='none')(acts, targ)\n\n\ntensor([0.5067, 0.6973, 2.0160, 5.6958, 0.9062, 1.0048])\n\n\nYou will notice these values match the loss column in our table exactly.\n\ns: An interesting feature about cross-entropy loss appears when we consider its gradient. The gradient of cross_entropy(a,b) is just softmax(a)-b. Since softmax(a) is just the final activation of the model, that means that the gradient is proportional to the difference between the prediction and the target. This is the same as mean squared error in regression (assuming there’s no final activation function such as that added by y_range), since the gradient of (a-b)**2 is 2*(a-b). Because the gradient is linear, that means we won’t see sudden jumps or exponential increases in gradients, which should lead to smoother training of models.\n\nWe have now seen all the pieces hidden behind our loss function. But while this puts a number on how well (or badly) our model is doing, it does nothing to help us know if it’s actually any good. Let’s now see some ways to interpret our model’s predictions."
  },
  {
    "objectID": "posts/05_pet_breeds.html#model-interpretation",
    "href": "posts/05_pet_breeds.html#model-interpretation",
    "title": "Image Classification",
    "section": "Model Interpretation",
    "text": "Model Interpretation\nIt’s very hard to interpret loss functions directly, because they are designed to be things computers can differentiate and optimize, not things that people can understand. That’s why we have metrics. These are not used in the optimization process, but just to help us poor humans understand what’s going on. In this case, our accuracy is looking pretty good already! So where are we making mistakes?\nWe saw in &lt;&gt; that we can use a confusion matrix to see where our model is doing well, and where it’s doing badly:\n\n\nShow code\n#width 600\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix(figsize=(12,12), dpi=60)\n\n\n\n\n\n\n\n\n\n\n\n\nOh dear—in this case, a confusion matrix is very hard to read. We have 37 different breeds of pet, which means we have 37×37 entries in this giant matrix! Instead, we can use the most_confused method, which just shows us the cells of the confusion matrix with the most incorrect predictions (here, with at least 5 or more):\n\n\nShow code\ninterp.most_confused(min_val=5)\n\n\n[('american_pit_bull_terrier', 'staffordshire_bull_terrier', 10),\n ('Ragdoll', 'Birman', 8),\n ('Siamese', 'Birman', 6),\n ('Bengal', 'Egyptian_Mau', 5),\n ('american_pit_bull_terrier', 'american_bulldog', 5)]\n\n\nSince we are not pet breed experts, it is hard for us to know whether these category errors reflect actual difficulties in recognizing breeds. So again, we turn to Google. A little bit of Googling tells us that the most common category errors shown here are actually breed differences that even expert breeders sometimes disagree about. So this gives us some comfort that we are on the right track.\nWe seem to have a good baseline. What can we do now to make it even better?"
  },
  {
    "objectID": "posts/05_pet_breeds.html#improving-our-model",
    "href": "posts/05_pet_breeds.html#improving-our-model",
    "title": "Image Classification",
    "section": "Improving Our Model",
    "text": "Improving Our Model\nWe will now look at a range of techniques to improve the training of our model and make it better. While doing so, we will explain a little bit more about transfer learning and how to fine-tune our pretrained model as best as possible, without breaking the pretrained weights.\nThe first thing we need to set when training a model is the learning rate. We saw in the previous chapter that it needs to be just right to train as efficiently as possible, so how do we pick a good one? fastai provides a tool for this.\n\nThe Learning Rate Finder\nOne of the most important things we can do when training a model is to make sure that we have the right learning rate. If our learning rate is too low, it can take many, many epochs to train our model. Not only does this waste time, but it also means that we may have problems with overfitting, because every time we do a complete pass through the data, we give our model a chance to memorize it.\nSo let’s just make our learning rate really high, right? Sure, let’s try that and see what happens:\n\n\nShow code\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlearn.fine_tune(1, base_lr=0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n2.778816\n5.150732\n0.504060\n00:20\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n4.354680\n3.003533\n0.834235\n00:24\n\n\n\n\n\nThat doesn’t look good. Here’s what happened. The optimizer stepped in the correct direction, but it stepped so far that it totally overshot the minimum loss. Repeating that multiple times makes it get further and further away, not closer and closer!\nWhat do we do to find the perfect learning rate—not too high, and not too low? In 2015 the researcher Leslie Smith came up with a brilliant idea, called the learning rate finder. His idea was to start with a very, very small learning rate, something so small that we would never expect it to be too big to handle. We use that for one mini-batch, find what the losses are afterwards, and then increase the learning rate by some percentage (e.g., doubling it each time). Then we do another mini-batch, track the loss, and double the learning rate again. We keep doing this until the loss gets worse, instead of better. This is the point where we know we have gone too far. We then select a learning rate a bit lower than this point. Our advice is to pick either:\n\nOne order of magnitude less than where the minimum loss was achieved (i.e., the minimum divided by 10)\nThe last point where the loss was clearly decreasing\n\nThe learning rate finder computes those points on the curve to help you. Both these rules usually give around the same value. In the first chapter, we didn’t specify a learning rate, using the default value from the fastai library (which is 1e-3):\n\n\nShow code\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlr_min,lr_steep = learn.lr_find(suggest_funcs=(minimum, steep))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\nprint(f\"Minimum/10: {lr_min:.2e}, steepest point: {lr_steep:.2e}\")\n\n\nMinimum/10: 1.00e-02, steepest point: 5.25e-03\n\n\nWe can see on this plot that in the range 1e-6 to 1e-3, nothing really happens and the model doesn’t train. Then the loss starts to decrease until it reaches a minimum, and then increases again. We don’t want a learning rate greater than 1e-1 as it will give a training that diverges like the one before (you can try for yourself), but 1e-1 is already too high: at this stage we’ve left the period where the loss was decreasing steadily.\nIn this learning rate plot it appears that a learning rate around 3e-3 would be appropriate, so let’s choose that:\n\n\nShow code\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlearn.fine_tune(2, base_lr=3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.328591\n0.344678\n0.114344\n00:20\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.540180\n0.420945\n0.127876\n00:24\n\n\n1\n0.329827\n0.248813\n0.083221\n00:24\n\n\n\n\n\n\nNote: Logarithmic Scale: The learning rate finder plot has a logarithmic scale, which is why the middle point between 1e-3 and 1e-2 is between 3e-3 and 4e-3. This is because we care mostly about the order of magnitude of the learning rate.\n\nIt’s interesting that the learning rate finder was only discovered in 2015, while neural networks have been under development since the 1950s. Throughout that time finding a good learning rate has been, perhaps, the most important and challenging issue for practitioners. The solution does not require any advanced maths, giant computing resources, huge datasets, or anything else that would make it inaccessible to any curious researcher. Furthermore, Leslie Smith, was not part of some exclusive Silicon Valley lab, but was working as a naval researcher. All of this is to say: breakthrough work in deep learning absolutely does not require access to vast resources, elite teams, or advanced mathematical ideas. There is lots of work still to be done that requires just a bit of common sense, creativity, and tenacity.\nNow that we have a good learning rate to train our model, let’s look at how we can fine-tune the weights of a pretrained model.\n\n\nUnfreezing and Transfer Learning\nWe discussed briefly in &lt;&gt; how transfer learning works. We saw that the basic idea is that a pretrained model, trained potentially on millions of data points (such as ImageNet), is fine-tuned for some other task. But what does this really mean?\nWe now know that a convolutional neural network consists of many linear layers with a nonlinear activation function between each pair, followed by one or more final linear layers with an activation function such as softmax at the very end. The final linear layer uses a matrix with enough columns such that the output size is the same as the number of classes in our model (assuming that we are doing classification).\nThis final linear layer is unlikely to be of any use for us when we are fine-tuning in a transfer learning setting, because it is specifically designed to classify the categories in the original pretraining dataset. So when we do transfer learning we remove it, throw it away, and replace it with a new linear layer with the correct number of outputs for our desired task (in this case, there would be 37 activations).\nThis newly added linear layer will have entirely random weights. Therefore, our model prior to fine-tuning has entirely random outputs. But that does not mean that it is an entirely random model! All of the layers prior to the last one have been carefully trained to be good at image classification tasks in general. As we saw in the images from the Zeiler and Fergus paper in &lt;&gt; (see &lt;&gt; through &lt;&gt;), the first few layers encode very general concepts, such as finding gradients and edges, and later layers encode concepts that are still very useful for us, such as finding eyeballs and fur.\nWe want to train a model in such a way that we allow it to remember all of these generally useful ideas from the pretrained model, use them to solve our particular task (classify pet breeds), and only adjust them as required for the specifics of our particular task.\nOur challenge when fine-tuning is to replace the random weights in our added linear layers with weights that correctly achieve our desired task (classifying pet breeds) without breaking the carefully pretrained weights and the other layers. There is actually a very simple trick to allow this to happen: tell the optimizer to only update the weights in those randomly added final layers. Don’t change the weights in the rest of the neural network at all. This is called freezing those pretrained layers.\nWhen we create a model from a pretrained network fastai automatically freezes all of the pretrained layers for us. When we call the fine_tune method fastai does two things:\n\nTrains the randomly added layers for one epoch, with all other layers frozen\nUnfreezes all of the layers, and trains them all for the number of epochs requested\n\nAlthough this is a reasonable default approach, it is likely that for your particular dataset you may get better results by doing things slightly differently. The fine_tune method has a number of parameters you can use to change its behavior, but it might be easiest for you to just call the underlying methods directly if you want to get some custom behavior. Remember that you can see the source code for the method by using the following syntax:\nlearn.fine_tune??\nSo let’s try doing this manually ourselves. First of all we will train the randomly added layers for three epochs, using fit_one_cycle. As mentioned in &lt;&gt;, fit_one_cycle is the suggested way to train models without using fine_tune. We’ll see why later in the book; in short, what fit_one_cycle does is to start training at a low learning rate, gradually increase it for the first section of training, and then gradually decrease it again for the last section of training.\n\n\nShow code\nlearn.fine_tune??\n\n\n\n\nShow code\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlearn.fit_one_cycle(3, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.188042\n0.355024\n0.102842\n00:20\n\n\n1\n0.534234\n0.302453\n0.094723\n00:20\n\n\n2\n0.325031\n0.222268\n0.074425\n00:20\n\n\n\n\n\nThen we’ll unfreeze the model:\n\n\nShow code\nlearn.unfreeze()\n\n\nand run lr_find again, because having more layers to train, and weights that have already been trained for three epochs, means our previously found learning rate isn’t appropriate any more:\n\n\nShow code\nlearn.lr_find()\n\n\n\n\n\n\n\n\n\n\n\n\nNote that the graph is a little different from when we had random weights: we don’t have that sharp descent that indicates the model is training. That’s because our model has been trained already. Here we have a somewhat flat area before a sharp increase, and we should take a point well before that sharp increase—for instance, 1e-5. The point with the maximum gradient isn’t what we look for here and should be ignored.\nLet’s train at a suitable learning rate:\n\n\nShow code\nlearn.fit_one_cycle(6, lr_max=1e-5)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.263579\n0.217419\n0.069012\n00:24\n\n\n1\n0.253060\n0.210346\n0.062923\n00:24\n\n\n2\n0.224340\n0.207357\n0.060217\n00:24\n\n\n3\n0.200195\n0.207244\n0.061570\n00:24\n\n\n4\n0.194269\n0.200149\n0.059540\n00:25\n\n\n5\n0.173164\n0.202301\n0.059540\n00:25\n\n\n\n\n\nThis has improved our model a bit, but there’s more we can do. The deepest layers of our pretrained model might not need as high a learning rate as the last ones, so we should probably use different learning rates for those—this is known as using discriminative learning rates.\n\n\nDiscriminative Learning Rates\nEven after we unfreeze, we still care a lot about the quality of those pretrained weights. We would not expect that the best learning rate for those pretrained parameters would be as high as for the randomly added parameters, even after we have tuned those randomly added parameters for a few epochs. Remember, the pretrained weights have been trained for hundreds of epochs, on millions of images.\nIn addition, do you remember the images we saw in &lt;&gt;, showing what each layer learns? The first layer learns very simple foundations, like edge and gradient detectors; these are likely to be just as useful for nearly any task. The later layers learn much more complex concepts, like “eye” and “sunset,” which might not be useful in your task at all (maybe you’re classifying car models, for instance). So it makes sense to let the later layers fine-tune more quickly than earlier layers.\nTherefore, fastai’s default approach is to use discriminative learning rates. This was originally developed in the ULMFiT approach to NLP transfer learning that we will introduce in &lt;&gt;. Like many good ideas in deep learning, it is extremely simple: use a lower learning rate for the early layers of the neural network, and a higher learning rate for the later layers (and especially the randomly added layers). The idea is based on insights developed by Jason Yosinski, who showed in 2014 that with transfer learning different layers of a neural network should train at different speeds, as seen in &lt;&gt;.\n\nfastai lets you pass a Python slice object anywhere that a learning rate is expected. The first value passed will be the learning rate in the earliest layer of the neural network, and the second value will be the learning rate in the final layer. The layers in between will have learning rates that are multiplicatively equidistant throughout that range. Let’s use this approach to replicate the previous training, but this time we’ll only set the lowest layer of our net to a learning rate of 1e-6; the other layers will scale up to 1e-4. Let’s train for a while and see what happens:\n\n\nShow code\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlearn.fit_one_cycle(3, 3e-3)\nlearn.unfreeze()\nlearn.fit_one_cycle(12, lr_max=slice(1e-6,1e-4))\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.145300\n0.345568\n0.119756\n00:20\n\n\n1\n0.533986\n0.251944\n0.077131\n00:20\n\n\n2\n0.317696\n0.208371\n0.069012\n00:20\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.257977\n0.205400\n0.067659\n00:25\n\n\n1\n0.246763\n0.205107\n0.066306\n00:25\n\n\n2\n0.240595\n0.193848\n0.062246\n00:25\n\n\n3\n0.209988\n0.198061\n0.062923\n00:25\n\n\n4\n0.194756\n0.193130\n0.064276\n00:25\n\n\n5\n0.169985\n0.187885\n0.056157\n00:25\n\n\n6\n0.153205\n0.186145\n0.058863\n00:25\n\n\n7\n0.141480\n0.185316\n0.053451\n00:25\n\n\n8\n0.128564\n0.180999\n0.051421\n00:25\n\n\n9\n0.126941\n0.186288\n0.054127\n00:25\n\n\n10\n0.130064\n0.181764\n0.054127\n00:25\n\n\n11\n0.124281\n0.181855\n0.054127\n00:25\n\n\n\n\n\nNow the fine-tuning is working great!\nfastai can show us a graph of the training and validation loss:\n\n\nShow code\nlearn.recorder.plot_loss()\n\n\n\n\n\n\n\n\n\nAs you can see, the training loss keeps getting better and better. But notice that eventually the validation loss improvement slows, and sometimes even gets worse! This is the point at which the model is starting to over fit. In particular, the model is becoming overconfident of its predictions. But this does not mean that it is getting less accurate, necessarily. Take a look at the table of training results per epoch, and you will often see that the accuracy continues improving, even as the validation loss gets worse. In the end what matters is your accuracy, or more generally your chosen metrics, not the loss. The loss is just the function we’ve given the computer to help us to optimize.\nAnother decision you have to make when training the model is for how long to train for. We’ll consider that next.\n\n\nSelecting the Number of Epochs\nOften you will find that you are limited by time, rather than generalization and accuracy, when choosing how many epochs to train for. So your first approach to training should be to simply pick a number of epochs that will train in the amount of time that you are happy to wait for. Then look at the training and validation loss plots, as shown above, and in particular your metrics, and if you see that they are still getting better even in your final epochs, then you know that you have not trained for too long.\nOn the other hand, you may well see that the metrics you have chosen are really getting worse at the end of training. Remember, it’s not just that we’re looking for the validation loss to get worse, but the actual metrics. Your validation loss will first get worse during training because the model gets overconfident, and only later will get worse because it is incorrectly memorizing the data. We only care in practice about the latter issue. Remember, our loss function is just something that we use to allow our optimizer to have something it can differentiate and optimize; it’s not actually the thing we care about in practice.\nBefore the days of 1cycle training it was very common to save the model at the end of each epoch, and then select whichever model had the best accuracy out of all of the models saved in each epoch. This is known as early stopping. However, this is very unlikely to give you the best answer, because those epochs in the middle occur before the learning rate has had a chance to reach the small values, where it can really find the best result. Therefore, if you find that you have overfit, what you should actually do is retrain your model from scratch, and this time select a total number of epochs based on where your previous best results were found.\nIf you have the time to train for more epochs, you may want to instead use that time to train more parameters—that is, use a deeper architecture.\n\n\nDeeper Architectures\nIn general, a model with more parameters can model your data more accurately. (There are lots and lots of caveats to this generalization, and it depends on the specifics of the architectures you are using, but it is a reasonable rule of thumb for now.) For most of the architectures that we will be seeing in this book, you can create larger versions of them by simply adding more layers. However, since we want to use pretrained models, we need to make sure that we choose a number of layers that have already been pretrained for us.\nThis is why, in practice, architectures tend to come in a small number of variants. For instance, the ResNet architecture that we are using in this chapter comes in variants with 18, 34, 50, 101, and 152 layer, pretrained on ImageNet. A larger (more layers and parameters; sometimes described as the “capacity” of a model) version of a ResNet will always be able to give us a better training loss, but it can suffer more from overfitting, because it has more parameters to overfit with.\nIn general, a bigger model has the ability to better capture the real underlying relationships in your data, and also to capture and memorize the specific details of your individual images.\nHowever, using a deeper model is going to require more GPU RAM, so you may need to lower the size of your batches to avoid an out-of-memory error. This happens when you try to fit too much inside your GPU and looks like:\nCuda runtime error: out of memory\nYou may have to restart your notebook when this happens. The way to solve it is to use a smaller batch size, which means passing smaller groups of images at any given time through your model. You can pass the batch size you want to the call creating your DataLoaders with bs=.\nThe other downside of deeper architectures is that they take quite a bit longer to train. One technique that can speed things up a lot is mixed-precision training. This refers to using less-precise numbers (half-precision floating point, also called fp16) where possible during training. As we are writing these words in early 2020, nearly all current NVIDIA GPUs support a special feature called tensor cores that can dramatically speed up neural network training, by 2-3x. They also require a lot less GPU memory. To enable this feature in fastai, just add to_fp16() after your Learner creation (you also need to import the module).\nYou can’t really know ahead of time what the best architecture for your particular problem is—you need to try training some. So let’s try a ResNet-50 now with mixed precision:\n\n\nShow code\nfrom fastai.callback.fp16 import *\nlearn = vision_learner(dls, resnet50, metrics=error_rate).to_fp16()\nlearn.fine_tune(6, freeze_epochs=3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.427505\n0.310554\n0.098782\n00:21\n\n\n1\n0.606785\n0.302325\n0.094723\n00:22\n\n\n2\n0.409267\n0.294803\n0.091340\n00:21\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.261121\n0.274507\n0.083897\n00:26\n\n\n1\n0.296653\n0.318649\n0.084574\n00:26\n\n\n2\n0.242356\n0.253677\n0.069012\n00:26\n\n\n3\n0.150684\n0.251438\n0.065629\n00:26\n\n\n4\n0.094997\n0.239772\n0.064276\n00:26\n\n\n5\n0.061144\n0.228082\n0.054804\n00:26\n\n\n\n\n\nYou’ll see here we’ve gone back to using fine_tune, since it’s so handy! We can pass freeze_epochs to tell fastai how many epochs to train for while frozen. It will automatically change learning rates appropriately for most datasets.\nIn this case, we’re not seeing a clear win from the deeper model. This is useful to remember—bigger models aren’t necessarily better models for your particular case! Make sure you try small models before you start scaling up."
  },
  {
    "objectID": "posts/05_pet_breeds.html#conclusion",
    "href": "posts/05_pet_breeds.html#conclusion",
    "title": "Image Classification",
    "section": "Conclusion",
    "text": "Conclusion\nIn this chapter you learned some important practical tips, both for getting your image data ready for modeling (presizing, data block summary) and for fitting the model (learning rate finder, unfreezing, discriminative learning rates, setting the number of epochs, and using deeper architectures). Using these tools will help you to build more accurate image models, more quickly.\nWe also discussed cross-entropy loss. This part of the book is worth spending plenty of time on. You aren’t likely to need to actually implement cross-entropy loss from scratch yourself in practice, but it’s really important you understand the inputs to and output from that function, because it (or a variant of it, as we’ll see in the next chapter) is used in nearly every classification model. So when you want to debug a model, or put a model in production, or improve the accuracy of a model, you’re going to need to be able to look at its activations and loss, and understand what’s going on, and why. You can’t do that properly if you don’t understand your loss function.\nIf cross-entropy loss hasn’t “clicked” for you just yet, don’t worry—you’ll get there! First, go back to the last chapter and make sure you really understand mnist_loss. Then work gradually through the cells of the notebook for this chapter, where we step through each piece of cross-entropy loss. Make sure you understand what each calculation is doing, and why. Try creating some small tensors yourself and pass them into the functions, to see what they return.\nRemember: the choices made in the implementation of cross-entropy loss are not the only possible choices that could have been made. Just like when we looked at regression we could choose between mean squared error and mean absolute difference (L1). If you have other ideas for possible functions that you think might work, feel free to give them a try in this chapter’s notebook! (Fair warning though: you’ll probably find that the model will be slower to train, and less accurate. That’s because the gradient of cross-entropy loss is proportional to the difference between the activation and the target, so SGD always gets a nicely scaled step for the weights.)"
  },
  {
    "objectID": "posts/05_pet_breeds.html#questionnaire",
    "href": "posts/05_pet_breeds.html#questionnaire",
    "title": "Image Classification",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhy do we first resize to a large size on the CPU, and then to a smaller size on the GPU?\nIf you are not familiar with regular expressions, find a regular expression tutorial, and some problem sets, and complete them. Have a look on the book’s website for suggestions.\nWhat are the two ways in which data is most commonly provided, for most deep learning datasets?\nLook up the documentation for L and try using a few of the new methods that it adds.\nLook up the documentation for the Python pathlib module and try using a few methods of the Path class.\nGive two examples of ways that image transformations can degrade the quality of the data.\nWhat method does fastai provide to view the data in a DataLoaders?\nWhat method does fastai provide to help you debug a DataBlock?\nShould you hold off on training a model until you have thoroughly cleaned your data?\nWhat are the two pieces that are combined into cross-entropy loss in PyTorch?\nWhat are the two properties of activations that softmax ensures? Why is this important?\nWhen might you want your activations to not have these two properties?\nCalculate the exp and softmax columns of &lt;&gt; yourself (i.e., in a spreadsheet, with a calculator, or in a notebook).\nWhy can’t we use torch.where to create a loss function for datasets where our label can have more than two categories?\nWhat is the value of log(-2)? Why?\nWhat are two good rules of thumb for picking a learning rate from the learning rate finder?\nWhat two steps does the fine_tune method do?\nIn Jupyter Notebook, how do you get the source code for a method or function?\nWhat are discriminative learning rates?\nHow is a Python slice object interpreted when passed as a learning rate to fastai?\nWhy is early stopping a poor choice when using 1cycle training?\nWhat is the difference between resnet50 and resnet101?\nWhat does to_fp16 do?\n\n\nFurther Research\n\nFind the paper by Leslie Smith that introduced the learning rate finder, and read it.\nSee if you can improve the accuracy of the classifier in this chapter. What’s the best accuracy you can achieve? Look on the forums and the book’s website to see what other students have achieved with this dataset, and how they did it."
  },
  {
    "objectID": "posts/03_ethics.html",
    "href": "posts/03_ethics.html",
    "title": "Data Ethics",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\n[[chapter_ethics]]"
  },
  {
    "objectID": "posts/03_ethics.html#key-examples-for-data-ethics",
    "href": "posts/03_ethics.html#key-examples-for-data-ethics",
    "title": "Data Ethics",
    "section": "Key Examples for Data Ethics",
    "text": "Key Examples for Data Ethics\nWe are going to start with three specific examples that illustrate three common ethical issues in tech:\n\nRecourse processes—Arkansas’s buggy healthcare algorithms left patients stranded.\nFeedback loops—YouTube’s recommendation system helped unleash a conspiracy theory boom.\nBias—When a traditionally African-American name is searched for on Google, it displays ads for criminal background checks.\n\nIn fact, for every concept that we introduce in this chapter, we are going to provide at least one specific example. For each one, think about what you could have done in this situation, and what kinds of obstructions there might have been to you getting that done. How would you deal with them? What would you look out for?\n\nBugs and Recourse: Buggy Algorithm Used for Healthcare Benefits\nThe Verge investigated software used in over half of the US states to determine how much healthcare people receive, and documented their findings in the article “What Happens When an Algorithm Cuts Your Healthcare”. After implementation of the algorithm in Arkansas, hundreds of people (many with severe disabilities) had their healthcare drastically cut. For instance, Tammy Dobbs, a woman with cerebral palsy who needs an aid to help her to get out of bed, to go to the bathroom, to get food, and more, had her hours of help suddenly reduced by 20 hours a week. She couldn’t get any explanation for why her healthcare was cut. Eventually, a court case revealed that there were mistakes in the software implementation of the algorithm, negatively impacting people with diabetes or cerebral palsy. However, Dobbs and many other people reliant on these healthcare benefits live in fear that their benefits could again be cut suddenly and inexplicably.\n\n\nFeedback Loops: YouTube’s Recommendation System\nFeedback loops can occur when your model is controlling the next round of data you get. The data that is returned quickly becomes flawed by the software itself.\nFor instance, YouTube has 1.9 billion users, who watch over 1 billion hours of YouTube videos a day. Its recommendation algorithm (built by Google), which was designed to optimize watch time, is responsible for around 70% of the content that is watched. But there was a problem: it led to out-of-control feedback loops, leading the New York Times to run the headline “YouTube Unleashed a Conspiracy Theory Boom. Can It Be Contained?”. Ostensibly recommendation systems are predicting what content people will like, but they also have a lot of power in determining what content people even see.\n\n\nBias: Professor Latanya Sweeney “Arrested”\nDr. Latanya Sweeney is a professor at Harvard and director of the university’s data privacy lab. In the paper “Discrimination in Online Ad Delivery” (see &lt;&gt;) she describes her discovery that Googling her name resulted in advertisements saying “Latanya Sweeney, arrested?” even though she is the only known Latanya Sweeney and has never been arrested. However when she Googled other names, such as “Kirsten Lindquist,” she got more neutral ads, even though Kirsten Lindquist has been arrested three times.\n\nBeing a computer scientist, she studied this systematically, and looked at over 2000 names. She found a clear pattern where historically Black names received advertisements suggesting that the person had a criminal record, whereas, white names had more neutral advertisements.\nThis is an example of bias. It can make a big difference to people’s lives—for instance, if a job applicant is Googled it may appear that they have a criminal record when they do not.\n\n\nWhy Does This Matter?\nOne very natural reaction to considering these issues is: “So what? What’s that got to do with me? I’m a data scientist, not a politician. I’m not one of the senior executives at my company who make the decisions about what we do. I’m just trying to build the most predictive model I can.”\nThese are very reasonable questions. But we’re going to try to convince you that the answer is that everybody who is training models absolutely needs to consider how their models will be used, and consider how to best ensure that they are used as positively as possible. There are things you can do. And if you don’t do them, then things can go pretty badly.\nOne particularly hideous example of what happens when technologists focus on technology at all costs is the story of IBM and Nazi Germany. In 2001, a Swiss judge ruled that it was not unreasonable “to deduce that IBM’s technical assistance facilitated the tasks of the Nazis in the commission of their crimes against humanity, acts also involving accountancy and classification by IBM machines and utilized in the concentration camps themselves.”\nIBM, you see, supplied the Nazis with data tabulation products necessary to track the extermination of Jews and other groups on a massive scale. This was driven from the top of the company, with marketing to Hitler and his leadership team. Company President Thomas Watson personally approved the 1939 release of special IBM alphabetizing machines to help organize the deportation of Polish Jews. Pictured in &lt;&gt; is Adolf Hitler (far left) meeting with IBM CEO Tom Watson Sr. (second from left), shortly before Hitler awarded Watson a special “Service to the Reich” medal in 1937.\n\nBut this was not an isolated incident—the organization’s involvement was extensive. IBM and its subsidiaries provided regular training and maintenance onsite at the concentration camps: printing off cards, configuring machines, and repairing them as they broke frequently. IBM set up categorizations on its punch card system for the way that each person was killed, which group they were assigned to, and the logistical information necessary to track them through the vast Holocaust system. IBM’s code for Jews in the concentration camps was 8: some 6,000,000 were killed. Its code for Romanis was 12 (they were labeled by the Nazis as “asocials,” with over 300,000 killed in the Zigeunerlager, or “Gypsy camp”). General executions were coded as 4, death in the gas chambers as 6.\n\nOf course, the project managers and engineers and technicians involved were just living their ordinary lives. Caring for their families, going to the church on Sunday, doing their jobs the best they could. Following orders. The marketers were just doing what they could to meet their business development goals. As Edwin Black, author of IBM and the Holocaust (Dialog Press) observed: “To the blind technocrat, the means were more important than the ends. The destruction of the Jewish people became even less important because the invigorating nature of IBM’s technical achievement was only heightened by the fantastical profits to be made at a time when bread lines stretched across the world.”\nStep back for a moment and consider: How would you feel if you discovered that you had been part of a system that ended up hurting society? Would you be open to finding out? How can you help make sure this doesn’t happen? We have described the most extreme situation here, but there are many negative societal consequences linked to AI and machine learning being observed today, some of which we’ll describe in this chapter.\nIt’s not just a moral burden, either. Sometimes technologists pay very directly for their actions. For instance, the first person who was jailed as a result of the Volkswagen scandal, where the car company was revealed to have cheated on its diesel emissions tests, was not the manager that oversaw the project, or an executive at the helm of the company. It was one of the engineers, James Liang, who just did what he was told.\nOf course, it’s not all bad—if a project you are involved in turns out to make a huge positive impact on even one person, this is going to make you feel pretty great!\nOkay, so hopefully we have convinced you that you ought to care. But what should you do? As data scientists, we’re naturally inclined to focus on making our models better by optimizing some metric or other. But optimizing that metric may not actually lead to better outcomes. And even if it does help create better outcomes, it almost certainly won’t be the only thing that matters. Consider the pipeline of steps that occurs between the development of a model or an algorithm by a researcher or practitioner, and the point at which this work is actually used to make some decision. This entire pipeline needs to be considered as a whole if we’re to have a hope of getting the kinds of outcomes we want.\nNormally there is a very long chain from one end to the other. This is especially true if you are a researcher, where you might not even know if your research will ever get used for anything, or if you’re involved in data collection, which is even earlier in the pipeline. But no one is better placed to inform everyone involved in this chain about the capabilities, constraints, and details of your work than you are. Although there’s no “silver bullet” that can ensure your work is used the right way, by getting involved in the process, and asking the right questions, you can at the very least ensure that the right issues are being considered.\nSometimes, the right response to being asked to do a piece of work is to just say “no.” Often, however, the response we hear is, “If I don’t do it, someone else will.” But consider this: if you’ve been picked for the job, you’re the best person they’ve found to do it—so if you don’t do it, the best person isn’t working on that project. If the first five people they ask all say no too, even better!"
  },
  {
    "objectID": "posts/03_ethics.html#integrating-machine-learning-with-product-design",
    "href": "posts/03_ethics.html#integrating-machine-learning-with-product-design",
    "title": "Data Ethics",
    "section": "Integrating Machine Learning with Product Design",
    "text": "Integrating Machine Learning with Product Design\nPresumably the reason you’re doing this work is because you hope it will be used for something. Otherwise, you’re just wasting your time. So, let’s start with the assumption that your work will end up somewhere. Now, as you are collecting your data and developing your model, you are making lots of decisions. What level of aggregation will you store your data at? What loss function should you use? What validation and training sets should you use? Should you focus on simplicity of implementation, speed of inference, or accuracy of the model? How will your model handle out-of-domain data items? Can it be fine-tuned, or must it be retrained from scratch over time?\nThese are not just algorithm questions. They are data product design questions. But the product managers, executives, judges, journalists, doctors… whoever ends up developing and using the system of which your model is a part will not be well-placed to understand the decisions that you made, let alone change them.\nFor instance, two studies found that Amazon’s facial recognition software produced inaccurate and racially biased results. Amazon claimed that the researchers should have changed the default parameters, without explaining how this would have changed the biased results. Furthermore, it turned out that Amazon was not instructing police departments that used its software to do this either. There was, presumably, a big distance between the researchers that developed these algorithms and the Amazon documentation staff that wrote the guidelines provided to the police. A lack of tight integration led to serious problems for society at large, the police, and Amazon themselves. It turned out that their system erroneously matched 28 members of congress to criminal mugshots! (And the Congresspeople wrongly matched to criminal mugshots were disproportionately people of color, as seen in &lt;&gt;.)\n\nData scientists need to be part of a cross-disciplinary team. And researchers need to work closely with the kinds of people who will end up using their research. Better still is if the domain experts themselves have learned enough to be able to train and debug some models themselves—hopefully there are a few of you reading this book right now!\nThe modern workplace is a very specialized place. Everybody tends to have well-defined jobs to perform. Especially in large companies, it can be hard to know what all the pieces of the puzzle are. Sometimes companies even intentionally obscure the overall project goals that are being worked on, if they know that their employees are not going to like the answers. This is sometimes done by compartmentalising pieces as much as possible.\nIn other words, we’re not saying that any of this is easy. It’s hard. It’s really hard. We all have to do our best. And we have often seen that the people who do get involved in the higher-level context of these projects, and attempt to develop cross-disciplinary capabilities and teams, become some of the most important and well rewarded members of their organizations. It’s the kind of work that tends to be highly appreciated by senior executives, even if it is sometimes considered rather uncomfortable by middle management."
  },
  {
    "objectID": "posts/03_ethics.html#topics-in-data-ethics",
    "href": "posts/03_ethics.html#topics-in-data-ethics",
    "title": "Data Ethics",
    "section": "Topics in Data Ethics",
    "text": "Topics in Data Ethics\nData ethics is a big field, and we can’t cover everything. Instead, we’re going to pick a few topics that we think are particularly relevant:\n\nThe need for recourse and accountability\nFeedback loops\nBias\nDisinformation\n\nLet’s look at each in turn.\n\nRecourse and Accountability\nIn a complex system, it is easy for no one person to feel responsible for outcomes. While this is understandable, it does not lead to good results. In the earlier example of the Arkansas healthcare system in which a bug led to people with cerebral palsy losing access to needed care, the creator of the algorithm blamed government officials, and government officials blamed those who implemented the software. NYU professor Danah Boyd described this phenomenon: “Bureaucracy has often been used to shift or evade responsibility… Today’s algorithmic systems are extending bureaucracy.”\nAn additional reason why recourse is so necessary is because data often contains errors. Mechanisms for audits and error correction are crucial. A database of suspected gang members maintained by California law enforcement officials was found to be full of errors, including 42 babies who had been added to the database when they were less than 1 year old (28 of whom were marked as “admitting to being gang members”). In this case, there was no process in place for correcting mistakes or removing people once they’d been added. Another example is the US credit report system: in a large-scale study of credit reports by the Federal Trade Commission (FTC) in 2012, it was found that 26% of consumers had at least one mistake in their files, and 5% had errors that could be devastating. Yet, the process of getting such errors corrected is incredibly slow and opaque. When public radio reporter Bobby Allyn discovered that he was erroneously listed as having a firearms conviction, it took him “more than a dozen phone calls, the handiwork of a county court clerk and six weeks to solve the problem. And that was only after I contacted the company’s communications department as a journalist.”\nAs machine learning practitioners, we do not always think of it as our responsibility to understand how our algorithms end up being implemented in practice. But we need to.\n\n\nFeedback Loops\nWe explained in &lt;&gt; how an algorithm can interact with its environment to create a feedback loop, making predictions that reinforce actions taken in the real world, which lead to predictions even more pronounced in the same direction. As an example, let’s again consider YouTube’s recommendation system. A couple of years ago the Google team talked about how they had introduced reinforcement learning (closely related to deep learning, but where your loss function represents a result potentially a long time after an action occurs) to improve YouTube’s recommendation system. They described how they used an algorithm that made recommendations such that watch time would be optimized.\nHowever, human beings tend to be drawn to controversial content. This meant that videos about things like conspiracy theories started to get recommended more and more by the recommendation system. Furthermore, it turns out that the kinds of people that are interested in conspiracy theories are also people that watch a lot of online videos! So, they started to get drawn more and more toward YouTube. The increasing number of conspiracy theorists watching videos on YouTube resulted in the algorithm recommending more and more conspiracy theory and other extremist content, which resulted in more extremists watching videos on YouTube, and more people watching YouTube developing extremist views, which led to the algorithm recommending more extremist content… The system was spiraling out of control.\nAnd this phenomenon was not contained to this particular type of content. In June 2019 the New York Times published an article on YouTube’s recommendation system, titled “On YouTube’s Digital Playground, an Open Gate for Pedophiles”. The article started with this chilling story:\n\n: Christiane C. didn’t think anything of it when her 10-year-old daughter and a friend uploaded a video of themselves playing in a backyard pool… A few days later… the video had thousands of views. Before long, it had ticked up to 400,000… “I saw the video again and I got scared by the number of views,” Christiane said. She had reason to be. YouTube’s automated recommendation system… had begun showing the video to users who watched other videos of prepubescent, partially clothed children, a team of researchers has found.\n\n\n: On its own, each video might be perfectly innocent, a home movie, say, made by a child. Any revealing frames are fleeting and appear accidental. But, grouped together, their shared features become unmistakable.\n\nYouTube’s recommendation algorithm had begun curating playlists for pedophiles, picking out innocent home videos that happened to contain prepubescent, partially clothed children.\nNo one at Google planned to create a system that turned family videos into porn for pedophiles. So what happened?\nPart of the problem here is the centrality of metrics in driving a financially important system. When an algorithm has a metric to optimize, as you have seen, it will do everything it can to optimize that number. This tends to lead to all kinds of edge cases, and humans interacting with a system will search for, find, and exploit these edge cases and feedback loops for their advantage.\nThere are signs that this is exactly what has happened with YouTube’s recommendation system. The Guardian ran an article called “How an ex-YouTube Insider Investigated its Secret Algorithm” about Guillaume Chaslot, an ex-YouTube engineer who created AlgoTransparency, which tracks these issues. Chaslot published the chart in &lt;&gt;, following the release of Robert Mueller’s “Report on the Investigation Into Russian Interference in the 2016 Presidential Election.”\n\nRussia Today’s coverage of the Mueller report was an extreme outlier in terms of how many channels were recommending it. This suggests the possibility that Russia Today, a state-owned Russia media outlet, has been successful in gaming YouTube’s recommendation algorithm. Unfortunately, the lack of transparency of systems like this makes it hard to uncover the kinds of problems that we’re discussing.\nOne of our reviewers for this book, Aurélien Géron, led YouTube’s video classification team from 2013 to 2016 (well before the events discussed here). He pointed out that it’s not just feedback loops involving humans that are a problem. There can also be feedback loops without humans! He told us about an example from YouTube:\n\n: One important signal to classify the main topic of a video is the channel it comes from. For example, a video uploaded to a cooking channel is very likely to be a cooking video. But how do we know what topic a channel is about? Well… in part by looking at the topics of the videos it contains! Do you see the loop? For example, many videos have a description which indicates what camera was used to shoot the video. As a result, some of these videos might get classified as videos about “photography.” If a channel has such a misclassified video, it might be classified as a “photography” channel, making it even more likely for future videos on this channel to be wrongly classified as “photography.” This could even lead to runaway virus-like classifications! One way to break this feedback loop is to classify videos with and without the channel signal. Then when classifying the channels, you can only use the classes obtained without the channel signal. This way, the feedback loop is broken.\n\nThere are positive examples of people and organizations attempting to combat these problems. Evan Estola, lead machine learning engineer at Meetup, discussed the example of men expressing more interest than women in tech meetups. taking gender into account could therefore cause Meetup’s algorithm to recommend fewer tech meetups to women, and as a result, fewer women would find out about and attend tech meetups, which could cause the algorithm to suggest even fewer tech meetups to women, and so on in a self-reinforcing feedback loop. So, Evan and his team made the ethical decision for their recommendation algorithm to not create such a feedback loop, by explicitly not using gender for that part of their model. It is encouraging to see a company not just unthinkingly optimize a metric, but consider its impact. According to Evan, “You need to decide which feature not to use in your algorithm… the most optimal algorithm is perhaps not the best one to launch into production.”\nWhile Meetup chose to avoid such an outcome, Facebook provides an example of allowing a runaway feedback loop to run wild. Like YouTube, it tends to radicalize users interested in one conspiracy theory by introducing them to more. As Renee DiResta, a researcher on proliferation of disinformation, writes:\n\n: Once people join a single conspiracy-minded [Facebook] group, they are algorithmically routed to a plethora of others. Join an anti-vaccine group, and your suggestions will include anti-GMO, chemtrail watch, flat Earther (yes, really), and “curing cancer naturally groups. Rather than pulling a user out of the rabbit hole, the recommendation engine pushes them further in.”\n\nIt is extremely important to keep in mind that this kind of behavior can happen, and to either anticipate a feedback loop or take positive action to break it when you see the first signs of it in your own projects. Another thing to keep in mind is bias, which, as we discussed briefly in the previous chapter, can interact with feedback loops in very troublesome ways.\n\n\nBias\nDiscussions of bias online tend to get pretty confusing pretty fast. The word “bias” means so many different things. Statisticians often think when data ethicists are talking about bias that they’re talking about the statistical definition of the term bias. But they’re not. And they’re certainly not talking about the biases that appear in the weights and biases which are the parameters of your model!\nWhat they’re talking about is the social science concept of bias. In “A Framework for Understanding Unintended Consequences of Machine Learning” MIT’s Harini Suresh and John Guttag describe six types of bias in machine learning, summarized in &lt;&gt; from their paper.\n\nWe’ll discuss four of these types of bias, those that we’ve found most helpful in our own work (see the paper for details on the others).\n\nHistorical bias\nHistorical bias comes from the fact that people are biased, processes are biased, and society is biased. Suresh and Guttag say: “Historical bias is a fundamental, structural issue with the first step of the data generation process and can exist even given perfect sampling and feature selection.”\nFor instance, here are a few examples of historical race bias in the US, from the New York Times article “Racial Bias, Even When We Have Good Intentions” by the University of Chicago’s Sendhil Mullainathan:\n\nWhen doctors were shown identical files, they were much less likely to recommend cardiac catheterization (a helpful procedure) to Black patients.\nWhen bargaining for a used car, Black people were offered initial prices $700 higher and received far smaller concessions.\nResponding to apartment rental ads on Craigslist with a Black name elicited fewer responses than with a white name.\nAn all-white jury was 16 percentage points more likely to convict a Black defendant than a white one, but when a jury had one Black member it convicted both at the same rate.\n\nThe COMPAS algorithm, widely used for sentencing and bail decisions in the US, is an example of an important algorithm that, when tested by ProPublica, showed clear racial bias in practice (&lt;&gt;).\n\nAny dataset involving humans can have this kind of bias: medical data, sales data, housing data, political data, and so on. Because underlying bias is so pervasive, bias in datasets is very pervasive. Racial bias even turns up in computer vision, as shown in the example of autocategorized photos shared on Twitter by a Google Photos user shown in &lt;&gt;.\n\nYes, that is showing what you think it is: Google Photos classified a Black user’s photo with their friend as “gorillas”! This algorithmic misstep got a lot of attention in the media. “We’re appalled and genuinely sorry that this happened,” a company spokeswoman said. “There is still clearly a lot of work to do with automatic image labeling, and we’re looking at how we can prevent these types of mistakes from happening in the future.”\nUnfortunately, fixing problems in machine learning systems when the input data has problems is hard. Google’s first attempt didn’t inspire confidence, as coverage by The Guardian suggested (&lt;&gt;).\n\nThese kinds of problems are certainly not limited to just Google. MIT researchers studied the most popular online computer vision APIs to see how accurate they were. But they didn’t just calculate a single accuracy number—instead, they looked at the accuracy across four different groups, as illustrated in &lt;&gt;.\n\nIBM’s system, for instance, had a 34.7% error rate for darker females, versus 0.3% for lighter males—over 100 times more errors! Some people incorrectly reacted to these experiments by claiming that the difference was simply because darker skin is harder for computers to recognize. However, what actually happened was that, after the negative publicity that this result created, all of the companies in question dramatically improved their models for darker skin, such that one year later they were nearly as good as for lighter skin. So what this actually showed is that the developers failed to utilize datasets containing enough darker faces, or test their product with darker faces.\nOne of the MIT researchers, Joy Buolamwini, warned: “We have entered the age of automation overconfident yet underprepared. If we fail to make ethical and inclusive artificial intelligence, we risk losing gains made in civil rights and gender equity under the guise of machine neutrality.”\nPart of the issue appears to be a systematic imbalance in the makeup of popular datasets used for training models. The abstract to the paper “No Classification Without Representation: Assessing Geodiversity Issues in Open Data Sets for the Developing World” by Shreya Shankar et al. states, “We analyze two large, publicly available image data sets to assess geo-diversity and find that these data sets appear to exhibit an observable amerocentric and eurocentric representation bias. Further, we analyze classifiers trained on these data sets to assess the impact of these training distributions and find strong differences in the relative performance on images from different locales.” &lt;&gt; shows one of the charts from the paper, showing the geographic makeup of what was, at the time (and still are, as this book is being written) the two most important image datasets for training models.\n\nThe vast majority of the images are from the United States and other Western countries, leading to models trained on ImageNet performing worse on scenes from other countries and cultures. For instance, research found that such models are worse at identifying household items (such as soap, spices, sofas, or beds) from lower-income countries. &lt;&gt; shows an image from the paper, “Does Object Recognition Work for Everyone?” by Terrance DeVries et al. of Facebook AI Research that illustrates this point.\n\nIn this example, we can see that the lower-income soap example is a very long way away from being accurate, with every commercial image recognition service predicting “food” as the most likely answer!\nAs we will discuss shortly, in addition, the vast majority of AI researchers and developers are young white men. Most projects that we have seen do most user testing using friends and families of the immediate product development group. Given this, the kinds of problems we just discussed should not be surprising.\nSimilar historical bias is found in the texts used as data for natural language processing models. This crops up in downstream machine learning tasks in many ways. For instance, it was widely reported that until last year Google Translate showed systematic bias in how it translated the Turkish gender-neutral pronoun “o” into English: when applied to jobs which are often associated with males it used “he,” and when applied to jobs which are often associated with females it used “she” (&lt;&gt;).\n\nWe also see this kind of bias in online advertisements. For instance, a study in 2019 by Muhammad Ali et al. found that even when the person placing the ad does not intentionally discriminate, Facebook will show ads to very different audiences based on race and gender. Housing ads with the same text, but picture either a white or a Black family, were shown to racially different audiences.\n\n\nMeasurement bias\nIn the paper “Does Machine Learning Automate Moral Hazard and Error” in American Economic Review, Sendhil Mullainathan and Ziad Obermeyer look at a model that tries to answer the question: using historical electronic health record (EHR) data, what factors are most predictive of stroke? These are the top predictors from the model:\n\nPrior stroke\nCardiovascular disease\nAccidental injury\nBenign breast lump\nColonoscopy\nSinusitis\n\nHowever, only the top two have anything to do with a stroke! Based on what we’ve studied so far, you can probably guess why. We haven’t really measured stroke, which occurs when a region of the brain is denied oxygen due to an interruption in the blood supply. What we’ve measured is who had symptoms, went to a doctor, got the appropriate tests, and received a diagnosis of stroke. Actually having a stroke is not the only thing correlated with this complete list—it’s also correlated with being the kind of person who actually goes to the doctor (which is influenced by who has access to healthcare, can afford their co-pay, doesn’t experience racial or gender-based medical discrimination, and more)! If you are likely to go to the doctor for an accidental injury, then you are likely to also go the doctor when you are having a stroke.\nThis is an example of measurement bias. It occurs when our models make mistakes because we are measuring the wrong thing, or measuring it in the wrong way, or incorporating that measurement into the model inappropriately.\n\n\nAggregation bias\nAggregation bias occurs when models do not aggregate data in a way that incorporates all of the appropriate factors, or when a model does not include the necessary interaction terms, nonlinearities, or so forth. This can particularly occur in medical settings. For instance, the way diabetes is treated is often based on simple univariate statistics and studies involving small groups of heterogeneous people. Analysis of results is often done in a way that does not take account of different ethnicities or genders. However, it turns out that diabetes patients have different complications across ethnicities, and HbA1c levels (widely used to diagnose and monitor diabetes) differ in complex ways across ethnicities and genders. This can result in people being misdiagnosed or incorrectly treated because medical decisions are based on a model that does not include these important variables and interactions.\n\n\nRepresentation bias\nThe abstract of the paper “Bias in Bios: A Case Study of Semantic Representation Bias in a High-Stakes Setting” by Maria De-Arteaga et al. notes that there is gender imbalance in occupations (e.g., females are more likely to be nurses, and males are more likely to be pastors), and says that: “differences in true positive rates between genders are correlated with existing gender imbalances in occupations, which may compound these imbalances.”\nIn other words, the researchers noticed that models predicting occupation did not only reflect the actual gender imbalance in the underlying population, but actually amplified it! This type of representation bias is quite common, particularly for simple models. When there is some clear, easy-to-see underlying relationship, a simple model will often simply assume that this relationship holds all the time. As &lt;&gt; from the paper shows, for occupations that had a higher percentage of females, the model tended to overestimate the prevalence of that occupation.\n\nFor example, in the training dataset 14.6% of surgeons were women, yet in the model predictions only 11.6% of the true positives were women. The model is thus amplifying the bias existing in the training set.\nNow that we’ve seen that those biases exist, what can we do to mitigate them?\n\n\n\nAddressing different types of bias\nDifferent types of bias require different approaches for mitigation. While gathering a more diverse dataset can address representation bias, this would not help with historical bias or measurement bias. All datasets contain bias. There is no such thing as a completely debiased dataset. Many researchers in the field have been converging on a set of proposals to enable better documentation of the decisions, context, and specifics about how and why a particular dataset was created, what scenarios it is appropriate to use in, and what the limitations are. This way, those using a particular dataset will not be caught off guard by its biases and limitations.\nWe often hear the question—“Humans are biased, so does algorithmic bias even matter?” This comes up so often, there must be some reasoning that makes sense to the people that ask it, but it doesn’t seem very logically sound to us! Independently of whether this is logically sound, it’s important to realize that algorithms (particularly machine learning algorithms!) and people are different. Consider these points about machine learning algorithms:\n\nMachine learning can create feedback loops:: Small amounts of bias can rapidly increase exponentially due to feedback loops.\nMachine learning can amplify bias:: Human bias can lead to larger amounts of machine learning bias.\nAlgorithms & humans are used differently:: Human decision makers and algorithmic decision makers are not used in a plug-and-play interchangeable way in practice.\nTechnology is power:: And with that comes responsibility.\n\nAs the Arkansas healthcare example showed, machine learning is often implemented in practice not because it leads to better outcomes, but because it is cheaper and more efficient. Cathy O’Neill, in her book Weapons of Math Destruction (Crown), described the pattern of how the privileged are processed by people, whereas the poor are processed by algorithms. This is just one of a number of ways that algorithms are used differently than human decision makers. Others include:\n\nPeople are more likely to assume algorithms are objective or error-free (even if they’re given the option of a human override).\nAlgorithms are more likely to be implemented with no appeals process in place.\nAlgorithms are often used at scale.\nAlgorithmic systems are cheap.\n\nEven in the absence of bias, algorithms (and deep learning especially, since it is such an effective and scalable algorithm) can lead to negative societal problems, such as when used for disinformation.\n\n\nDisinformation\nDisinformation has a history stretching back hundreds or even thousands of years. It is not necessarily about getting someone to believe something false, but rather often used to sow disharmony and uncertainty, and to get people to give up on seeking the truth. Receiving conflicting accounts can lead people to assume that they can never know whom or what to trust.\nSome people think disinformation is primarily about false information or fake news, but in reality, disinformation can often contain seeds of truth, or half-truths taken out of context. Ladislav Bittman was an intelligence officer in the USSR who later defected to the US and wrote some books in the 1970s and 1980s on the role of disinformation in Soviet propaganda operations. In The KGB and Soviet Disinformation (Pergamon) he wrote, “Most campaigns are a carefully designed mixture of facts, half-truths, exaggerations, and deliberate lies.”\nIn the US this has hit close to home in recent years, with the FBI detailing a massive disinformation campaign linked to Russia in the 2016 election. Understanding the disinformation that was used in this campaign is very educational. For instance, the FBI found that the Russian disinformation campaign often organized two separate fake “grass roots” protests, one for each side of an issue, and got them to protest at the same time! The Houston Chronicle reported on one of these odd events (&lt;&gt;).\n\n: A group that called itself the “Heart of Texas” had organized it on social media—a protest, they said, against the “Islamization” of Texas. On one side of Travis Street, I found about 10 protesters. On the other side, I found around 50 counterprotesters. But I couldn’t find the rally organizers. No “Heart of Texas.” I thought that was odd, and mentioned it in the article: What kind of group is a no-show at its own event? Now I know why. Apparently, the rally’s organizers were in Saint Petersburg, Russia, at the time. “Heart of Texas” is one of the internet troll groups cited in Special Prosecutor Robert Mueller’s recent indictment of Russians attempting to tamper with the U.S. presidential election.\n\n\nDisinformation often involves coordinated campaigns of inauthentic behavior. For instance, fraudulent accounts may try to make it seem like many people hold a particular viewpoint. While most of us like to think of ourselves as independent-minded, in reality we evolved to be influenced by others in our in-group, and in opposition to those in our out-group. Online discussions can influence our viewpoints, or alter the range of what we consider acceptable viewpoints. Humans are social animals, and as social animals we are extremely influenced by the people around us. Increasingly, radicalization occurs in online environments; influence is coming from people in the virtual space of online forums and social networks.\nDisinformation through autogenerated text is a particularly significant issue, due to the greatly increased capability provided by deep learning. We discuss this issue in depth when we delve into creating language models, in &lt;&gt;.\nOne proposed approach is to develop some form of digital signature, to implement it in a seamless way, and to create norms that we should only trust content that has been verified. The head of the Allen Institute on AI, Oren Etzioni, wrote such a proposal in an article titled “How Will We Prevent AI-Based Forgery?”: “AI is poised to make high-fidelity forgery inexpensive and automated, leading to potentially disastrous consequences for democracy, security, and society. The specter of AI forgery means that we need to act to make digital signatures de rigueur as a means of authentication of digital content.”\nWhilst we can’t hope to discuss all the ethical issues that deep learning, and algorithms more generally, brings up, hopefully this brief introduction has been a useful starting point you can build on. We’ll now move on to the questions of how to identify ethical issues, and what to do about them."
  },
  {
    "objectID": "posts/03_ethics.html#identifying-and-addressing-ethical-issues",
    "href": "posts/03_ethics.html#identifying-and-addressing-ethical-issues",
    "title": "Data Ethics",
    "section": "Identifying and Addressing Ethical Issues",
    "text": "Identifying and Addressing Ethical Issues\nMistakes happen. Finding out about them, and dealing with them, needs to be part of the design of any system that includes machine learning (and many other systems too). The issues raised within data ethics are often complex and interdisciplinary, but it is crucial that we work to address them.\nSo what can we do? This is a big topic, but a few steps towards addressing ethical issues are:\n\nAnalyze a project you are working on.\nImplement processes at your company to find and address ethical risks.\nSupport good policy.\nIncrease diversity.\n\nLet’s walk through each of these steps, starting with analyzing a project you are working on.\n\nAnalyze a Project You Are Working On\nIt’s easy to miss important issues when considering ethical implications of your work. One thing that helps enormously is simply asking the right questions. Rachel Thomas recommends considering the following questions throughout the development of a data project:\n\nShould we even be doing this?\nWhat bias is in the data?\nCan the code and data be audited?\nWhat are the error rates for different sub-groups?\nWhat is the accuracy of a simple rule-based alternative?\nWhat processes are in place to handle appeals or mistakes?\nHow diverse is the team that built it?\n\nThese questions may be able to help you identify outstanding issues, and possible alternatives that are easier to understand and control. In addition to asking the right questions, it’s also important to consider practices and processes to implement.\nOne thing to consider at this stage is what data you are collecting and storing. Data often ends up being used for different purposes than what it was originally collected for. For instance, IBM began selling to Nazi Germany well before the Holocaust, including helping with Germany’s 1933 census conducted by Adolf Hitler, which was effective at identifying far more Jewish people than had previously been recognized in Germany. Similarly, US census data was used to round up Japanese-Americans (who were US citizens) for internment during World War II. It is important to recognize how data and images collected can be weaponized later. Columbia professor Tim Wu wrote that “You must assume that any personal data that Facebook or Android keeps are data that governments around the world will try to get or that thieves will try to steal.”\n\n\nProcesses to Implement\nThe Markkula Center has released An Ethical Toolkit for Engineering/Design Practice that includes some concrete practices to implement at your company, including regularly scheduled sweeps to proactively search for ethical risks (in a manner similar to cybersecurity penetration testing), expanding the ethical circle to include the perspectives of a variety of stakeholders, and considering the terrible people (how could bad actors abuse, steal, misinterpret, hack, destroy, or weaponize what you are building?).\nEven if you don’t have a diverse team, you can still try to pro-actively include the perspectives of a wider group, considering questions such as these (provided by the Markkula Center):\n\nWhose interests, desires, skills, experiences, and values have we simply assumed, rather than actually consulted?\nWho are all the stakeholders who will be directly affected by our product? How have their interests been protected? How do we know what their interests really are—have we asked?\nWho/which groups and individuals will be indirectly affected in significant ways?\nWho might use this product that we didn’t expect to use it, or for purposes we didn’t initially intend?\n\n\nEthical lenses\nAnother useful resource from the Markkula Center is its Conceptual Frameworks in Technology and Engineering Practice. This considers how different foundational ethical lenses can help identify concrete issues, and lays out the following approaches and key questions:\n\nThe rights approach:: Which option best respects the rights of all who have a stake?\nThe justice approach:: Which option treats people equally or proportionately?\nThe utilitarian approach:: Which option will produce the most good and do the least harm?\nThe common good approach:: Which option best serves the community as a whole, not just some members?\nThe virtue approach:: Which option leads me to act as the sort of person I want to be?\n\nMarkkula’s recommendations include a deeper dive into each of these perspectives, including looking at a project through the lenses of its consequences:\n\nWho will be directly affected by this project? Who will be indirectly affected?\nWill the effects in aggregate likely create more good than harm, and what types of good and harm?\nAre we thinking about all relevant types of harm/benefit (psychological, political, environmental, moral, cognitive, emotional, institutional, cultural)?\nHow might future generations be affected by this project?\nDo the risks of harm from this project fall disproportionately on the least powerful in society? Will the benefits go disproportionately to the well-off?\nHave we adequately considered “dual-use”?\n\nThe alternative lens to this is the deontological perspective, which focuses on basic concepts of right and wrong:\n\nWhat rights of others and duties to others must we respect?\nHow might the dignity and autonomy of each stakeholder be impacted by this project?\nWhat considerations of trust and of justice are relevant to this design/project?\nDoes this project involve any conflicting moral duties to others, or conflicting stakeholder rights? How can we prioritize these?\n\nOne of the best ways to help come up with complete and thoughtful answers to questions like these is to ensure that the people asking the questions are diverse.\n\n\n\nThe Power of Diversity\nCurrently, less than 12% of AI researchers are women, according to a study from Element AI. The statistics are similarly dire when it comes to race and age. When everybody on a team has similar backgrounds, they are likely to have similar blindspots around ethical risks. The Harvard Business Review (HBR) has published a number of studies showing many benefits of diverse teams, including:\n\n“How Diversity Can Drive Innovation”\n“Teams Solve Problems Faster When They’re More Cognitively Diverse”\n“Why Diverse Teams Are Smarter”, and\n“Defend Your Research: What Makes a Team Smarter? More Women”\n\nDiversity can lead to problems being identified earlier, and a wider range of solutions being considered. For instance, Tracy Chou was an early engineer at Quora. She wrote of her experiences, describing how she advocated internally for adding a feature that would allow trolls and other bad actors to be blocked. Chou recounts, “I was eager to work on the feature because I personally felt antagonized and abused on the site (gender isn’t an unlikely reason as to why)… But if I hadn’t had that personal perspective, it’s possible that the Quora team wouldn’t have prioritized building a block button so early in its existence.” Harassment often drives people from marginalized groups off online platforms, so this functionality has been important for maintaining the health of Quora’s community.\nA crucial aspect to understand is that women leave the tech industry at over twice the rate that men do, according to the Harvard Business Review (41% of women working in tech leave, compared to 17% of men). An analysis of over 200 books, white papers, and articles found that the reason they leave is that “they’re treated unfairly; underpaid, less likely to be fast-tracked than their male colleagues, and unable to advance.”\nStudies have confirmed a number of the factors that make it harder for women to advance in the workplace. Women receive more vague feedback and personality criticism in performance evaluations, whereas men receive actionable advice tied to business outcomes (which is more useful). Women frequently experience being excluded from more creative and innovative roles, and not receiving high-visibility “stretch” assignments that are helpful in getting promoted. One study found that men’s voices are perceived as more persuasive, fact-based, and logical than women’s voices, even when reading identical scripts.\nReceiving mentorship has been statistically shown to help men advance, but not women. The reason behind this is that when women receive mentorship, it’s advice on how they should change and gain more self-knowledge. When men receive mentorship, it’s public endorsement of their authority. Guess which is more useful in getting promoted?\nAs long as qualified women keep dropping out of tech, teaching more girls to code will not solve the diversity issues plaguing the field. Diversity initiatives often end up focusing primarily on white women, even though women of color face many additional barriers. In interviews with 60 women of color who work in STEM research, 100% had experienced discrimination.\nThe hiring process is particularly broken in tech. One study indicative of the dysfunction comes from Triplebyte, a company that helps place software engineers in companies, conducting a standardized technical interview as part of this process. They have a fascinating dataset: the results of how over 300 engineers did on their exam, coupled with the results of how those engineers did during the interview process for a variety of companies. The number one finding from Triplebyte’s research is that “the types of programmers that each company looks for often have little to do with what the company needs or does. Rather, they reflect company culture and the backgrounds of the founders.”\nThis is a challenge for those trying to break into the world of deep learning, since most companies’ deep learning groups today were founded by academics. These groups tend to look for people “like them”—that is, people that can solve complex math problems and understand dense jargon. They don’t always know how to spot people who are actually good at solving real problems using deep learning.\nThis leaves a big opportunity for companies that are ready to look beyond status and pedigree, and focus on results!\n\n\nFairness, Accountability, and Transparency\nThe professional society for computer scientists, the ACM, runs a data ethics conference called the Conference on Fairness, Accountability, and Transparency. “Fairness, Accountability, and Transparency” which used to go under the acronym FAT but now uses to the less objectionable FAccT. Microsoft has a group focused on “Fairness, Accountability, Transparency, and Ethics” (FATE). In this section, we’ll use “FAccT” to refer to the concepts of Fairness, Accountability, and Transparency.\nFAccT is another lens that you may find useful in considering ethical issues. One useful resource for this is the free online book Fairness and Machine Learning: Limitations and Opportunities by Solon Barocas, Moritz Hardt, and Arvind Narayanan, which “gives a perspective on machine learning that treats fairness as a central concern rather than an afterthought.” It also warns, however, that it “is intentionally narrow in scope… A narrow framing of machine learning ethics might be tempting to technologists and businesses as a way to focus on technical interventions while sidestepping deeper questions about power and accountability. We caution against this temptation.” Rather than provide an overview of the FAccT approach to ethics (which is better done in books such as that one), our focus here will be on the limitations of this kind of narrow framing.\nOne great way to consider whether an ethical lens is complete is to try to come up with an example where the lens and our own ethical intuitions give diverging results. Os Keyes, Jevan Hutson, and Meredith Durbin explored this in a graphic way in their paper “A Mulching Proposal: Analysing and Improving an Algorithmic System for Turning the Elderly into High-Nutrient Slurry”. The paper’s abstract says:\n\n: The ethical implications of algorithmic systems have been much discussed in both HCI and the broader community of those interested in technology design, development and policy. In this paper, we explore the application of one prominent ethical framework - Fairness, Accountability, and Transparency - to a proposed algorithm that resolves various societal issues around food security and population aging. Using various standardised forms of algorithmic audit and evaluation, we drastically increase the algorithm’s adherence to the FAT framework, resulting in a more ethical and beneficent system. We discuss how this might serve as a guide to other researchers or practitioners looking to ensure better ethical outcomes from algorithmic systems in their line of work.\n\nIn this paper, the rather controversial proposal (“Turning the Elderly into High-Nutrient Slurry”) and the results (“drastically increase the algorithm’s adherence to the FAT framework, resulting in a more ethical and beneficent system”) are at odds… to say the least!\nIn philosophy, and especially philosophy of ethics, this is one of the most effective tools: first, come up with a process, definition, set of questions, etc., which is designed to resolve some problem. Then try to come up with an example where that apparent solution results in a proposal that no one would consider acceptable. This can then lead to a further refinement of the solution.\nSo far, we’ve focused on things that you and your organization can do. But sometimes individual or organizational action is not enough. Sometimes, governments also need to consider policy implications."
  },
  {
    "objectID": "posts/03_ethics.html#role-of-policy",
    "href": "posts/03_ethics.html#role-of-policy",
    "title": "Data Ethics",
    "section": "Role of Policy",
    "text": "Role of Policy\nWe often talk to people who are eager for technical or design fixes to be a full solution to the kinds of problems that we’ve been discussing; for instance, a technical approach to debias data, or design guidelines for making technology less addictive. While such measures can be useful, they will not be sufficient to address the underlying problems that have led to our current state. For example, as long as it is incredibly profitable to create addictive technology, companies will continue to do so, regardless of whether this has the side effect of promoting conspiracy theories and polluting our information ecosystem. While individual designers may try to tweak product designs, we will not see substantial changes until the underlying profit incentives change.\n\nThe Effectiveness of Regulation\nTo look at what can cause companies to take concrete action, consider the following two examples of how Facebook has behaved. In 2018, a UN investigation found that Facebook had played a “determining role” in the ongoing genocide of the Rohingya, an ethnic minority in Mynamar described by UN Secretary-General Antonio Guterres as “one of, if not the, most discriminated people in the world.” Local activists had been warning Facebook executives that their platform was being used to spread hate speech and incite violence since as early as 2013. In 2015, they were warned that Facebook could play the same role in Myanmar that the radio broadcasts played during the Rwandan genocide (where a million people were killed). Yet, by the end of 2015, Facebook only employed four contractors that spoke Burmese. As one person close to the matter said, “That’s not 20/20 hindsight. The scale of this problem was significant and it was already apparent.” Zuckerberg promised during the congressional hearings to hire “dozens” to address the genocide in Myanmar (in 2018, years after the genocide had begun, including the destruction by fire of at least 288 villages in northern Rakhine state after August 2017).\nThis stands in stark contrast to Facebook quickly hiring 1,200 people in Germany to try to avoid expensive penalties (of up to 50 million euros) under a new German law against hate speech. Clearly, in this case, Facebook was more reactive to the threat of a financial penalty than to the systematic destruction of an ethnic minority.\nIn an article on privacy issues, Maciej Ceglowski draws parallels with the environmental movement:\n\n: This regulatory project has been so successful in the First World that we risk forgetting what life was like before it. Choking smog of the kind that today kills thousands in Jakarta and Delhi was https://en.wikipedia.org/wiki/Pea_soup_fog[once emblematic of London]. The Cuyahoga River in Ohio used to http://www.ohiohistorycentral.org/w/Cuyahoga_River_Fire[reliably catch fire]. In a particularly horrific example of unforeseen consequences, tetraethyl lead added to gasoline https://en.wikipedia.org/wiki/Lead%E2%80%93crime_hypothesis[raised violent crime rates] worldwide for fifty years. None of these harms could have been fixed by telling people to vote with their wallet, or carefully review the environmental policies of every company they gave their business to, or to stop using the technologies in question. It took coordinated, and sometimes highly technical, regulation across jurisdictional boundaries to fix them. In some cases, like the https://en.wikipedia.org/wiki/Montreal_Protocol[ban on commercial refrigerants] that depleted the ozone layer, that regulation required a worldwide consensus. We’re at the point where we need a similar shift in perspective in our privacy law.\n\n\n\nRights and Policy\nClean air and clean drinking water are public goods which are nearly impossible to protect through individual market decisions, but rather require coordinated regulatory action. Similarly, many of the harms resulting from unintended consequences of misuses of technology involve public goods, such as a polluted information environment or deteriorated ambient privacy. Too often privacy is framed as an individual right, yet there are societal impacts to widespread surveillance (which would still be the case even if it was possible for a few individuals to opt out).\nMany of the issues we are seeing in tech are actually human rights issues, such as when a biased algorithm recommends that Black defendants have longer prison sentences, when particular job ads are only shown to young people, or when police use facial recognition to identify protesters. The appropriate venue to address human rights issues is typically through the law.\nWe need both regulatory and legal changes, and the ethical behavior of individuals. Individual behavior change can’t address misaligned profit incentives, externalities (where corporations reap large profits while offloading their costs and harms to the broader society), or systemic failures. However, the law will never cover all edge cases, and it is important that individual software developers and data scientists are equipped to make ethical decisions in practice.\n\n\nCars: A Historical Precedent\nThe problems we are facing are complex, and there are no simple solutions. This can be discouraging, but we find hope in considering other large challenges that people have tackled throughout history. One example is the movement to increase car safety, covered as a case study in “Datasheets for Datasets” by Timnit Gebru et al. and in the design podcast 99% Invisible. Early cars had no seatbelts, metal knobs on the dashboard that could lodge in people’s skulls during a crash, regular plate glass windows that shattered in dangerous ways, and non-collapsible steering columns that impaled drivers. However, car companies were incredibly resistant to even discussing the idea of safety as something they could help address, and the widespread belief was that cars are just the way they are, and that it was the people using them who caused problems.\nIt took consumer safety activists and advocates decades of work to even change the national conversation to consider that perhaps car companies had some responsibility which should be addressed through regulation. When the collapsible steering column was invented, it was not implemented for several years as there was no financial incentive to do so. Major car company General Motors hired private detectives to try to dig up dirt on consumer safety advocate Ralph Nader. The requirement of seatbelts, crash test dummies, and collapsible steering columns were major victories. It was only in 2011 that car companies were required to start using crash test dummies that would represent the average woman, and not just average men’s bodies; prior to this, women were 40% more likely to be injured in a car crash of the same impact compared to a man. This is a vivid example of the ways that bias, policy, and technology have important consequences."
  },
  {
    "objectID": "posts/03_ethics.html#conclusion",
    "href": "posts/03_ethics.html#conclusion",
    "title": "Data Ethics",
    "section": "Conclusion",
    "text": "Conclusion\nComing from a background of working with binary logic, the lack of clear answers in ethics can be frustrating at first. Yet, the implications of how our work impacts the world, including unintended consequences and the work becoming weaponized by bad actors, are some of the most important questions we can (and should!) consider. Even though there aren’t any easy answers, there are definite pitfalls to avoid and practices to follow to move toward more ethical behavior.\nMany people (including us!) are looking for more satisfying, solid answers about how to address harmful impacts of technology. However, given the complex, far-reaching, and interdisciplinary nature of the problems we are facing, there are no simple solutions. Julia Angwin, former senior reporter at ProPublica who focuses on issues of algorithmic bias and surveillance (and one of the 2016 investigators of the COMPAS recidivism algorithm that helped spark the field of FAccT) said in a 2019 interview:\n\n: I strongly believe that in order to solve a problem, you have to diagnose it, and that we’re still in the diagnosis phase of this. If you think about the turn of the century and industrialization, we had, I don’t know, 30 years of child labor, unlimited work hours, terrible working conditions, and it took a lot of journalist muckraking and advocacy to diagnose the problem and have some understanding of what it was, and then the activism to get laws changed. I feel like we’re in a second industrialization of data information… I see my role as trying to make as clear as possible what the downsides are, and diagnosing them really accurately so that they can be solvable. That’s hard work, and lots more people need to be doing it.\n\nIt’s reassuring that Angwin thinks we are largely still in the diagnosis phase: if your understanding of these problems feels incomplete, that is normal and natural. Nobody has a “cure” yet, although it is vital that we continue working to better understand and address the problems we are facing.\nOne of our reviewers for this book, Fred Monroe, used to work in hedge fund trading. He told us, after reading this chapter, that many of the issues discussed here (distribution of data being dramatically different than what a model was trained on, the impact feedback loops on a model once deployed and at scale, and so forth) were also key issues for building profitable trading models. The kinds of things you need to do to consider societal consequences are going to have a lot of overlap with things you need to do to consider organizational, market, and customer consequences—so thinking carefully about ethics can also help you think carefully about how to make your data product successful more generally!"
  },
  {
    "objectID": "posts/03_ethics.html#questionnaire",
    "href": "posts/03_ethics.html#questionnaire",
    "title": "Data Ethics",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nDoes ethics provide a list of “right answers”?\nHow can working with people of different backgrounds help when considering ethical questions?\nWhat was the role of IBM in Nazi Germany? Why did the company participate as it did? Why did the workers participate?\nWhat was the role of the first person jailed in the Volkswagen diesel scandal?\nWhat was the problem with a database of suspected gang members maintained by California law enforcement officials?\nWhy did YouTube’s recommendation algorithm recommend videos of partially clothed children to pedophiles, even though no employee at Google had programmed this feature?\nWhat are the problems with the centrality of metrics?\nWhy did Meetup.com not include gender in its recommendation system for tech meetups?\nWhat are the six types of bias in machine learning, according to Suresh and Guttag?\nGive two examples of historical race bias in the US.\nWhere are most images in ImageNet from?\nIn the paper “Does Machine Learning Automate Moral Hazard and Error” why is sinusitis found to be predictive of a stroke?\nWhat is representation bias?\nHow are machines and people different, in terms of their use for making decisions?\nIs disinformation the same as “fake news”?\nWhy is disinformation through auto-generated text a particularly significant issue?\nWhat are the five ethical lenses described by the Markkula Center?\nWhere is policy an appropriate tool for addressing data ethics issues?\n\n\nFurther Research:\n\nRead the article “What Happens When an Algorithm Cuts Your Healthcare”. How could problems like this be avoided in the future?\nResearch to find out more about YouTube’s recommendation system and its societal impacts. Do you think recommendation systems must always have feedback loops with negative results? What approaches could Google take to avoid them? What about the government?\nRead the paper “Discrimination in Online Ad Delivery”. Do you think Google should be considered responsible for what happened to Dr. Sweeney? What would be an appropriate response?\nHow can a cross-disciplinary team help avoid negative consequences?\nRead the paper “Does Machine Learning Automate Moral Hazard and Error”. What actions do you think should be taken to deal with the issues identified in this paper?\nRead the article “How Will We Prevent AI-Based Forgery?” Do you think Etzioni’s proposed approach could work? Why?\nComplete the section “Analyze a Project You Are Working On” in this chapter.\nConsider whether your team could be more diverse. If so, what approaches might help?"
  },
  {
    "objectID": "posts/03_ethics.html#deep-learning-in-practice-thats-a-wrap",
    "href": "posts/03_ethics.html#deep-learning-in-practice-thats-a-wrap",
    "title": "Data Ethics",
    "section": "Deep Learning in Practice: That’s a Wrap!",
    "text": "Deep Learning in Practice: That’s a Wrap!\nCongratulations! You’ve made it to the end of the first section of the book. In this section we’ve tried to show you what deep learning can do, and how you can use it to create real applications and products. At this point, you will get a lot more out of the book if you spend some time trying out what you’ve learned. Perhaps you have already been doing this as you go along—in which case, great! If not, that’s no problem either… Now is a great time to start experimenting yourself.\nIf you haven’t been to the book’s website yet, head over there now. It’s really important that you get yourself set up to run the notebooks. Becoming an effective deep learning practitioner is all about practice, so you need to be training models. So, please go get the notebooks running now if you haven’t already! And also have a look on the website for any important updates or notices; deep learning changes fast, and we can’t change the words that are printed in this book, so the website is where you need to look to ensure you have the most up-to-date information.\nMake sure that you have completed the following steps:\n\nConnect to one of the GPU Jupyter servers recommended on the book’s website.\nRun the first notebook yourself.\nUpload an image that you find in the first notebook; then try a few different images of different kinds to see what happens.\nRun the second notebook, collecting your own dataset based on image search queries that you come up with.\nThink about how you can use deep learning to help you with your own projects, including what kinds of data you could use, what kinds of problems may come up, and how you might be able to mitigate these issues in practice.\n\nIn the next section of the book you will learn about how and why deep learning works, instead of just seeing how you can use it in practice. Understanding the how and why is important for both practitioners and researchers, because in this fairly new field nearly every project requires some level of customization and debugging. The better you understand the foundations of deep learning, the better your models will be. These foundations are less important for executives, product managers, and so forth (although still useful, so feel free to keep reading!), but they are critical for anybody who is actually training and deploying models themselves."
  },
  {
    "objectID": "posts/01_intro.html",
    "href": "posts/01_intro.html",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_intro]]\nYour Deep Learning Journey Begins Here\nWelcome to Practical Deep Learning for Coders! This chapter introduces you to the foundations of deep learning and shows you how to build your first image classifier in just a few lines of code.\nHello, and thank you for letting us join you on your deep learning journey, however far along that you may be! In this chapter, we will tell you a little bit more about what to expect in this book, introduce the key concepts behind deep learning, and train our first models on different tasks. It doesn’t matter if you don’t come from a technical or a mathematical background (though it’s okay if you do too!); we wrote this book to make deep learning accessible to as many people as possible."
  },
  {
    "objectID": "posts/01_intro.html#deep-learning-is-for-everyone",
    "href": "posts/01_intro.html#deep-learning-is-for-everyone",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "Deep Learning Is for Everyone",
    "text": "Deep Learning Is for Everyone\nA lot of people assume that you need all kinds of hard-to-find stuff to get great results with deep learning, but as you’ll see in this book, those people are wrong. &lt;&gt; is a list of a few thing you absolutely don’t need to do world-class deep learning.\n[[myths]]\n.What you don't need to do deep learning\n[options=\"header\"]\n|======\n| Myth (don't need) | Truth\n| Lots of math | Just high school math is sufficient\n| Lots of data | We've seen record-breaking results with &lt;50 items of data\n| Lots of expensive computers | You can get what you need for state of the art work for free\n|======\nDeep learning is a computer technique to extract and transform data–-with use cases ranging from human speech recognition to animal imagery classification–-by using multiple layers of neural networks. Each of these layers takes its inputs from previous layers and progressively refines them. The layers are trained by algorithms that minimize their errors and improve their accuracy. In this way, the network learns to perform a specified task. We will discuss training algorithms in detail in the next section.\nDeep learning has power, flexibility, and simplicity. That’s why we believe it should be applied across many disciplines. These include the social and physical sciences, the arts, medicine, finance, scientific research, and many more. To give a personal example, despite having no background in medicine, Jeremy started Enlitic, a company that uses deep learning algorithms to diagnose illness and disease. Within months of starting the company, it was announced that its algorithm could identify malignant tumors more accurately than radiologists.\nHere’s a list of some of the thousands of tasks in different areas at which deep learning, or methods heavily using deep learning, is now the best in the world:\n\nNatural language processing (NLP):: Answering questions; speech recognition; summarizing documents; classifying documents; finding names, dates, etc. in documents; searching for articles mentioning a concept\nComputer vision:: Satellite and drone imagery interpretation (e.g., for disaster resilience); face recognition; image captioning; reading traffic signs; locating pedestrians and vehicles in autonomous vehicles\nMedicine:: Finding anomalies in radiology images, including CT, MRI, and X-ray images; counting features in pathology slides; measuring features in ultrasounds; diagnosing diabetic retinopathy\nBiology:: Folding proteins; classifying proteins; many genomics tasks, such as tumor-normal sequencing and classifying clinically actionable genetic mutations; cell classification; analyzing protein/protein interactions\nImage generation:: Colorizing images; increasing image resolution; removing noise from images; converting images to art in the style of famous artists\nRecommendation systems:: Web search; product recommendations; home page layout\nPlaying games:: Chess, Go, most Atari video games, and many real-time strategy games\nRobotics:: Handling objects that are challenging to locate (e.g., transparent, shiny, lacking texture) or hard to pick up\nOther applications:: Financial and logistical forecasting, text to speech, and much more…\n\nWhat is remarkable is that deep learning has such varied application yet nearly all of deep learning is based on a single type of model, the neural network.\nBut neural networks are not in fact completely new. In order to have a wider perspective on the field, it is worth it to start with a bit of history."
  },
  {
    "objectID": "posts/01_intro.html#neural-networks-a-brief-history",
    "href": "posts/01_intro.html#neural-networks-a-brief-history",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "Neural Networks: A Brief History",
    "text": "Neural Networks: A Brief History\nIn 1943 Warren McCulloch, a neurophysiologist, and Walter Pitts, a logician, teamed up to develop a mathematical model of an artificial neuron. In their paper “A Logical Calculus of the Ideas Immanent in Nervous Activity” they declared that:\n\n: Because of the “all-or-none” character of nervous activity, neural events and the relations among them can be treated by means of propositional logic. It is found that the behavior of every net can be described in these terms.\n\nMcCulloch and Pitts realized that a simplified model of a real neuron could be represented using simple addition and thresholding, as shown in &lt;&gt;. Pitts was self-taught, and by age 12, had received an offer to study at Cambridge University with the great Bertrand Russell. He did not take up this invitation, and indeed throughout his life did not accept any offers of advanced degrees or positions of authority. Most of his famous work was done while he was homeless. Despite his lack of an officially recognized position and increasing social isolation, his work with McCulloch was influential, and was taken up by a psychologist named Frank Rosenblatt.\n\nRosenblatt further developed the artificial neuron to give it the ability to learn. Even more importantly, he worked on building the first device that actually used these principles, the Mark I Perceptron. In “The Design of an Intelligent Automaton” Rosenblatt wrote about this work: “We are now about to witness the birth of such a machine–-a machine capable of perceiving, recognizing and identifying its surroundings without any human training or control.” The perceptron was built, and was able to successfully recognize simple shapes.\nAn MIT professor named Marvin Minsky (who was a grade behind Rosenblatt at the same high school!), along with Seymour Papert, wrote a book called Perceptrons (MIT Press), about Rosenblatt’s invention. They showed that a single layer of these devices was unable to learn some simple but critical mathematical functions (such as XOR). In the same book, they also showed that using multiple layers of the devices would allow these limitations to be addressed. Unfortunately, only the first of these insights was widely recognized. As a result, the global academic community nearly entirely gave up on neural networks for the next two decades.\nPerhaps the most pivotal work in neural networks in the last 50 years was the multi-volume Parallel Distributed Processing (PDP) by David Rumelhart, James McClellan, and the PDP Research Group, released in 1986 by MIT Press. Chapter 1 lays out a similar hope to that shown by Rosenblatt:\n\n: People are smarter than today’s computers because the brain employs a basic computational architecture that is more suited to deal with a central aspect of the natural information processing tasks that people are so good at. …We will introduce a computational framework for modeling cognitive processes that seems… closer than other frameworks to the style of computation as it might be done by the brain.\n\nThe premise that PDP is using here is that traditional computer programs work very differently to brains, and that might be why computer programs had been (at that point) so bad at doing things that brains find easy (such as recognizing objects in pictures). The authors claimed that the PDP approach was “closer than other frameworks” to how the brain works, and therefore it might be better able to handle these kinds of tasks.\nIn fact, the approach laid out in PDP is very similar to the approach used in today’s neural networks. The book defined parallel distributed processing as requiring:\n\nA set of processing units\nA state of activation\nAn output function for each unit\nA pattern of connectivity among units\nA propagation rule for propagating patterns of activities through the network of connectivities\nAn activation rule for combining the inputs impinging on a unit with the current state of that unit to produce an output for the unit\nA learning rule whereby patterns of connectivity are modified by experience\nAn environment within which the system must operate\n\nWe will see in this book that modern neural networks handle each of these requirements.\nIn the 1980’s most models were built with a second layer of neurons, thus avoiding the problem that had been identified by Minsky and Papert (this was their “pattern of connectivity among units,” to use the framework above). And indeed, neural networks were widely used during the ’80s and ’90s for real, practical projects. However, again a misunderstanding of the theoretical issues held back the field. In theory, adding just one extra layer of neurons was enough to allow any mathematical function to be approximated with these neural networks, but in practice such networks were often too big and too slow to be useful.\nAlthough researchers showed 30 years ago that to get practical good performance you need to use even more layers of neurons, it is only in the last decade that this principle has been more widely appreciated and applied. Neural networks are now finally living up to their potential, thanks to the use of more layers, coupled with the capacity to do so due to improvements in computer hardware, increases in data availability, and algorithmic tweaks that allow neural networks to be trained faster and more easily. We now have what Rosenblatt promised: “a machine capable of perceiving, recognizing, and identifying its surroundings without any human training or control.”\nThis is what you will learn how to build in this book. But first, since we are going to be spending a lot of time together, let’s get to know each other a bit…"
  },
  {
    "objectID": "posts/01_intro.html#who-we-are",
    "href": "posts/01_intro.html#who-we-are",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "Who We Are",
    "text": "Who We Are\nWe are Sylvain and Jeremy, your guides on this journey. We hope that you will find us well suited for this position.\nJeremy has been using and teaching machine learning for around 30 years. He started using neural networks 25 years ago. During this time, he has led many companies and projects that have machine learning at their core, including founding the first company to focus on deep learning and medicine, Enlitic, and taking on the role of President and Chief Scientist of the world’s largest machine learning community, Kaggle. He is the co-founder, along with Dr. Rachel Thomas, of fast.ai, the organization that built the course this book is based on.\nFrom time to time you will hear directly from us, in sidebars like this one from Jeremy:\n\nJ: Hi everybody, I’m Jeremy! You might be interested to know that I do not have any formal technical education. I completed a BA, with a major in philosophy, and didn’t have great grades. I was much more interested in doing real projects, rather than theoretical studies, so I worked full time at a management consulting firm called McKinsey and Company throughout my university years. If you’re somebody who would rather get their hands dirty building stuff than spend years learning abstract concepts, then you will understand where I am coming from! Look out for sidebars from me to find information most suited to people with a less mathematical or formal technical background—that is, people like me…\n\nSylvain, on the other hand, knows a lot about formal technical education. In fact, he has written 10 math textbooks, covering the entire advanced French maths curriculum!\n\nS: Unlike Jeremy, I have not spent many years coding and applying machine learning algorithms. Rather, I recently came to the machine learning world, by watching Jeremy’s fast.ai course videos. So, if you are somebody who has not opened a terminal and written commands at the command line, then you will understand where I am coming from! Look out for sidebars from me to find information most suited to people with a more mathematical or formal technical background, but less real-world coding experience—that is, people like me…\n\nThe fast.ai course has been studied by hundreds of thousands of students, from all walks of life, from all parts of the world. Sylvain stood out as the most impressive student of the course that Jeremy had ever seen, which led to him joining fast.ai, and then becoming the coauthor, along with Jeremy, of the fastai software library.\nAll this means that between us you have the best of both worlds: the people who know more about the software than anybody else, because they wrote it; an expert on math, and an expert on coding and machine learning; and also people who understand both what it feels like to be a relative outsider in math, and a relative outsider in coding and machine learning.\nAnybody who has watched sports knows that if you have a two-person commentary team then you also need a third person to do “special comments.” Our special commentator is Alexis Gallagher. Alexis has a very diverse background: he has been a researcher in mathematical biology, a screenplay writer, an improv performer, a McKinsey consultant (like Jeremy!), a Swift coder, and a CTO.\n\nA: I’ve decided it’s time for me to learn about this AI stuff! After all, I’ve tried pretty much everything else… But I don’t really have a background in building machine learning models. Still… how hard can it be? I’m going to be learning throughout this book, just like you are. Look out for my sidebars for learning tips that I found helpful on my journey, and hopefully you will find helpful too."
  },
  {
    "objectID": "posts/01_intro.html#how-to-learn-deep-learning",
    "href": "posts/01_intro.html#how-to-learn-deep-learning",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "How to Learn Deep Learning",
    "text": "How to Learn Deep Learning\nHarvard professor David Perkins, who wrote Making Learning Whole (Jossey-Bass), has much to say about teaching. The basic idea is to teach the whole game. That means that if you’re teaching baseball, you first take people to a baseball game or get them to play it. You don’t teach them how to wind twine to make a baseball from scratch, the physics of a parabola, or the coefficient of friction of a ball on a bat.\nPaul Lockhart, a Columbia math PhD, former Brown professor, and K-12 math teacher, imagines in the influential essay “A Mathematician’s Lament” a nightmare world where music and art are taught the way math is taught. Children are not allowed to listen to or play music until they have spent over a decade mastering music notation and theory, spending classes transposing sheet music into a different key. In art class, students study colors and applicators, but aren’t allowed to actually paint until college. Sound absurd? This is how math is taught–-we require students to spend years doing rote memorization and learning dry, disconnected fundamentals that we claim will pay off later, long after most of them quit the subject.\nUnfortunately, this is where many teaching resources on deep learning begin–-asking learners to follow along with the definition of the Hessian and theorems for the Taylor approximation of your loss functions, without ever giving examples of actual working code. We’re not knocking calculus. We love calculus, and Sylvain has even taught it at the college level, but we don’t think it’s the best place to start when learning deep learning!\nIn deep learning, it really helps if you have the motivation to fix your model to get it to do better. That’s when you start learning the relevant theory. But you need to have the model in the first place. We teach almost everything through real examples. As we build out those examples, we go deeper and deeper, and we’ll show you how to make your projects better and better. This means that you’ll be gradually learning all the theoretical foundations you need, in context, in such a way that you’ll see why it matters and how it works.\nSo, here’s our commitment to you. Throughout this book, we will follow these principles:\n\nTeaching the whole game. We’ll start by showing how to use a complete, working, very usable, state-of-the-art deep learning network to solve real-world problems, using simple, expressive tools. And then we’ll gradually dig deeper and deeper into understanding how those tools are made, and how the tools that make those tools are made, and so on…\nAlways teaching through examples. We’ll ensure that there is a context and a purpose that you can understand intuitively, rather than starting with algebraic symbol manipulation.\nSimplifying as much as possible. We’ve spent years building tools and teaching methods that make previously complex topics very simple.\nRemoving barriers. Deep learning has, until now, been a very exclusive game. We’re breaking it open, and ensuring that everyone can play.\n\nThe hardest part of deep learning is artisanal: how do you know if you’ve got enough data, whether it is in the right format, if your model is training properly, and, if it’s not, what you should do about it? That is why we believe in learning by doing. As with basic data science skills, with deep learning you only get better through practical experience. Trying to spend too much time on the theory can be counterproductive. The key is to just code and try to solve problems: the theory can come later, when you have context and motivation.\nThere will be times when the journey will feel hard. Times where you feel stuck. Don’t give up! Rewind through the book to find the last bit where you definitely weren’t stuck, and then read slowly through from there to find the first thing that isn’t clear. Then try some code experiments yourself, and Google around for more tutorials on whatever the issue you’re stuck with is—often you’ll find some different angle on the material might help it to click. Also, it’s expected and normal to not understand everything (especially the code) on first reading. Trying to understand the material serially before proceeding can sometimes be hard. Sometimes things click into place after you get more context from parts down the road, from having a bigger picture. So if you do get stuck on a section, try moving on anyway and make a note to come back to it later.\nRemember, you don’t need any particular academic background to succeed at deep learning. Many important breakthroughs are made in research and industry by folks without a PhD, such as “Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks”—one of the most influential papers of the last decade—with over 5,000 citations, which was written by Alec Radford when he was an undergraduate. Even at Tesla, where they’re trying to solve the extremely tough challenge of making a self-driving car, CEO Elon Musk says:\n\n: A PhD is definitely not required. All that matters is a deep understanding of AI & ability to implement NNs in a way that is actually useful (latter point is what’s truly hard). Don’t care if you even graduated high school.\n\nWhat you will need to do to succeed however is to apply what you learn in this book to a personal project, and always persevere.\n\nYour Projects and Your Mindset\nWhether you’re excited to identify if plants are diseased from pictures of their leaves, auto-generate knitting patterns, diagnose TB from X-rays, or determine when a raccoon is using your cat door, we will get you using deep learning on your own problems (via pre-trained models from others) as quickly as possible, and then will progressively drill into more details. You’ll learn how to use deep learning to solve your own problems at state-of-the-art accuracy within the first 30 minutes of the next chapter! (And feel free to skip straight there now if you’re dying to get coding right away.) There is a pernicious myth out there that you need to have computing resources and datasets the size of those at Google to be able to do deep learning, but it’s not true.\nSo, what sorts of tasks make for good test cases? You could train your model to distinguish between Picasso and Monet paintings or to pick out pictures of your daughter instead of pictures of your son. It helps to focus on your hobbies and passions–-setting yourself four or five little projects rather than striving to solve a big, grand problem tends to work better when you’re getting started. Since it is easy to get stuck, trying to be too ambitious too early can often backfire. Then, once you’ve got the basics mastered, aim to complete something you’re really proud of!\n\nJ: Deep learning can be set to work on almost any problem. For instance, my first startup was a company called FastMail, which provided enhanced email services when it launched in 1999 (and still does to this day). In 2002 I set it up to use a primitive form of deep learning, single-layer neural networks, to help categorize emails and stop customers from receiving spam.\n\nCommon character traits in the people that do well at deep learning include playfulness and curiosity. The late physicist Richard Feynman is an example of someone who we’d expect to be great at deep learning: his development of an understanding of the movement of subatomic particles came from his amusement at how plates wobble when they spin in the air.\nLet’s now focus on what you will learn, starting with the software."
  },
  {
    "objectID": "posts/01_intro.html#the-software-pytorch-fastai-and-jupyter",
    "href": "posts/01_intro.html#the-software-pytorch-fastai-and-jupyter",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "The Software: PyTorch, fastai, and Jupyter",
    "text": "The Software: PyTorch, fastai, and Jupyter\n(And Why It Doesn’t Matter)\nWe’ve completed hundreds of machine learning projects using dozens of different packages, and many different programming languages. At fast.ai, we have written courses using most of the main deep learning and machine learning packages used today. After PyTorch came out in 2017 we spent over a thousand hours testing it before deciding that we would use it for future courses, software development, and research. Since that time PyTorch has become the world’s fastest-growing deep learning library and is already used for most research papers at top conferences. This is generally a leading indicator of usage in industry, because these are the papers that end up getting used in products and services commercially. We have found that PyTorch is the most flexible and expressive library for deep learning. It does not trade off speed for simplicity, but provides both.\nPyTorch works best as a low-level foundation library, providing the basic operations for higher-level functionality. The fastai library is the most popular library for adding this higher-level functionality on top of PyTorch. It’s also particularly well suited to the purposes of this book, because it is unique in providing a deeply layered software architecture (there’s even a peer-reviewed academic paper about this layered API). In this book, as we go deeper and deeper into the foundations of deep learning, we will also go deeper and deeper into the layers of fastai. This book covers version 2 of the fastai library, which is a from-scratch rewrite providing many unique features.\nHowever, it doesn’t really matter what software you learn, because it takes only a few days to learn to switch from one library to another. What really matters is learning the deep learning foundations and techniques properly. Our focus will be on using code that clearly expresses the concepts that you need to learn. Where we are teaching high-level concepts, we will use high-level fastai code. Where we are teaching low-level concepts, we will use low-level PyTorch, or even pure Python code.\nIf it feels like new deep learning libraries are appearing at a rapid pace nowadays, then you need to be prepared for a much faster rate of change in the coming months and years. As more people enter the field, they will bring more skills and ideas, and try more things. You should assume that whatever specific libraries and software you learn today will be obsolete in a year or two. Just think about the number of changes in libraries and technology stacks that occur all the time in the world of web programming—a much more mature and slow-growing area than deep learning. We strongly believe that the focus in learning needs to be on understanding the underlying techniques and how to apply them in practice, and how to quickly build expertise in new tools and techniques as they are released.\nBy the end of the book, you’ll understand nearly all the code that’s inside fastai (and much of PyTorch too), because in each chapter we’ll be digging a level deeper to show you exactly what’s going on as we build and train our models. This means that you’ll have learned the most important best practices used in modern deep learning—not just how to use them, but how they really work and are implemented. If you want to use those approaches in another framework, you’ll have the knowledge you need to do so if needed.\nSince the most important thing for learning deep learning is writing code and experimenting, it’s important that you have a great platform for experimenting with code. The most popular programming experimentation platform is called Jupyter. This is what we will be using throughout this book. We will show you how you can use Jupyter to train and experiment with models and introspect every stage of the data pre-processing and model development pipeline. Jupyter Notebook is the most popular tool for doing data science in Python, for good reason. It is powerful, flexible, and easy to use. We think you will love it!\nLet’s see it in practice and train our first model."
  },
  {
    "objectID": "posts/01_intro.html#your-first-model",
    "href": "posts/01_intro.html#your-first-model",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "Your First Model",
    "text": "Your First Model\nAs we said before, we will teach you how to do things before we explain why they work. Following this top-down approach, we will begin by actually training an image classifier to recognize dogs and cats with almost 100% accuracy. To train this model and run our experiments, you will need to do some initial setup. Don’t worry, it’s not as hard as it looks.\n\ns: Do not skip the setup part even if it looks intimidating at first, especially if you have little or no experience using things like a terminal or the command line. Most of that is actually not necessary and you will find that the easiest servers can be set up with just your usual web browser. It is crucial that you run your own experiments in parallel with this book in order to learn.\n\n\nGetting a GPU Deep Learning Server\nTo do nearly everything in this book, you’ll need access to a computer with an NVIDIA GPU (unfortunately other brands of GPU are not fully supported by the main deep learning libraries). However, we don’t recommend you buy one; in fact, even if you already have one, we don’t suggest you use it just yet! Setting up a computer takes time and energy, and you want all your energy to focus on deep learning right now. Therefore, we instead suggest you rent access to a computer that already has everything you need preinstalled and ready to go. Costs can be as little as US$0.25 per hour while you’re using it, and some options are even free.\n\njargon: Graphics Processing Unit (GPU): Also known as a graphics card. A special kind of processor in your computer that can handle thousands of single tasks at the same time, especially designed for displaying 3D environments on a computer for playing games. These same basic tasks are very similar to what neural networks do, such that GPUs can run neural networks hundreds of times faster than regular CPUs. All modern computers contain a GPU, but few contain the right kind of GPU necessary for deep learning.\n\nThe best choice of GPU servers to use with this book will change over time, as companies come and go and prices change. We maintain a list of our recommended options on the book’s website, so go there now and follow the instructions to get connected to a GPU deep learning server. Don’t worry, it only takes about two minutes to get set up on most platforms, and many don’t even require any payment, or even a credit card, to get started.\n\nA: My two cents: heed this advice! If you like computers you will be tempted to set up your own box. Beware! It is feasible but surprisingly involved and distracting. There is a good reason this book is not titled, Everything You Ever Wanted to Know About Ubuntu System Administration, NVIDIA Driver Installation, apt-get, conda, pip, and Jupyter Notebook Configuration. That would be a book of its own. Having designed and deployed our production machine learning infrastructure at work, I can testify it has its satisfactions, but it is as unrelated to modeling as maintaining an airplane is to flying one.\n\nEach option shown on the website includes a tutorial; after completing the tutorial, you will end up with a screen looking like &lt;&gt;.\n\nYou are now ready to run your first Jupyter notebook!\n\njargon: Jupyter Notebook: A piece of software that allows you to include formatted text, code, images, videos, and much more, all within a single interactive document. Jupyter received the highest honor for software, the ACM Software System Award, thanks to its wide use and enormous impact in many academic fields and in industry. Jupyter Notebook is the software most widely used by data scientists for developing and interacting with deep learning models.\n\n\n\nRunning Your First Notebook\nThe notebooks are labeled by chapter and then by notebook number, so that they are in the same order as they are presented in this book. So, the very first notebook you will see listed is the notebook that you need to use now. You will be using this notebook to train a model that can recognize dog and cat photos. To do this, you’ll be downloading a dataset of dog and cat photos, and using that to train a model. A dataset is simply a bunch of data—it could be images, emails, financial indicators, sounds, or anything else. There are many datasets made freely available that are suitable for training models. Many of these datasets are created by academics to help advance research, many are made available for competitions (there are competitions where data scientists can compete to see who has the most accurate model!), and some are by-products of other processes (such as financial filings).\n\nnote: Full and Stripped Notebooks: There are two folders containing different versions of the notebooks. The full folder contains the exact notebooks used to create the book you’re reading now, with all the prose and outputs. The stripped version has the same headings and code cells, but all outputs and prose have been removed. After reading a section of the book, we recommend working through the stripped notebooks, with the book closed, and seeing if you can figure out what each cell will show before you execute it. Also try to recall what the code is demonstrating.\n\nTo open a notebook, just click on it. The notebook will open, and it will look something like &lt;&gt; (note that there may be slight differences in details across different platforms; you can ignore those differences).\n\nA notebook consists of cells. There are two main types of cell:\n\nCells containing formatted text, images, and so forth. These use a format called markdown, which you will learn about soon.\nCells containing code that can be executed, and outputs will appear immediately underneath (which could be plain text, tables, images, animations, sounds, or even interactive applications).\n\nJupyter notebooks can be in one of two modes: edit mode or command mode. In edit mode typing on your keyboard enters the letters into the cell in the usual way. However, in command mode, you will not see any flashing cursor, and the keys on your keyboard will each have a special function.\nBefore continuing, press the Escape key on your keyboard to switch to command mode (if you are already in command mode, this does nothing, so press it now just in case). To see a complete list of all of the functions available, press H; press Escape to remove this help screen. Notice that in command mode, unlike most programs, commands do not require you to hold down Control, Alt, or similar—you simply press the required letter key.\nYou can make a copy of a cell by pressing C (the cell needs to be selected first, indicated with an outline around it; if it is not already selected, click on it once). Then press V to paste a copy of it.\nClick on the cell that begins with the line “# CLICK ME” to select it. The first character in that line indicates that what follows is a comment in Python, so it is ignored when executing the cell. The rest of the cell is, believe it or not, a complete system for creating and training a state-of-the-art model for recognizing cats versus dogs. So, let’s train it now! To do so, just press Shift-Enter on your keyboard, or press the Play button on the toolbar. Then wait a few minutes while the following things happen:\n\nA dataset called the Oxford-IIIT Pet Dataset that contains 7,349 images of cats and dogs from 37 different breeds will be downloaded from the fast.ai datasets collection to the GPU server you are using, and will then be extracted.\nA pretrained model that has already been trained on 1.3 million images, using a competition-winning model will be downloaded from the internet.\nThe pretrained model will be fine-tuned using the latest advances in transfer learning, to create a model that is specially customized for recognizing dogs and cats.\n\nThe first two steps only need to be run once on your GPU server. If you run the cell again, it will use the dataset and model that have already been downloaded, rather than downloading them again. Let’s take a look at the contents of the cell, and the results (&lt;&gt;):\n\n\nShow code\n#id first_training\n#caption Results from the first training\n# CLICK ME\nfrom fastai.vision.all import *\npath = untar_data(URLs.PETS)/'images'\n\ndef is_cat(x): return x[0].isupper()\ndls = ImageDataLoaders.from_name_func(\n    path, get_image_files(path), valid_pct=0.2, seed=42,\n    label_func=is_cat, item_tfms=Resize(224))\n\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlearn.fine_tune(1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.180385\n0.023942\n0.006766\n00:16\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.056023\n0.007580\n0.004060\n00:20\n\n\n\n\n\nYou will probably not see exactly the same results that are in the book. There are a lot of sources of small random variation involved in training models. We generally see an error rate of well less than 0.02 in this example, however.\n\nimportant: Training Time: Depending on your network speed, it might take a few minutes to download the pretrained model and dataset. Running fine_tune might take a minute or so. Often models in this book take a few minutes to train, as will your own models, so it’s a good idea to come up with good techniques to make the most of this time. For instance, keep reading the next section while your model trains, or open up another notebook and use it for some coding experiments.\n\n\n\nSidebar: This Book Was Written in Jupyter Notebooks\nWe wrote this book using Jupyter notebooks, so for nearly every chart, table, and calculation in this book, we’ll be showing you the exact code required to replicate it yourself. That’s why very often in this book, you will see some code immediately followed by a table, a picture or just some text. If you go on the book’s website you will find all the code, and you can try running and modifying every example yourself.\nYou just saw how a cell that outputs a table looks inside the book. Here is an example of a cell that outputs text:\n\n\nShow code\n1+1\n\n\n2\n\n\nJupyter will always print or show the result of the last line (if there is one). For instance, here is an example of a cell that outputs an image:\n\n\nShow code\nimg = PILImage.create(image_cat())\nimg.to_thumb(192)\n\n\n\n\n\n\n\n\n\n\n\nEnd sidebar\nSo, how do we know if this model is any good? In the last column of the table you can see the error rate, which is the proportion of images that were incorrectly identified. The error rate serves as our metric—our measure of model quality, chosen to be intuitive and comprehensible. As you can see, the model is nearly perfect, even though the training time was only a few seconds (not including the one-time downloading of the dataset and the pretrained model). In fact, the accuracy you’ve achieved already is far better than anybody had ever achieved just 10 years ago!\nFinally, let’s check that this model actually works. Go and get a photo of a dog, or a cat; if you don’t have one handy, just search Google Images and download an image that you find there. Now execute the cell with uploader defined. It will output a button you can click, so you can select the image you want to classify:\n\n\nShow code\n#hide_output\nuploader = widgets.FileUpload()\nuploader\n\n\n\n\n\n\nNow you can pass the uploaded file to the model. Make sure that it is a clear photo of a single dog or a cat, and not a line drawing, cartoon, or similar. The notebook will tell you whether it thinks it is a dog or a cat, and how confident it is. Hopefully, you’ll find that your model did a great job:\n\n\nShow code\n#hide\n# For the book, we can't actually click an upload button, so we fake it\nuploader = SimpleNamespace(data = ['images/chapter1_cat_example.jpg'])\n\n\n\n\nShow code\nimg = PILImage.create(uploader.data[0])\nis_cat,_,probs = learn.predict(img)\nprint(f\"Is this a cat?: {is_cat}.\")\nprint(f\"Probability it's a cat: {probs[1].item():.6f}\")\n\n\n\n\n\nIs this a cat?: True.\nProbability it's a cat: 1.000000\n\n\nCongratulations on your first classifier!\nBut what does this mean? What did you actually do? In order to explain this, let’s zoom out again to take in the big picture.\n\n\nWhat Is Machine Learning?\nYour classifier is a deep learning model. As was already mentioned, deep learning models use neural networks, which originally date from the 1950s and have become powerful very recently thanks to recent advancements.\nAnother key piece of context is that deep learning is just a modern area in the more general discipline of machine learning. To understand the essence of what you did when you trained your own classification model, you don’t need to understand deep learning. It is enough to see how your model and your training process are examples of the concepts that apply to machine learning in general.\nSo in this section, we will describe what machine learning is. We will look at the key concepts, and show how they can be traced back to the original essay that introduced them.\nMachine learning is, like regular programming, a way to get computers to complete a specific task. But how would we use regular programming to do what we just did in the last section: recognize dogs versus cats in photos? We would have to write down for the computer the exact steps necessary to complete the task.\nNormally, it’s easy enough for us to write down the steps to complete a task when we’re writing a program. We just think about the steps we’d take if we had to do the task by hand, and then we translate them into code. For instance, we can write a function that sorts a list. In general, we’d write a function that looks something like &lt;&gt; (where inputs might be an unsorted list, and results a sorted list).\n\n\nShow code\n#hide_input\n#caption A traditional program\n#id basic_program\n#alt Pipeline inputs, program, results\ngv('''program[shape=box3d width=1 height=0.7]\ninputs-&gt;program-&gt;results''')\n\n\n\n\n\n\n\n\n\nBut for recognizing objects in a photo that’s a bit tricky; what are the steps we take when we recognize an object in a picture? We really don’t know, since it all happens in our brain without us being consciously aware of it!\nRight back at the dawn of computing, in 1949, an IBM researcher named Arthur Samuel started working on a different way to get computers to complete tasks, which he called machine learning. In his classic 1962 essay “Artificial Intelligence: A Frontier of Automation”, he wrote:\n\n: Programming a computer for such computations is, at best, a difficult task, not primarily because of any inherent complexity in the computer itself but, rather, because of the need to spell out every minute step of the process in the most exasperating detail. Computers, as any programmer will tell you, are giant morons, not giant brains.\n\nHis basic idea was this: instead of telling the computer the exact steps required to solve a problem, show it examples of the problem to solve, and let it figure out how to solve it itself. This turned out to be very effective: by 1961 his checkers-playing program had learned so much that it beat the Connecticut state champion! Here’s how he described his idea (from the same essay as above):\n\n: Suppose we arrange for some automatic means of testing the effectiveness of any current weight assignment in terms of actual performance and provide a mechanism for altering the weight assignment so as to maximize the performance. We need not go into the details of such a procedure to see that it could be made entirely automatic and to see that a machine so programmed would “learn” from its experience.\n\nThere are a number of powerful concepts embedded in this short statement:\n\nThe idea of a “weight assignment”\nThe fact that every weight assignment has some “actual performance”\nThe requirement that there be an “automatic means” of testing that performance,\n\nThe need for a “mechanism” (i.e., another automatic process) for improving the performance by changing the weight assignments\n\nLet us take these concepts one by one, in order to understand how they fit together in practice. First, we need to understand what Samuel means by a weight assignment.\nWeights are just variables, and a weight assignment is a particular choice of values for those variables. The program’s inputs are values that it processes in order to produce its results—for instance, taking image pixels as inputs, and returning the classification “dog” as a result. The program’s weight assignments are other values that define how the program will operate.\nSince they will affect the program they are in a sense another kind of input, so we will update our basic picture in &lt;&gt; and replace it with &lt;&gt; in order to take this into account.\n\n\nShow code\n#hide_input\n#caption A program using weight assignment\n#id weight_assignment\ngv('''model[shape=box3d width=1 height=0.7]\ninputs-&gt;model-&gt;results; weights-&gt;model''')\n\n\n\n\n\n\n\n\n\nWe’ve changed the name of our box from program to model. This is to follow modern terminology and to reflect that the model is a special kind of program: it’s one that can do many different things, depending on the weights. It can be implemented in many different ways. For instance, in Samuel’s checkers program, different values of the weights would result in different checkers-playing strategies.\n(By the way, what Samuel called “weights” are most generally referred to as model parameters these days, in case you have encountered that term. The term weights is reserved for a particular type of model parameter.)\nNext, Samuel said we need an automatic means of testing the effectiveness of any current weight assignment in terms of actual performance. In the case of his checkers program, the “actual performance” of a model would be how well it plays. And you could automatically test the performance of two models by setting them to play against each other, and seeing which one usually wins.\nFinally, he says we need a mechanism for altering the weight assignment so as to maximize the performance. For instance, we could look at the difference in weights between the winning model and the losing model, and adjust the weights a little further in the winning direction.\nWe can now see why he said that such a procedure could be made entirely automatic and… a machine so programmed would “learn” from its experience. Learning would become entirely automatic when the adjustment of the weights was also automatic—when instead of us improving a model by adjusting its weights manually, we relied on an automated mechanism that produced adjustments based on performance.\n&lt;&gt; shows the full picture of Samuel’s idea of training a machine learning model.\n\n\nShow code\n#hide_input\n#caption Training a machine learning model\n#id training_loop\n#alt The basic training loop\ngv('''ordering=in\nmodel[shape=box3d width=1 height=0.7]\ninputs-&gt;model-&gt;results; weights-&gt;model; results-&gt;performance\nperformance-&gt;weights[constraint=false label=update]''')\n\n\n\n\n\n\n\n\n\nNotice the distinction between the model’s results (e.g., the moves in a checkers game) and its performance (e.g., whether it wins the game, or how quickly it wins).\nAlso note that once the model is trained—that is, once we’ve chosen our final, best, favorite weight assignment—then we can think of the weights as being part of the model, since we’re not varying them any more.\nTherefore, actually using a model after it’s trained looks like &lt;&gt;.\n\n\nShow code\n#hide_input\n#caption Using a trained model as a program\n#id using_model\ngv('''model[shape=box3d width=1 height=0.7]\ninputs-&gt;model-&gt;results''')\n\n\n\n\n\n\n\n\n\nThis looks identical to our original diagram in &lt;&gt;, just with the word program replaced with model. This is an important insight: a trained model can be treated just like a regular computer program.\n\njargon: Machine Learning: The training of programs developed by allowing a computer to learn from its experience, rather than through manually coding the individual steps.\n\n\n\nWhat Is a Neural Network?\nIt’s not too hard to imagine what the model might look like for a checkers program. There might be a range of checkers strategies encoded, and some kind of search mechanism, and then the weights could vary how strategies are selected, what parts of the board are focused on during a search, and so forth. But it’s not at all obvious what the model might look like for an image recognition program, or for understanding text, or for many other interesting problems we might imagine.\nWhat we would like is some kind of function that is so flexible that it could be used to solve any given problem, just by varying its weights. Amazingly enough, this function actually exists! It’s the neural network, which we already discussed. That is, if you regard a neural network as a mathematical function, it turns out to be a function which is extremely flexible depending on its weights. A mathematical proof called the universal approximation theorem shows that this function can solve any problem to any level of accuracy, in theory. The fact that neural networks are so flexible means that, in practice, they are often a suitable kind of model, and you can focus your effort on the process of training them—that is, of finding good weight assignments.\nBut what about that process? One could imagine that you might need to find a new “mechanism” for automatically updating weights for every problem. This would be laborious. What we’d like here as well is a completely general way to update the weights of a neural network, to make it improve at any given task. Conveniently, this also exists!\nThis is called stochastic gradient descent (SGD). We’ll see how neural networks and SGD work in detail in &lt;&gt;, as well as explaining the universal approximation theorem. For now, however, we will instead use Samuel’s own words: We need not go into the details of such a procedure to see that it could be made entirely automatic and to see that a machine so programmed would “learn” from its experience.\n\nJ: Don’t worry, neither SGD nor neural nets are mathematically complex. Both nearly entirely rely on addition and multiplication to do their work (but they do a lot of addition and multiplication!). The main reaction we hear from students when they see the details is: “Is that all it is?”\n\nIn other words, to recap, a neural network is a particular kind of machine learning model, which fits right in to Samuel’s original conception. Neural networks are special because they are highly flexible, which means they can solve an unusually wide range of problems just by finding the right weights. This is powerful, because stochastic gradient descent provides us a way to find those weight values automatically.\nHaving zoomed out, let’s now zoom back in and revisit our image classification problem using Samuel’s framework.\nOur inputs are the images. Our weights are the weights in the neural net. Our model is a neural net. Our results are the values that are calculated by the neural net, like “dog” or “cat.”\nWhat about the next piece, an automatic means of testing the effectiveness of any current weight assignment in terms of actual performance? Determining “actual performance” is easy enough: we can simply define our model’s performance as its accuracy at predicting the correct answers.\nPutting this all together, and assuming that SGD is our mechanism for updating the weight assignments, we can see how our image classifier is a machine learning model, much like Samuel envisioned.\n\n\nA Bit of Deep Learning Jargon\nSamuel was working in the 1960s, and since then terminology has changed. Here is the modern deep learning terminology for all the pieces we have discussed:\n\nThe functional form of the model is called its architecture (but be careful—sometimes people use model as a synonym of architecture, so this can get confusing).\nThe weights are called parameters.\nThe predictions are calculated from the independent variable, which is the data not including the labels.\nThe results of the model are called predictions.\nThe measure of performance is called the loss.\nThe loss depends not only on the predictions, but also the correct labels (also known as targets or the dependent variable); e.g., “dog” or “cat.”\n\nAfter making these changes, our diagram in &lt;&gt; looks like &lt;&gt;.\n\n\nShow code\n#hide_input\n#caption Detailed training loop\n#id detailed_loop\ngv('''ordering=in\nmodel[shape=box3d width=1 height=0.7 label=architecture]\ninputs-&gt;model-&gt;predictions; parameters-&gt;model; labels-&gt;loss; predictions-&gt;loss\nloss-&gt;parameters[constraint=false label=update]''')\n\n\n\n\n\n\n\n\n\n\n\nLimitations Inherent To Machine Learning\nFrom this picture we can now see some fundamental things about training a deep learning model:\n\nA model cannot be created without data.\nA model can only learn to operate on the patterns seen in the input data used to train it.\nThis learning approach only creates predictions, not recommended actions.\nIt’s not enough to just have examples of input data; we need labels for that data too (e.g., pictures of dogs and cats aren’t enough to train a model; we need a label for each one, saying which ones are dogs, and which are cats).\n\nGenerally speaking, we’ve seen that most organizations that say they don’t have enough data, actually mean they don’t have enough labeled data. If any organization is interested in doing something in practice with a model, then presumably they have some inputs they plan to run their model against. And presumably they’ve been doing that some other way for a while (e.g., manually, or with some heuristic program), so they have data from those processes! For instance, a radiology practice will almost certainly have an archive of medical scans (since they need to be able to check how their patients are progressing over time), but those scans may not have structured labels containing a list of diagnoses or interventions (since radiologists generally create free-text natural language reports, not structured data). We’ll be discussing labeling approaches a lot in this book, because it’s such an important issue in practice.\nSince these kinds of machine learning models can only make predictions (i.e., attempt to replicate labels), this can result in a significant gap between organizational goals and model capabilities. For instance, in this book you’ll learn how to create a recommendation system that can predict what products a user might purchase. This is often used in e-commerce, such as to customize products shown on a home page by showing the highest-ranked items. But such a model is generally created by looking at a user and their buying history (inputs) and what they went on to buy or look at (labels), which means that the model is likely to tell you about products the user already has or already knows about, rather than new products that they are most likely to be interested in hearing about. That’s very different to what, say, an expert at your local bookseller might do, where they ask questions to figure out your taste, and then tell you about authors or series that you’ve never heard of before.\nAnother critical insight comes from considering how a model interacts with its environment. This can create feedback loops, as described here:\n\nA predictive policing model is created based on where arrests have been made in the past. In practice, this is not actually predicting crime, but rather predicting arrests, and is therefore partially simply reflecting biases in existing policing processes.\nLaw enforcement officers then might use that model to decide where to focus their police activity, resulting in increased arrests in those areas.\nData on these additional arrests would then be fed back in to retrain future versions of the model.\n\nThis is a positive feedback loop, where the more the model is used, the more biased the data becomes, making the model even more biased, and so forth.\nFeedback loops can also create problems in commercial settings. For instance, a video recommendation system might be biased toward recommending content consumed by the biggest watchers of video (e.g., conspiracy theorists and extremists tend to watch more online video content than the average), resulting in those users increasing their video consumption, resulting in more of those kinds of videos being recommended. We’ll consider this topic more in detail in &lt;&gt;.\nNow that you have seen the base of the theory, let’s go back to our code example and see in detail how the code corresponds to the process we just described.\n\n\nHow Our Image Recognizer Works\nLet’s see just how our image recognizer code maps to these ideas. We’ll put each line into a separate cell, and look at what each one is doing (we won’t explain every detail of every parameter yet, but will give a description of the important bits; full details will come later in the book).\nThe first line imports all of the fastai.vision library.\nfrom fastai.vision.all import *\nThis gives us all of the functions and classes we will need to create a wide variety of computer vision models.\n\nJ: A lot of Python coders recommend avoiding importing a whole library like this (using the import * syntax), because in large software projects it can cause problems. However, for interactive work such as in a Jupyter notebook, it works great. The fastai library is specially designed to support this kind of interactive use, and it will only import the necessary pieces into your environment.\n\nThe second line downloads a standard dataset from the fast.ai datasets collection (if not previously downloaded) to your server, extracts it (if not previously extracted), and returns a Path object with the extracted location:\npath = untar_data(URLs.PETS)/'images'\n\nS: Throughout my time studying at fast.ai, and even still today, I’ve learned a lot about productive coding practices. The fastai library and fast.ai notebooks are full of great little tips that have helped make me a better programmer. For instance, notice that the fastai library doesn’t just return a string containing the path to the dataset, but a Path object. This is a really useful class from the Python 3 standard library that makes accessing files and directories much easier. If you haven’t come across it before, be sure to check out its documentation or a tutorial and try it out. Note that the https://book.fast.ai[website] contains links to recommended tutorials for each chapter. I’ll keep letting you know about little coding tips I’ve found useful as we come across them.\n\nIn the third line we define a function, is_cat, which labels cats based on a filename rule provided by the dataset creators:\ndef is_cat(x): return x[0].isupper()\nWe use that function in the fourth line, which tells fastai what kind of dataset we have and how it is structured:\ndls = ImageDataLoaders.from_name_func(\n    path, get_image_files(path), valid_pct=0.2, seed=42,\n    label_func=is_cat, item_tfms=Resize(224))\nThere are various different classes for different kinds of deep learning datasets and problems—here we’re using ImageDataLoaders. The first part of the class name will generally be the type of data you have, such as image, or text.\nThe other important piece of information that we have to tell fastai is how to get the labels from the dataset. Computer vision datasets are normally structured in such a way that the label for an image is part of the filename, or path—most commonly the parent folder name. fastai comes with a number of standardized labeling methods, and ways to write your own. Here we’re telling fastai to use the is_cat function we just defined.\nFinally, we define the Transforms that we need. A Transform contains code that is applied automatically during training; fastai includes many predefined Transforms, and adding new ones is as simple as creating a Python function. There are two kinds: item_tfms are applied to each item (in this case, each item is resized to a 224-pixel square), while batch_tfms are applied to a batch of items at a time using the GPU, so they’re particularly fast (we’ll see many examples of these throughout this book).\nWhy 224 pixels? This is the standard size for historical reasons (old pretrained models require this size exactly), but you can pass pretty much anything. If you increase the size, you’ll often get a model with better results (since it will be able to focus on more details), but at the price of speed and memory consumption; the opposite is true if you decrease the size.\n\nNote: Classification and Regression: classification and regression have very specific meanings in machine learning. These are the two main types of model that we will be investigating in this book. A classification model is one which attempts to predict a class, or category. That is, it’s predicting from a number of discrete possibilities, such as “dog” or “cat.” A regression model is one which attempts to predict one or more numeric quantities, such as a temperature or a location. Sometimes people use the word regression to refer to a particular kind of model called a linear regression model; this is a bad practice, and we won’t be using that terminology in this book!\n\nThe Pet dataset contains 7,390 pictures of dogs and cats, consisting of 37 different breeds. Each image is labeled using its filename: for instance the file great_pyrenees_173.jpg is the 173rd example of an image of a Great Pyrenees breed dog in the dataset. The filenames start with an uppercase letter if the image is a cat, and a lowercase letter otherwise. We have to tell fastai how to get labels from the filenames, which we do by calling from_name_func (which means that labels can be extracted using a function applied to the filename), and passing is_cat, which returns x[0].isupper(), which evaluates to True if the first letter is uppercase (i.e., it’s a cat).\nThe most important parameter to mention here is valid_pct=0.2. This tells fastai to hold out 20% of the data and not use it for training the model at all. This 20% of the data is called the validation set; the remaining 80% is called the training set. The validation set is used to measure the accuracy of the model. By default, the 20% that is held out is selected randomly. The parameter seed=42 sets the random seed to the same value every time we run this code, which means we get the same validation set every time we run it—this way, if we change our model and retrain it, we know that any differences are due to the changes to the model, not due to having a different random validation set.\nfastai will always show you your model’s accuracy using only the validation set, never the training set. This is absolutely critical, because if you train a large enough model for a long enough time, it will eventually memorize the label of every item in your dataset! The result will not actually be a useful model, because what we care about is how well our model works on previously unseen images. That is always our goal when creating a model: for it to be useful on data that the model only sees in the future, after it has been trained.\nEven when your model has not fully memorized all your data, earlier on in training it may have memorized certain parts of it. As a result, the longer you train for, the better your accuracy will get on the training set; the validation set accuracy will also improve for a while, but eventually it will start getting worse as the model starts to memorize the training set, rather than finding generalizable underlying patterns in the data. When this happens, we say that the model is overfitting.\n&lt;&gt; shows what happens when you overfit, using a simplified example where we have just one parameter, and some randomly generated data based on the function x**2. As you can see, although the predictions in the overfit model are accurate for data near the observed data points, they are way off when outside of that range.\n\nOverfitting is the single most important and challenging issue when training for all machine learning practitioners, and all algorithms. As you will see, it is very easy to create a model that does a great job at making predictions on the exact data it has been trained on, but it is much harder to make accurate predictions on data the model has never seen before. And of course, this is the data that will actually matter in practice. For instance, if you create a handwritten digit classifier (as we will very soon!) and use it to recognize numbers written on checks, then you are never going to see any of the numbers that the model was trained on—checks will have slightly different variations of writing to deal with. You will learn many methods to avoid overfitting in this book. However, you should only use those methods after you have confirmed that overfitting is actually occurring (i.e., you have actually observed the validation accuracy getting worse during training). We often see practitioners using over-fitting avoidance techniques even when they have enough data that they didn’t need to do so, ending up with a model that may be less accurate than what they could have achieved.\n\nimportant: Validation Set: When you train a model, you must always have both a training set and a validation set, and must measure the accuracy of your model only on the validation set. If you train for too long, with not enough data, you will see the accuracy of your model start to get worse; this is called overfitting. fastai defaults valid_pct to 0.2, so even if you forget, fastai will create a validation set for you!\n\nThe fifth line of the code training our image recognizer tells fastai to create a convolutional neural network (CNN) and specifies what architecture to use (i.e. what kind of model to create), what data we want to train it on, and what metric to use:\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nWhy a CNN? It’s the current state-of-the-art approach to creating computer vision models. We’ll be learning all about how CNNs work in this book. Their structure is inspired by how the human vision system works.\nThere are many different architectures in fastai, which we will introduce in this book (as well as discussing how to create your own). Most of the time, however, picking an architecture isn’t a very important part of the deep learning process. It’s something that academics love to talk about, but in practice it is unlikely to be something you need to spend much time on. There are some standard architectures that work most of the time, and in this case we’re using one called ResNet that we’ll be talking a lot about during the book; it is both fast and accurate for many datasets and problems. The 34 in resnet34 refers to the number of layers in this variant of the architecture (other options are 18, 50, 101, and 152). Models using architectures with more layers take longer to train, and are more prone to overfitting (i.e. you can’t train them for as many epochs before the accuracy on the validation set starts getting worse). On the other hand, when using more data, they can be quite a bit more accurate.\nWhat is a metric? A metric is a function that measures the quality of the model’s predictions using the validation set, and will be printed at the end of each epoch. In this case, we’re using error_rate, which is a function provided by fastai that does just what it says: tells you what percentage of images in the validation set are being classified incorrectly. Another common metric for classification is accuracy (which is just 1.0 - error_rate). fastai provides many more, which will be discussed throughout this book.\nThe concept of a metric may remind you of loss, but there is an important distinction. The entire purpose of loss is to define a “measure of performance” that the training system can use to update weights automatically. In other words, a good choice for loss is a choice that is easy for stochastic gradient descent to use. But a metric is defined for human consumption, so a good metric is one that is easy for you to understand, and that hews as closely as possible to what you want the model to do. At times, you might decide that the loss function is a suitable metric, but that is not necessarily the case.\nvision_learner also has a parameter pretrained, which defaults to True (so it’s used in this case, even though we haven’t specified it), which sets the weights in your model to values that have already been trained by experts to recognize a thousand different categories across 1.3 million photos (using the famous ImageNet dataset). A model that has weights that have already been trained on some other dataset is called a pretrained model. You should nearly always use a pretrained model, because it means that your model, before you’ve even shown it any of your data, is already very capable. And, as you’ll see, in a deep learning model many of these capabilities are things you’ll need, almost regardless of the details of your project. For instance, parts of pretrained models will handle edge, gradient, and color detection, which are needed for many tasks.\nWhen using a pretrained model, vision_learner will remove the last layer, since that is always specifically customized to the original training task (i.e. ImageNet dataset classification), and replace it with one or more new layers with randomized weights, of an appropriate size for the dataset you are working with. This last part of the model is known as the head.\nUsing pretrained models is the most important method we have to allow us to train more accurate models, more quickly, with less data, and less time and money. You might think that would mean that using pretrained models would be the most studied area in academic deep learning… but you’d be very, very wrong! The importance of pretrained models is generally not recognized or discussed in most courses, books, or software library features, and is rarely considered in academic papers. As we write this at the start of 2020, things are just starting to change, but it’s likely to take a while. So be careful: most people you speak to will probably greatly underestimate what you can do in deep learning with few resources, because they probably won’t deeply understand how to use pretrained models.\nUsing a pretrained model for a task different to what it was originally trained for is known as transfer learning. Unfortunately, because transfer learning is so under-studied, few domains have pretrained models available. For instance, there are currently few pretrained models available in medicine, making transfer learning challenging to use in that domain. In addition, it is not yet well understood how to use transfer learning for tasks such as time series analysis.\n\njargon: Transfer learning: Using a pretrained model for a task different to what it was originally trained for.\n\nThe sixth line of our code tells fastai how to fit the model:\nlearn.fine_tune(1)\nAs we’ve discussed, the architecture only describes a template for a mathematical function; it doesn’t actually do anything until we provide values for the millions of parameters it contains.\nThis is the key to deep learning—determining how to fit the parameters of a model to get it to solve your problem. In order to fit a model, we have to provide at least one piece of information: how many times to look at each image (known as number of epochs). The number of epochs you select will largely depend on how much time you have available, and how long you find it takes in practice to fit your model. If you select a number that is too small, you can always train for more epochs later.\nBut why is the method called fine_tune, and not fit? fastai actually does have a method called fit, which does indeed fit a model (i.e. look at images in the training set multiple times, each time updating the parameters to make the predictions closer and closer to the target labels). But in this case, we’ve started with a pretrained model, and we don’t want to throw away all those capabilities that it already has. As you’ll learn in this book, there are some important tricks to adapt a pretrained model for a new dataset—a process called fine-tuning.\n\njargon: Fine-tuning: A transfer learning technique where the parameters of a pretrained model are updated by training for additional epochs using a different task to that used for pretraining.\n\nWhen you use the fine_tune method, fastai will use these tricks for you. There are a few parameters you can set (which we’ll discuss later), but in the default form shown here, it does two steps:\n\nUse one epoch to fit just those parts of the model necessary to get the new random head to work correctly with your dataset.\nUse the number of epochs requested when calling the method to fit the entire model, updating the weights of the later layers (especially the head) faster than the earlier layers (which, as we’ll see, generally don’t require many changes from the pretrained weights).\n\nThe head of a model is the part that is newly added to be specific to the new dataset. An epoch is one complete pass through the dataset. After calling fit, the results after each epoch are printed, showing the epoch number, the training and validation set losses (the “measure of performance” used for training the model), and any metrics you’ve requested (error rate, in this case).\nSo, with all this code our model learned to recognize cats and dogs just from labeled examples. But how did it do it?\n\n\nWhat Our Image Recognizer Learned\nAt this stage we have an image recognizer that is working very well, but we have no idea what it is actually doing! Although many people complain that deep learning results in impenetrable “black box” models (that is, something that gives predictions but that no one can understand), this really couldn’t be further from the truth. There is a vast body of research showing how to deeply inspect deep learning models, and get rich insights from them. Having said that, all kinds of machine learning models (including deep learning, and traditional statistical models) can be challenging to fully understand, especially when considering how they will behave when coming across data that is very different to the data used to train them. We’ll be discussing this issue throughout this book.\nIn 2013 a PhD student, Matt Zeiler, and his supervisor, Rob Fergus, published the paper “Visualizing and Understanding Convolutional Networks”, which showed how to visualize the neural network weights learned in each layer of a model. They carefully analyzed the model that won the 2012 ImageNet competition, and used this analysis to greatly improve the model, such that they were able to go on to win the 2013 competition! &lt;&gt; is the picture that they published of the first layer’s weights.\n\nThis picture requires some explanation. For each layer, the image part with the light gray background shows the reconstructed weights pictures, and the larger section at the bottom shows the parts of the training images that most strongly matched each set of weights. For layer 1, what we can see is that the model has discovered weights that represent diagonal, horizontal, and vertical edges, as well as various different gradients. (Note that for each layer only a subset of the features are shown; in practice there are thousands across all of the layers.) These are the basic building blocks that the model has learned for computer vision. They have been widely analyzed by neuroscientists and computer vision researchers, and it turns out that these learned building blocks are very similar to the basic visual machinery in the human eye, as well as the handcrafted computer vision features that were developed prior to the days of deep learning. The next layer is represented in &lt;&gt;.\n\nFor layer 2, there are nine examples of weight reconstructions for each of the features found by the model. We can see that the model has learned to create feature detectors that look for corners, repeating lines, circles, and other simple patterns. These are built from the basic building blocks developed in the first layer. For each of these, the right-hand side of the picture shows small patches from actual images which these features most closely match. For instance, the particular pattern in row 2, column 1 matches the gradients and textures associated with sunsets.\n&lt;&gt; shows the image from the paper showing the results of reconstructing the features of layer 3.\n\nAs you can see by looking at the righthand side of this picture, the features are now able to identify and match with higher-level semantic components, such as car wheels, text, and flower petals. Using these components, layers four and five can identify even higher-level concepts, as shown in &lt;&gt;.\n\nThis article was studying an older model called AlexNet that only contained five layers. Networks developed since then can have hundreds of layers—so you can imagine how rich the features developed by these models can be!\nWhen we fine-tuned our pretrained model earlier, we adapted what those last layers focus on (flowers, humans, animals) to specialize on the cats versus dogs problem. More generally, we could specialize such a pretrained model on many different tasks. Let’s have a look at some examples.\n\n\nImage Recognizers Can Tackle Non-Image Tasks\nAn image recognizer can, as its name suggests, only recognize images. But a lot of things can be represented as images, which means that an image recogniser can learn to complete many tasks.\nFor instance, a sound can be converted to a spectrogram, which is a chart that shows the amount of each frequency at each time in an audio file. Fast.ai student Ethan Sutin used this approach to easily beat the published accuracy of a state-of-the-art environmental sound detection model using a dataset of 8,732 urban sounds. fastai’s show_batch clearly shows how each different sound has a quite distinctive spectrogram, as you can see in &lt;&gt;.\n\nA time series can easily be converted into an image by simply plotting the time series on a graph. However, it is often a good idea to try to represent your data in a way that makes it as easy as possible to pull out the most important components. In a time series, things like seasonality and anomalies are most likely to be of interest. There are various transformations available for time series data. For instance, fast.ai student Ignacio Oguiza created images from a time series dataset for olive oil classification, using a technique called Gramian Angular Difference Field (GADF); you can see the result in &lt;&gt;. He then fed those images to an image classification model just like the one you see in this chapter. His results, despite having only 30 training set images, were well over 90% accurate, and close to the state of the art.\n\nAnother interesting fast.ai student project example comes from Gleb Esman. He was working on fraud detection at Splunk, using a dataset of users’ mouse movements and mouse clicks. He turned these into pictures by drawing an image where the position, speed, and acceleration of the mouse pointer was displayed using coloured lines, and the clicks were displayed using small colored circles, as shown in &lt;&gt;. He then fed this into an image recognition model just like the one we’ve used in this chapter, and it worked so well that it led to a patent for this approach to fraud analytics!\n\nAnother example comes from the paper “Malware Classification with Deep Convolutional Neural Networks” by Mahmoud Kalash et al., which explains that “the malware binary file is divided into 8-bit sequences which are then converted to equivalent decimal values. This decimal vector is reshaped and a gray-scale image is generated that represents the malware sample,” like in &lt;&gt;.\n\nThe authors then show “pictures” generated through this process of malware in different categories, as shown in &lt;&gt;.\n\nAs you can see, the different types of malware look very distinctive to the human eye. The model the researchers trained based on this image representation was more accurate at malware classification than any previous approach shown in the academic literature. This suggests a good rule of thumb for converting a dataset into an image representation: if the human eye can recognize categories from the images, then a deep learning model should be able to do so too.\nIn general, you’ll find that a small number of general approaches in deep learning can go a long way, if you’re a bit creative in how you represent your data! You shouldn’t think of approaches like the ones described here as “hacky workarounds,” because actually they often (as here) beat previously state-of-the-art results. These really are the right ways to think about these problem domains.\n\n\nJargon Recap\nWe just covered a lot of information so let’s recap briefly, &lt;&gt; provides a handy vocabulary.\n[[dljargon]]\n.Deep learning vocabulary\n[options=\"header\"]\n|=====\n| Term | Meaning\n|Label | The data that we're trying to predict, such as \"dog\" or \"cat\"\n|Architecture | The _template_ of the model that we're trying to fit; the actual mathematical function that we're passing the input data and parameters to\n|Model | The combination of the architecture with a particular set of parameters\n|Parameters | The values in the model that change what task it can do, and are updated through model training\n|Fit | Update the parameters of the model such that the predictions of the model using the input data match the target labels\n|Train | A synonym for _fit_\n|Pretrained model | A model that has already been trained, generally using a large dataset, and will be fine-tuned\n|Fine-tune | Update a pretrained model for a different task\n|Epoch | One complete pass through the input data\n|Loss | A measure of how good the model is, chosen to drive training via SGD\n|Metric | A measurement of how good the model is, using the validation set, chosen for human consumption\n|Validation set | A set of data held out from training, used only for measuring how good the model is\n|Training set | The data used for fitting the model; does not include any data from the validation set\n|Overfitting | Training a model in such a way that it _remembers_ specific features of the input data, rather than generalizing well to data not seen during training\n|CNN | Convolutional neural network; a type of neural network that works particularly well for computer vision tasks\n|=====\nWith this vocabulary in hand, we are now in a position to bring together all the key concepts introduced so far. Take a moment to review those definitions and read the following summary. If you can follow the explanation, then you’re well equipped to understand the discussions to come.\nMachine learning is a discipline where we define a program not by writing it entirely ourselves, but by learning from data. Deep learning is a specialty within machine learning that uses neural networks with multiple layers. Image classification is a representative example (also known as image recognition). We start with labeled data; that is, a set of images where we have assigned a label to each image indicating what it represents. Our goal is to produce a program, called a model, which, given a new image, will make an accurate prediction regarding what that new image represents.\nEvery model starts with a choice of architecture, a general template for how that kind of model works internally. The process of training (or fitting) the model is the process of finding a set of parameter values (or weights) that specialize that general architecture into a model that works well for our particular kind of data. In order to define how well a model does on a single prediction, we need to define a loss function, which determines how we score a prediction as good or bad.\nTo make the training process go faster, we might start with a pretrained model—a model that has already been trained on someone else’s data. We can then adapt it to our data by training it a bit more on our data, a process called fine-tuning.\nWhen we train a model, a key concern is to ensure that our model generalizes—that is, that it learns general lessons from our data which also apply to new items it will encounter, so that it can make good predictions on those items. The risk is that if we train our model badly, instead of learning general lessons it effectively memorizes what it has already seen, and then it will make poor predictions about new images. Such a failure is called overfitting. In order to avoid this, we always divide our data into two parts, the training set and the validation set. We train the model by showing it only the training set and then we evaluate how well the model is doing by seeing how well it performs on items from the validation set. In this way, we check if the lessons the model learns from the training set are lessons that generalize to the validation set. In order for a person to assess how well the model is doing on the validation set overall, we define a metric. During the training process, when the model has seen every item in the training set, we call that an epoch.\nAll these concepts apply to machine learning in general. That is, they apply to all sorts of schemes for defining a model by training it with data. What makes deep learning distinctive is a particular class of architectures: the architectures based on neural networks. In particular, tasks like image classification rely heavily on convolutional neural networks, which we will discuss shortly."
  },
  {
    "objectID": "posts/01_intro.html#deep-learning-is-not-just-for-image-classification",
    "href": "posts/01_intro.html#deep-learning-is-not-just-for-image-classification",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "Deep Learning Is Not Just for Image Classification",
    "text": "Deep Learning Is Not Just for Image Classification\nDeep learning’s effectiveness for classifying images has been widely discussed in recent years, even showing superhuman results on complex tasks like recognizing malignant tumors in CT scans. But it can do a lot more than this, as we will show here.\nFor instance, let’s talk about something that is critically important for autonomous vehicles: localizing objects in a picture. If a self-driving car doesn’t know where a pedestrian is, then it doesn’t know how to avoid one! Creating a model that can recognize the content of every individual pixel in an image is called segmentation. Here is how we can train a segmentation model with fastai, using a subset of the Camvid dataset from the paper “Semantic Object Classes in Video: A High-Definition Ground Truth Database” by Gabruel J. Brostow, Julien Fauqueur, and Roberto Cipolla:\n\n\nShow code\npath = untar_data(URLs.CAMVID_TINY)\ndls = SegmentationDataLoaders.from_label_func(\n    path, bs=8, fnames = get_image_files(path/\"images\"),\n    label_func = lambda o: path/'labels'/f'{o.stem}_P{o.suffix}',\n    codes = np.loadtxt(path/'codes.txt', dtype=str)\n)\n\nlearn = unet_learner(dls, resnet34)\nlearn.fine_tune(8)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n2.641862\n2.140568\n00:02\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n1.624964\n1.464210\n00:02\n\n\n1\n1.454148\n1.284032\n00:02\n\n\n2\n1.342955\n1.048562\n00:02\n\n\n3\n1.199765\n0.852787\n00:02\n\n\n4\n1.078090\n0.838206\n00:02\n\n\n5\n0.975496\n0.746806\n00:02\n\n\n6\n0.892793\n0.725384\n00:02\n\n\n7\n0.827645\n0.726778\n00:02\n\n\n\n\n\nWe are not even going to walk through this code line by line, because it is nearly identical to our previous example! (Although we will be doing a deep dive into segmentation models in &lt;&gt;, along with all of the other models that we are briefly introducing in this chapter, and many, many more.)\nWe can visualize how well it achieved its task, by asking the model to color-code each pixel of an image. As you can see, it nearly perfectly classifies every pixel in every object. For instance, notice that all of the cars are overlaid with the same color and all of the trees are overlaid with the same color (in each pair of images, the lefthand image is the ground truth label and the right is the prediction from the model):\n\n\nShow code\nlearn.show_results(max_n=6, figsize=(7,8))\n\n\n\n\n\n\n\n\n\n\n\n\nOne other area where deep learning has dramatically improved in the last couple of years is natural language processing (NLP). Computers can now generate text, translate automatically from one language to another, analyze comments, label words in sentences, and much more. Here is all of the code necessary to train a model that can classify the sentiment of a movie review better than anything that existed in the world just five years ago:\n\n\nShow code\nfrom fastai.text.all import *\n\ndls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid='test')\nlearn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, metrics=accuracy)\nlearn.fine_tune(4, 1e-2)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.878776\n0.748753\n0.500400\n01:27\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.679118\n0.674778\n0.584040\n02:45\n\n\n1\n0.653671\n0.670396\n0.618040\n02:55\n\n\n2\n0.598665\n0.551815\n0.718920\n05:28\n\n\n3\n0.556812\n0.507450\n0.752480\n03:11\n\n\n\n\n\n#clean If you hit a “CUDA out of memory error” after running this cell, click on the menu Kernel, then restart. Instead of executing the cell above, copy and paste the following code in it:\nfrom fastai.text.all import *\n\ndls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid='test', bs=32)\nlearn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, metrics=accuracy)\nlearn.fine_tune(4, 1e-2)\nThis reduces the batch size to 32 (we will explain this later). If you keep hitting the same error, change 32 to 16.\nThis model is using the “IMDb Large Movie Review dataset” from the paper “Learning Word Vectors for Sentiment Analysis” by Andrew Maas et al. It works well with movie reviews of many thousands of words, but let’s test it out on a very short one to see how it does its thing:\n\n\nShow code\nlearn.predict(\"I really liked that movie!\")\n\n\n\n\n\n('pos', tensor(1), tensor([0.0040, 0.9960]))\n\n\nHere we can see the model has considered the review to be positive. The second part of the result is the index of “pos” in our data vocabulary and the last part is the probabilities attributed to each class (99.6% for “pos” and 0.4% for “neg”).\nNow it’s your turn! Write your own mini movie review, or copy one from the internet, and you can see what this model thinks about it.\n\nSidebar: The Order Matters\nIn a Jupyter notebook, the order in which you execute each cell is very important. It’s not like Excel, where everything gets updated as soon as you type something anywhere—it has an inner state that gets updated each time you execute a cell. For instance, when you run the first cell of the notebook (with the “CLICK ME” comment), you create an object called learn that contains a model and data for an image classification problem. If we were to run the cell just shown in the text (the one that predicts if a review is good or not) straight after, we would get an error as this learn object does not contain a text classification model. This cell needs to be run after the one containing:\nfrom fastai.text.all import *\n\ndls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid='test')\nlearn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, \n                                metrics=accuracy)\nlearn.fine_tune(4, 1e-2)\nThe outputs themselves can be deceiving, because they include the results of the last time the cell was executed; if you change the code inside a cell without executing it, the old (misleading) results will remain.\nExcept when we mention it explicitly, the notebooks provided on the book website are meant to be run in order, from top to bottom. In general, when experimenting, you will find yourself executing cells in any order to go fast (which is a super neat feature of Jupyter Notebook), but once you have explored and arrived at the final version of your code, make sure you can run the cells of your notebooks in order (your future self won’t necessarily remember the convoluted path you took otherwise!).\nIn command mode, pressing 0 twice will restart the kernel (which is the engine powering your notebook). This will wipe your state clean and make it as if you had just started in the notebook. Choose Run All Above from the Cell menu to run all cells above the point where you are. We have found this to be very useful when developing the fastai library.\n\n\nEnd sidebar\nIf you ever have any questions about a fastai method, you should use the function doc, passing it the method name:\ndoc(learn.predict)\nThis will make a small window pop up with content like this:\n\nA brief one-line explanation is provided by doc. The “Show in docs” link takes you to the full documentation, where you’ll find all the details and lots of examples. Also, most of fastai’s methods are just a handful of lines, so you can click the “source” link to see exactly what’s going on behind the scenes.\nLet’s move on to something much less sexy, but perhaps significantly more widely commercially useful: building models from plain tabular data.\n\njargon: Tabular: Data that is in the form of a table, such as from a spreadsheet, database, or CSV file. A tabular model is a model that tries to predict one column of a table based on information in other columns of the table.\n\nIt turns out that looks very similar too. Here is the code necessary to train a model that will predict whether a person is a high-income earner, based on their socioeconomic background:\n\n\nShow code\nfrom fastai.tabular.all import *\npath = untar_data(URLs.ADULT_SAMPLE)\n\ndls = TabularDataLoaders.from_csv(path/'adult.csv', path=path, y_names=\"salary\",\n    cat_names = ['workclass', 'education', 'marital-status', 'occupation',\n                 'relationship', 'race'],\n    cont_names = ['age', 'fnlwgt', 'education-num'],\n    procs = [Categorify, FillMissing, Normalize])\n\nlearn = tabular_learner(dls, metrics=accuracy)\n\n\nAs you see, we had to tell fastai which columns are categorical (that is, contain values that are one of a discrete set of choices, such as occupation) and which are continuous (that is, contain a number that represents a quantity, such as age).\nThere is no pretrained model available for this task (in general, pretrained models are not widely available for any tabular modeling tasks, although some organizations have created them for internal use), so we don’t use fine_tune in this case. Instead we use fit_one_cycle, the most commonly used method for training fastai models from scratch (i.e. without transfer learning):\n\n\nShow code\nlearn.fit_one_cycle(3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.372397\n0.357177\n0.832463\n00:08\n\n\n1\n0.351544\n0.341505\n0.841523\n00:08\n\n\n2\n0.338763\n0.339184\n0.845670\n00:08\n\n\n\n\n\nThis model is using the Adult dataset, from the paper “Scaling Up the Accuracy of Naive-Bayes Classifiers: a Decision-Tree Hybrid” by Rob Kohavi, which contains some demographic data about individuals (like their education, marital status, race, sex, and whether or not they have an annual income greater than $50k). The model is over 80% accurate, and took around 30 seconds to train.\nLet’s look at one more. Recommendation systems are very important, particularly in e-commerce. Companies like Amazon and Netflix try hard to recommend products or movies that users might like. Here’s how to train a model that will predict movies people might like, based on their previous viewing habits, using the MovieLens dataset:\n\n\nShow code\nfrom fastai.collab import *\npath = untar_data(URLs.ML_SAMPLE)\ndls = CollabDataLoaders.from_csv(path/'ratings.csv')\nlearn = collab_learner(dls, y_range=(0.5,5.5))\nlearn.fine_tune(10)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n1.510897\n1.410028\n00:00\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n1.375435\n1.350930\n00:00\n\n\n1\n1.270062\n1.173962\n00:00\n\n\n2\n1.023159\n0.879298\n00:00\n\n\n3\n0.797398\n0.739787\n00:00\n\n\n4\n0.685500\n0.700903\n00:00\n\n\n5\n0.646508\n0.686387\n00:00\n\n\n6\n0.623985\n0.681087\n00:00\n\n\n7\n0.606319\n0.676885\n00:00\n\n\n8\n0.606975\n0.675833\n00:00\n\n\n9\n0.602670\n0.675682\n00:00\n\n\n\n\n\nThis model is predicting movie ratings on a scale of 0.5 to 5.0 to within around 0.6 average error. Since we’re predicting a continuous number, rather than a category, we have to tell fastai what range our target has, using the y_range parameter.\nAlthough we’re not actually using a pretrained model (for the same reason that we didn’t for the tabular model), this example shows that fastai lets us use fine_tune anyway in this case (you’ll learn how and why this works in &lt;&gt;). Sometimes it’s best to experiment with fine_tune versus fit_one_cycle to see which works best for your dataset.\nWe can use the same show_results call we saw earlier to view a few examples of user and movie IDs, actual ratings, and predictions:\n\n\nShow code\nlearn.show_results()\n\n\n\n\n\n\n\n\n\nuserId\nmovieId\nrating\nrating_pred\n\n\n\n\n0\n66.0\n79.0\n4.0\n3.978900\n\n\n1\n97.0\n15.0\n4.0\n3.851795\n\n\n2\n55.0\n79.0\n3.5\n3.945623\n\n\n3\n98.0\n91.0\n4.0\n4.458704\n\n\n4\n53.0\n7.0\n5.0\n4.670005\n\n\n5\n26.0\n69.0\n5.0\n4.319870\n\n\n6\n81.0\n16.0\n4.5\n4.426761\n\n\n7\n80.0\n7.0\n4.0\n4.046183\n\n\n8\n51.0\n94.0\n5.0\n3.499996\n\n\n\n\n\n\n\nSidebar: Datasets: Food for Models\nYou’ve already seen quite a few models in this section, each one trained using a different dataset to do a different task. In machine learning and deep learning, we can’t do anything without data. So, the people that create datasets for us to train our models on are the (often underappreciated) heroes. Some of the most useful and important datasets are those that become important academic baselines; that is, datasets that are widely studied by researchers and used to compare algorithmic changes. Some of these become household names (at least, among households that train models!), such as MNIST, CIFAR-10, and ImageNet.\nThe datasets used in this book have been selected because they provide great examples of the kinds of data that you are likely to encounter, and the academic literature has many examples of model results using these datasets to which you can compare your work.\nMost datasets used in this book took the creators a lot of work to build. For instance, later in the book we’ll be showing you how to create a model that can translate between French and English. The key input to this is a French/English parallel text corpus prepared back in 2009 by Professor Chris Callison-Burch of the University of Pennsylvania. This dataset contains over 20 million sentence pairs in French and English. He built the dataset in a really clever way: by crawling millions of Canadian web pages (which are often multilingual) and then using a set of simple heuristics to transform URLs of French content onto URLs pointing to the same content in English.\nAs you look at datasets throughout this book, think about where they might have come from, and how they might have been curated. Then think about what kinds of interesting datasets you could create for your own projects. (We’ll even take you step by step through the process of creating your own image dataset soon.)\nfast.ai has spent a lot of time creating cut-down versions of popular datasets that are specially designed to support rapid prototyping and experimentation, and to be easier to learn with. In this book we will often start by using one of the cut-down versions and later scale up to the full-size version (just as we’re doing in this chapter!). In fact, this is how the world’s top practitioners do their modeling in practice; they do most of their experimentation and prototyping with subsets of their data, and only use the full dataset when they have a good understanding of what they have to do.\n\n\nEnd sidebar\nEach of the models we trained showed a training and validation loss. A good validation set is one of the most important pieces of the training process. Let’s see why and learn how to create one."
  },
  {
    "objectID": "posts/01_intro.html#validation-sets-and-test-sets",
    "href": "posts/01_intro.html#validation-sets-and-test-sets",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "Validation Sets and Test Sets",
    "text": "Validation Sets and Test Sets\nAs we’ve discussed, the goal of a model is to make predictions about data. But the model training process is fundamentally dumb. If we trained a model with all our data, and then evaluated the model using that same data, we would not be able to tell how well our model can perform on data it hasn’t seen. Without this very valuable piece of information to guide us in training our model, there is a very good chance it would become good at making predictions about that data but would perform poorly on new data.\nTo avoid this, our first step was to split our dataset into two sets: the training set (which our model sees in training) and the validation set, also known as the development set (which is used only for evaluation). This lets us test that the model learns lessons from the training data that generalize to new data, the validation data.\nOne way to understand this situation is that, in a sense, we don’t want our model to get good results by “cheating.” If it makes an accurate prediction for a data item, that should be because it has learned characteristics of that kind of item, and not because the model has been shaped by actually having seen that particular item.\nSplitting off our validation data means our model never sees it in training and so is completely untainted by it, and is not cheating in any way. Right?\nIn fact, not necessarily. The situation is more subtle. This is because in realistic scenarios we rarely build a model just by training its weight parameters once. Instead, we are likely to explore many versions of a model through various modeling choices regarding network architecture, learning rates, data augmentation strategies, and other factors we will discuss in upcoming chapters. Many of these choices can be described as choices of hyperparameters. The word reflects that they are parameters about parameters, since they are the higher-level choices that govern the meaning of the weight parameters.\nThe problem is that even though the ordinary training process is only looking at predictions on the training data when it learns values for the weight parameters, the same is not true of us. We, as modelers, are evaluating the model by looking at predictions on the validation data when we decide to explore new hyperparameter values! So subsequent versions of the model are, indirectly, shaped by us having seen the validation data. Just as the automatic training process is in danger of overfitting the training data, we are in danger of overfitting the validation data through human trial and error and exploration.\nThe solution to this conundrum is to introduce another level of even more highly reserved data, the test set. Just as we hold back the validation data from the training process, we must hold back the test set data even from ourselves. It cannot be used to improve the model; it can only be used to evaluate the model at the very end of our efforts. In effect, we define a hierarchy of cuts of our data, based on how fully we want to hide it from training and modeling processes: training data is fully exposed, the validation data is less exposed, and test data is totally hidden. This hierarchy parallels the different kinds of modeling and evaluation processes themselves—the automatic training process with back propagation, the more manual process of trying different hyper-parameters between training sessions, and the assessment of our final result.\nThe test and validation sets should have enough data to ensure that you get a good estimate of your accuracy. If you’re creating a cat detector, for instance, you generally want at least 30 cats in your validation set. That means that if you have a dataset with thousands of items, using the default 20% validation set size may be more than you need. On the other hand, if you have lots of data, using some of it for validation probably doesn’t have any downsides.\nHaving two levels of “reserved data”—a validation set and a test set, with one level representing data that you are virtually hiding from yourself—may seem a bit extreme. But the reason it is often necessary is because models tend to gravitate toward the simplest way to do good predictions (memorization), and we as fallible humans tend to gravitate toward fooling ourselves about how well our models are performing. The discipline of the test set helps us keep ourselves intellectually honest. That doesn’t mean we always need a separate test set—if you have very little data, you may need to just have a validation set—but generally it’s best to use one if at all possible.\nThis same discipline can be critical if you intend to hire a third party to perform modeling work on your behalf. A third party might not understand your requirements accurately, or their incentives might even encourage them to misunderstand them. A good test set can greatly mitigate these risks and let you evaluate whether their work solves your actual problem.\nTo put it bluntly, if you’re a senior decision maker in your organization (or you’re advising senior decision makers), the most important takeaway is this: if you ensure that you really understand what test and validation sets are and why they’re important, then you’ll avoid the single biggest source of failures we’ve seen when organizations decide to use AI. For instance, if you’re considering bringing in an external vendor or service, make sure that you hold out some test data that the vendor never gets to see. Then you check their model on your test data, using a metric that you choose based on what actually matters to you in practice, and you decide what level of performance is adequate. (It’s also a good idea for you to try out some simple baseline yourself, so you know what a really simple model can achieve. Often it’ll turn out that your simple model performs just as well as one produced by an external “expert”!)\n\nUse Judgment in Defining Test Sets\nTo do a good job of defining a validation set (and possibly a test set), you will sometimes want to do more than just randomly grab a fraction of your original dataset. Remember: a key property of the validation and test sets is that they must be representative of the new data you will see in the future. This may sound like an impossible order! By definition, you haven’t seen this data yet. But you usually still do know some things.\nIt’s instructive to look at a few example cases. Many of these examples come from predictive modeling competitions on the Kaggle platform, which is a good representation of problems and methods you might see in practice.\nOne case might be if you are looking at time series data. For a time series, choosing a random subset of the data will be both too easy (you can look at the data both before and after the dates you are trying to predict) and not representative of most business use cases (where you are using historical data to build a model for use in the future). If your data includes the date and you are building a model to use in the future, you will want to choose a continuous section with the latest dates as your validation set (for instance, the last two weeks or last month of available data).\nSuppose you want to split the time series data in &lt;&gt; into training and validation sets.\n\nA random subset is a poor choice (too easy to fill in the gaps, and not indicative of what you’ll need in production), as we can see in &lt;&gt;.\n\nInstead, use the earlier data as your training set (and the later data for the validation set), as shown in &lt;&gt;.\n\nFor example, Kaggle had a competition to predict the sales in a chain of Ecuadorian grocery stores. Kaggle’s training data ran from Jan 1 2013 to Aug 15 2017, and the test data spanned Aug 16 2017 to Aug 31 2017. That way, the competition organizer ensured that entrants were making predictions for a time period that was in the future, from the perspective of their model. This is similar to the way quant hedge fund traders do back-testing to check whether their models are predictive of future periods, based on past data.\nA second common case is when you can easily anticipate ways the data you will be making predictions for in production may be qualitatively different from the data you have to train your model with.\nIn the Kaggle distracted driver competition, the independent variables are pictures of drivers at the wheel of a car, and the dependent variables are categories such as texting, eating, or safely looking ahead. Lots of pictures are of the same drivers in different positions, as we can see in &lt;&gt;. If you were an insurance company building a model from this data, note that you would be most interested in how the model performs on drivers it hasn’t seen before (since you would likely have training data only for a small group of people). In recognition of this, the test data for the competition consists of images of people that don’t appear in the training set.\n\nIf you put one of the images in &lt;&gt; in your training set and one in the validation set, your model will have an easy time making a prediction for the one in the validation set, so it will seem to be performing better than it would on new people. Another perspective is that if you used all the people in training your model, your model might be overfitting to particularities of those specific people, and not just learning the states (texting, eating, etc.).\nA similar dynamic was at work in the Kaggle fisheries competition to identify the species of fish caught by fishing boats in order to reduce illegal fishing of endangered populations. The test set consisted of boats that didn’t appear in the training data. This means that you’d want your validation set to include boats that are not in the training set.\nSometimes it may not be clear how your validation data will differ. For instance, for a problem using satellite imagery, you’d need to gather more information on whether the training set just contained certain geographic locations, or if it came from geographically scattered data.\nNow that you have gotten a taste of how to build a model, you can decide what you want to dig into next."
  },
  {
    "objectID": "posts/01_intro.html#a-choose-your-own-adventure-moment",
    "href": "posts/01_intro.html#a-choose-your-own-adventure-moment",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "A Choose Your Own Adventure moment",
    "text": "A Choose Your Own Adventure moment\nIf you would like to learn more about how to use deep learning models in practice, including how to identify and fix errors, create a real working web application, and avoid your model causing unexpected harm to your organization or society more generally, then keep reading the next two chapters. If you would like to start learning the foundations of how deep learning works under the hood, skip to &lt;&gt;. (Did you ever read Choose Your Own Adventure books as a kid? Well, this is kind of like that… except with more deep learning than that book series contained.)\nYou will need to read all these chapters to progress further in the book, but it is totally up to you which order you read them in. They don’t depend on each other. If you skip ahead to &lt;&gt;, we will remind you at the end to come back and read the chapters you skipped over before you go any further."
  },
  {
    "objectID": "posts/01_intro.html#questionnaire",
    "href": "posts/01_intro.html#questionnaire",
    "title": "Chapter 1: Introduction to Deep Learning",
    "section": "Questionnaire",
    "text": "Questionnaire\nIt can be hard to know in pages and pages of prose what the key things are that you really need to focus on and remember. So, we’ve prepared a list of questions and suggested steps to complete at the end of each chapter. All the answers are in the text of the chapter, so if you’re not sure about anything here, reread that part of the text and make sure you understand it. Answers to all these questions are also available on the book’s website. You can also visit the forums if you get stuck to get help from other folks studying this material.\nFor more questions, including detailed answers and links to the video timeline, have a look at Radek Osmulski’s aiquizzes.\n\nDo you need these for deep learning?\n\nLots of math T / F\nLots of data T / F\nLots of expensive computers T / F\nA PhD T / F\n\nName five areas where deep learning is now the best in the world.\nWhat was the name of the first device that was based on the principle of the artificial neuron?\nBased on the book of the same name, what are the requirements for parallel distributed processing (PDP)?\nWhat were the two theoretical misunderstandings that held back the field of neural networks?\nWhat is a GPU?\nOpen a notebook and execute a cell containing: 1+1. What happens?\nFollow through each cell of the stripped version of the notebook for this chapter. Before executing each cell, guess what will happen.\nComplete the Jupyter Notebook online appendix.\nWhy is it hard to use a traditional computer program to recognize images in a photo?\nWhat did Samuel mean by “weight assignment”?\nWhat term do we normally use in deep learning for what Samuel called “weights”?\nDraw a picture that summarizes Samuel’s view of a machine learning model.\nWhy is it hard to understand why a deep learning model makes a particular prediction?\nWhat is the name of the theorem that shows that a neural network can solve any mathematical problem to any level of accuracy?\nWhat do you need in order to train a model?\nHow could a feedback loop impact the rollout of a predictive policing model?\nDo we always have to use 224×224-pixel images with the cat recognition model?\nWhat is the difference between classification and regression?\nWhat is a validation set? What is a test set? Why do we need them?\nWhat will fastai do if you don’t provide a validation set?\nCan we always use a random sample for a validation set? Why or why not?\nWhat is overfitting? Provide an example.\nWhat is a metric? How does it differ from “loss”?\nHow can pretrained models help?\nWhat is the “head” of a model?\nWhat kinds of features do the early layers of a CNN find? How about the later layers?\nAre image models only useful for photos?\nWhat is an “architecture”?\nWhat is segmentation?\nWhat is y_range used for? When do we need it?\nWhat are “hyperparameters”?\nWhat’s the best way to avoid failures when using AI in an organization?\n\n\nFurther Research\nEach chapter also has a “Further Research” section that poses questions that aren’t fully answered in the text, or gives more advanced assignments. Answers to these questions aren’t on the book’s website; you’ll need to do your own research!\n\nWhy is a GPU useful for deep learning? How is a CPU different, and why is it less effective for deep learning?\nTry to think of three areas where feedback loops might impact the use of machine learning. See if you can find documented examples of that happening in practice."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FastAI Notebooks Collection",
    "section": "",
    "text": "This is a clean, easy-to-navigate collection of the FastAI course notebooks - “Practical Deep Learning for Coders”.\n\n\n\nBrowse All Notebooks - Complete list of all course materials\nChapter 1: Introduction - Start your deep learning journey here\n\n\n\n\n20 Core Chapters covering: - Image classification and computer vision - Natural language processing - Tabular data and collaborative filtering\n- Deep learning foundations and advanced topics\nPlus helpful appendices for Jupyter and blogging workflows.\n\nReady to dive in? Head to the Notebooks section! 🚀\n\n\n\n\n“The best way to learn is by doing, and the best way to remember is by documenting.”\n\n\n\n\nReady to dive in? Head to the Notebooks section! 🚀"
  },
  {
    "objectID": "index.html#quick-start",
    "href": "index.html#quick-start",
    "title": "FastAI Notebooks Collection",
    "section": "",
    "text": "Browse All Notebooks - Complete list of all course materials\nChapter 1: Introduction - Start your deep learning journey here"
  },
  {
    "objectID": "index.html#whats-inside",
    "href": "index.html#whats-inside",
    "title": "FastAI Notebooks Collection",
    "section": "",
    "text": "20 Core Chapters covering: - Image classification and computer vision - Natural language processing - Tabular data and collaborative filtering\n- Deep learning foundations and advanced topics\nPlus helpful appendices for Jupyter and blogging workflows.\n\nReady to dive in? Head to the Notebooks section! 🚀\n\n\n\n\n“The best way to learn is by doing, and the best way to remember is by documenting.”\n\n\n\n\nReady to dive in? Head to the Notebooks section! 🚀"
  },
  {
    "objectID": "posts/02_production.html",
    "href": "posts/02_production.html",
    "title": "From Model to Production",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\nfrom fastai.vision.widgets import *\n[[chapter_production]]\nThe six lines of code we saw in &lt;&gt; are just one small part of the process of using deep learning in practice. In this chapter, we’re going to use a computer vision example to look at the end-to-end process of creating a deep learning application. More specifically, we’re going to build a bear classifier! In the process, we’ll discuss the capabilities and constraints of deep learning, explore how to create datasets, look at possible gotchas when using deep learning in practice, and more. Many of the key points will apply equally well to other deep learning problems, such as those in &lt;&gt;. If you work through a problem similar in key respects to our example problems, we expect you to get excellent results with little code, quickly.\nLet’s start with how you should frame your problem."
  },
  {
    "objectID": "posts/02_production.html#the-practice-of-deep-learning",
    "href": "posts/02_production.html#the-practice-of-deep-learning",
    "title": "From Model to Production",
    "section": "The Practice of Deep Learning",
    "text": "The Practice of Deep Learning\nWe’ve seen that deep learning can solve a lot of challenging problems quickly and with little code. As a beginner, there’s a sweet spot of problems that are similar enough to our example problems that you can very quickly get extremely useful results. However, deep learning isn’t magic! The same 6 lines of code won’t work for every problem anyone can think of today. Underestimating the constraints and overestimating the capabilities of deep learning may lead to frustratingly poor results, at least until you gain some experience and can solve the problems that arise. Conversely, overestimating the constraints and underestimating the capabilities of deep learning may mean you do not attempt a solvable problem because you talk yourself out of it.\nWe often talk to people who underestimate both the constraints and the capabilities of deep learning. Both of these can be problems: underestimating the capabilities means that you might not even try things that could be very beneficial, and underestimating the constraints might mean that you fail to consider and react to important issues.\nThe best thing to do is to keep an open mind. If you remain open to the possibility that deep learning might solve part of your problem with less data or complexity than you expect, then it is possible to design a process where you can find the specific capabilities and constraints related to your particular problem as you work through the process. This doesn’t mean making any risky bets — we will show you how you can gradually roll out models so that they don’t create significant risks, and can even backtest them prior to putting them in production.\n\nStarting Your Project\nSo where should you start your deep learning journey? The most important thing is to ensure that you have some project to work on—it is only through working on your own projects that you will get real experience building and using models. When selecting a project, the most important consideration is data availability. Regardless of whether you are doing a project just for your own learning or for practical application in your organization, you want something where you can get started quickly. We have seen many students, researchers, and industry practitioners waste months or years while they attempt to find their perfect dataset. The goal is not to find the “perfect” dataset or project, but just to get started and iterate from there.\nIf you take this approach, then you will be on your third iteration of learning and improving while the perfectionists are still in the planning stages!\nWe also suggest that you iterate from end to end in your project; that is, don’t spend months fine-tuning your model, or polishing the perfect GUI, or labelling the perfect dataset… Instead, complete every step as well as you can in a reasonable amount of time, all the way to the end. For instance, if your final goal is an application that runs on a mobile phone, then that should be what you have after each iteration. But perhaps in the early iterations you take some shortcuts, for instance by doing all of the processing on a remote server, and using a simple responsive web application. By completing the project end to end, you will see where the trickiest bits are, and which bits make the biggest difference to the final result.\nAs you work through this book, we suggest that you complete lots of small experiments, by running and adjusting the notebooks we provide, at the same time that you gradually develop your own projects. That way, you will be getting experience with all of the tools and techniques that we’re explaining, as we discuss them.\n\ns: To make the most of this book, take the time to experiment between each chapter, be it on your own project or by exploring the notebooks we provide. Then try rewriting those notebooks from scratch on a new dataset. It’s only by practicing (and failing) a lot that you will get an intuition of how to train a model.\n\nBy using the end-to-end iteration approach you will also get a better understanding of how much data you really need. For instance, you may find you can only easily get 200 labeled data items, and you can’t really know until you try whether that’s enough to get the performance you need for your application to work well in practice.\nIn an organizational context you will be able to show your colleagues that your idea can really work by showing them a real working prototype. We have repeatedly observed that this is the secret to getting good organizational buy-in for a project.\nSince it is easiest to get started on a project where you already have data available, that means it’s probably easiest to get started on a project related to something you are already doing, because you already have data about things that you are doing. For instance, if you work in the music business, you may have access to many recordings. If you work as a radiologist, you probably have access to lots of medical images. If you are interested in wildlife preservation, you may have access to lots of images of wildlife.\nSometimes, you have to get a bit creative. Maybe you can find some previous machine learning project, such as a Kaggle competition, that is related to your field of interest. Sometimes, you have to compromise. Maybe you can’t find the exact data you need for the precise project you have in mind; but you might be able to find something from a similar domain, or measured in a different way, tackling a slightly different problem. Working on these kinds of similar projects will still give you a good understanding of the overall process, and may help you identify other shortcuts, data sources, and so forth.\nEspecially when you are just starting out with deep learning, it’s not a good idea to branch out into very different areas, to places that deep learning has not been applied to before. That’s because if your model does not work at first, you will not know whether it is because you have made a mistake, or if the very problem you are trying to solve is simply not solvable with deep learning. And you won’t know where to look to get help. Therefore, it is best at first to start with something where you can find an example online where somebody has had good results with something that is at least somewhat similar to what you are trying to achieve, or where you can convert your data into a format similar to what someone else has used before (such as creating an image from your data). Let’s have a look at the state of deep learning, just so you know what kinds of things deep learning is good at right now.\n\n\nThe State of Deep Learning\nLet’s start by considering whether deep learning can be any good at the problem you are looking to work on. This section provides a summary of the state of deep learning at the start of 2020. However, things move very fast, and by the time you read this some of these constraints may no longer exist. We will try to keep the book’s website up-to-date; in addition, a Google search for “what can AI do now” is likely to provide current information.\n\nComputer vision\nThere are many domains in which deep learning has not been used to analyze images yet, but those where it has been tried have nearly universally shown that computers can recognize what items are in an image at least as well as people can—even specially trained people, such as radiologists. This is known as object recognition. Deep learning is also good at recognizing where objects in an image are, and can highlight their locations and name each found object. This is known as object detection (there is also a variant of this that we saw in &lt;&gt;, where every pixel is categorized based on what kind of object it is part of—this is called segmentation). Deep learning algorithms are generally not good at recognizing images that are significantly different in structure or style to those used to train the model. For instance, if there were no black-and-white images in the training data, the model may do poorly on black-and-white images. Similarly, if the training data did not contain hand-drawn images, then the model will probably do poorly on hand-drawn images. There is no general way to check what types of images are missing in your training set, but we will show in this chapter some ways to try to recognize when unexpected image types arise in the data when the model is being used in production (this is known as checking for out-of-domain data).\nOne major challenge for object detection systems is that image labelling can be slow and expensive. There is a lot of work at the moment going into tools to try to make this labelling faster and easier, and to require fewer handcrafted labels to train accurate object detection models. One approach that is particularly helpful is to synthetically generate variations of input images, such as by rotating them or changing their brightness and contrast; this is called data augmentation and also works well for text and other types of models. We will be discussing it in detail in this chapter.\nAnother point to consider is that although your problem might not look like a computer vision problem, it might be possible with a little imagination to turn it into one. For instance, if what you are trying to classify are sounds, you might try converting the sounds into images of their acoustic waveforms and then training a model on those images.\n\n\nText (natural language processing)\nComputers are very good at classifying both short and long documents based on categories such as spam or not spam, sentiment (e.g., is the review positive or negative), author, source website, and so forth. We are not aware of any rigorous work done in this area to compare them to humans, but anecdotally it seems to us that deep learning performance is similar to human performance on these tasks. Deep learning is also very good at generating context-appropriate text, such as replies to social media posts, and imitating a particular author’s style. It’s good at making this content compelling to humans too—in fact, even more compelling than human-generated text. However, deep learning is currently not good at generating correct responses! We don’t currently have a reliable way to, for instance, combine a knowledge base of medical information with a deep learning model for generating medically correct natural language responses. This is very dangerous, because it is so easy to create content that appears to a layman to be compelling, but actually is entirely incorrect.\nAnother concern is that context-appropriate, highly compelling responses on social media could be used at massive scale—thousands of times greater than any troll farm previously seen—to spread disinformation, create unrest, and encourage conflict. As a rule of thumb, text generation models will always be technologically a bit ahead of models recognizing automatically generated text. For instance, it is possible to use a model that can recognize artificially generated content to actually improve the generator that creates that content, until the classification model is no longer able to complete its task.\nDespite these issues, deep learning has many applications in NLP: it can be used to translate text from one language to another, summarize long documents into something that can be digested more quickly, find all mentions of a concept of interest, and more. Unfortunately, the translation or summary could well include completely incorrect information! However, the performance is already good enough that many people are using these systems—for instance, Google’s online translation system (and every other online service we are aware of) is based on deep learning.\n\n\nCombining text and images\nThe ability of deep learning to combine text and images into a single model is, generally, far better than most people intuitively expect. For example, a deep learning model can be trained on input images with output captions written in English, and can learn to generate surprisingly appropriate captions automatically for new images! But again, we have the same warning that we discussed in the previous section: there is no guarantee that these captions will actually be correct.\nBecause of this serious issue, we generally recommend that deep learning be used not as an entirely automated process, but as part of a process in which the model and a human user interact closely. This can potentially make humans orders of magnitude more productive than they would be with entirely manual methods, and actually result in more accurate processes than using a human alone. For instance, an automatic system can be used to identify potential stroke victims directly from CT scans, and send a high-priority alert to have those scans looked at quickly. There is only a three-hour window to treat strokes, so this fast feedback loop could save lives. At the same time, however, all scans could continue to be sent to radiologists in the usual way, so there would be no reduction in human input. Other deep learning models could automatically measure items seen on the scans, and insert those measurements into reports, warning the radiologists about findings that they may have missed, and telling them about other cases that might be relevant.\n\n\nTabular data\nFor analyzing time series and tabular data, deep learning has recently been making great strides. However, deep learning is generally used as part of an ensemble of multiple types of model. If you already have a system that is using random forests or gradient boosting machines (popular tabular modeling tools that you will learn about soon), then switching to or adding deep learning may not result in any dramatic improvement. Deep learning does greatly increase the variety of columns that you can include—for example, columns containing natural language (book titles, reviews, etc.), and high-cardinality categorical columns (i.e., something that contains a large number of discrete choices, such as zip code or product ID). On the down side, deep learning models generally take longer to train than random forests or gradient boosting machines, although this is changing thanks to libraries such as RAPIDS, which provides GPU acceleration for the whole modeling pipeline. We cover the pros and cons of all these methods in detail in &lt;&gt;.\n\n\nRecommendation systems\nRecommendation systems are really just a special type of tabular data. In particular, they generally have a high-cardinality categorical variable representing users, and another one representing products (or something similar). A company like Amazon represents every purchase that has ever been made by its customers as a giant sparse matrix, with customers as the rows and products as the columns. Once they have the data in this format, data scientists apply some form of collaborative filtering to fill in the matrix. For example, if customer A buys products 1 and 10, and customer B buys products 1, 2, 4, and 10, the engine will recommend that A buy 2 and 4. Because deep learning models are good at handling high-cardinality categorical variables, they are quite good at handling recommendation systems. They particularly come into their own, just like for tabular data, when combining these variables with other kinds of data, such as natural language or images. They can also do a good job of combining all of these types of information with additional metadata represented as tables, such as user information, previous transactions, and so forth.\nHowever, nearly all machine learning approaches have the downside that they only tell you what products a particular user might like, rather than what recommendations would be helpful for a user. Many kinds of recommendations for products a user might like may not be at all helpful—for instance, if the user is already familiar with the products, or if they are simply different packagings of products they have already purchased (such as a boxed set of novels, when they already have each of the items in that set). Jeremy likes reading books by Terry Pratchett, and for a while Amazon was recommending nothing but Terry Pratchett books to him (see &lt;&gt;), which really wasn’t helpful because he already was aware of these books!\n\n\n\nOther data types\nOften you will find that domain-specific data types fit very nicely into existing categories. For instance, protein chains look a lot like natural language documents, in that they are long sequences of discrete tokens with complex relationships and meaning throughout the sequence. And indeed, it does turn out that using NLP deep learning methods is the current state-of-the-art approach for many types of protein analysis. As another example, sounds can be represented as spectrograms, which can be treated as images; standard deep learning approaches for images turn out to work really well on spectrograms.\n\n\n\nThe Drivetrain Approach\nThere are many accurate models that are of no use to anyone, and many inaccurate models that are highly useful. To ensure that your modeling work is useful in practice, you need to consider how your work will be used. In 2012 Jeremy, along with Margit Zwemer and Mike Loukides, introduced a method called the Drivetrain Approach for thinking about this issue.\nThe Drivetrain Approach, illustrated in &lt;&gt;, was described in detail in “Designing Great Data Products”. The basic idea is to start with considering your objective, then think about what actions you can take to meet that objective and what data you have (or can acquire) that can help, and then build a model that you can use to determine the best actions to take to get the best results in terms of your objective.\n\nConsider a model in an autonomous vehicle: you want to help a car drive safely from point A to point B without human intervention. Great predictive modeling is an important part of the solution, but it doesn’t stand on its own; as products become more sophisticated, it disappears into the plumbing. Someone using a self-driving car is completely unaware of the hundreds (if not thousands) of models and the petabytes of data that make it work. But as data scientists build increasingly sophisticated products, they need a systematic design approach.\nWe use data not just to generate more data (in the form of predictions), but to produce actionable outcomes. That is the goal of the Drivetrain Approach. Start by defining a clear objective. For instance, Google, when creating their first search engine, considered “What is the user’s main objective in typing in a search query?” This led them to their objective, which was to “show the most relevant search result.” The next step is to consider what levers you can pull (i.e., what actions you can take) to better achieve that objective. In Google’s case, that was the ranking of the search results. The third step was to consider what new data they would need to produce such a ranking; they realized that the implicit information regarding which pages linked to which other pages could be used for this purpose. Only after these first three steps do we begin thinking about building the predictive models. Our objective and available levers, what data we already have and what additional data we will need to collect, determine the models we can build. The models will take both the levers and any uncontrollable variables as their inputs; the outputs from the models can be combined to predict the final state for our objective.\nLet’s consider another example: recommendation systems. The objective of a recommendation engine is to drive additional sales by surprising and delighting the customer with recommendations of items they would not have purchased without the recommendation. The lever is the ranking of the recommendations. New data must be collected to generate recommendations that will cause new sales. This will require conducting many randomized experiments in order to collect data about a wide range of recommendations for a wide range of customers. This is a step that few organizations take; but without it, you don’t have the information you need to actually optimize recommendations based on your true objective (more sales!).\nFinally, you could build two models for purchase probabilities, conditional on seeing or not seeing a recommendation. The difference between these two probabilities is a utility function for a given recommendation to a customer. It will be low in cases where the algorithm recommends a familiar book that the customer has already rejected (both components are small) or a book that they would have bought even without the recommendation (both components are large and cancel each other out).\nAs you can see, in practice often the practical implementation of your models will require a lot more than just training a model! You’ll often need to run experiments to collect more data, and consider how to incorporate your models into the overall system you’re developing. Speaking of data, let’s now focus on how to find data for your project."
  },
  {
    "objectID": "posts/02_production.html#gathering-data",
    "href": "posts/02_production.html#gathering-data",
    "title": "From Model to Production",
    "section": "Gathering Data",
    "text": "Gathering Data\nFor many types of projects, you may be able to find all the data you need online. The project we’ll be completing in this chapter is a bear detector. It will discriminate between three types of bear: grizzly, black, and teddy bears. There are many images on the internet of each type of bear that we can use. We just need a way to find them and download them. We’ve provided a tool you can use for this purpose, so you can follow along with this chapter and create your own image recognition application for whatever kinds of objects you’re interested in. In the fast.ai course, thousands of students have presented their work in the course forums, displaying everything from hummingbird varieties in Trinidad to bus types in Panama—one student even created an application that would help his fiancée recognize his 16 cousins during Christmas vacation!\nAt the time of writing, Bing Image Search is the best option we know of for finding and downloading images. It’s free for up to 1,000 queries per month, and each query can download up to 150 images. However, something better might have come along between when we wrote this and when you’re reading the book, so be sure to check out the book’s website for our current recommendation.\n\nimportant: Keeping in Touch With the Latest Services: Services that can be used for creating datasets come and go all the time, and their features, interfaces, and pricing change regularly too. In this section, we’ll show how to use the Bing Image Search API available at the time this book was written. We’ll be providing more options and more up to date information on the book’s website, so be sure to have a look there now to get the most current information on how to download images from the web to create a dataset for deep learning."
  },
  {
    "objectID": "posts/02_production.html#from-data-to-dataloaders",
    "href": "posts/02_production.html#from-data-to-dataloaders",
    "title": "From Model to Production",
    "section": "From Data to DataLoaders",
    "text": "From Data to DataLoaders\nDataLoaders is a thin class that just stores whatever DataLoader objects you pass to it, and makes them available as train and valid. Although it’s a very simple class, it’s very important in fastai: it provides the data for your model. The key functionality in DataLoaders is provided with just these four lines of code (it has some other minor functionality we’ll skip over for now):\nclass DataLoaders(GetAttr):\n    def __init__(self, *loaders): self.loaders = loaders\n    def __getitem__(self, i): return self.loaders[i]\n    train,valid = add_props(lambda i,self: self[i])\n\njargon: DataLoaders: A fastai class that stores multiple DataLoader objects you pass to it, normally a train and a valid, although it’s possible to have as many as you like. The first two are made available as properties.\n\nLater in the book you’ll also learn about the Dataset and Datasets classes, which have the same relationship.\nTo turn our downloaded data into a DataLoaders object we need to tell fastai at least four things:\n\nWhat kinds of data we are working with\nHow to get the list of items\nHow to label these items\nHow to create the validation set\n\nSo far we have seen a number of factory methods for particular combinations of these things, which are convenient when you have an application and data structure that happen to fit into those predefined methods. For when you don’t, fastai has an extremely flexible system called the data block API. With this API you can fully customize every stage of the creation of your DataLoaders. Here is what we need to create a DataLoaders for the dataset that we just downloaded:\n\n\nShow code\nbears = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=Resize(128))\n\n\nLet’s look at each of these arguments in turn. First we provide a tuple where we specify what types we want for the independent and dependent variables:\nblocks=(ImageBlock, CategoryBlock)\nThe independent variable is the thing we are using to make predictions from, and the dependent variable is our target. In this case, our independent variables are images, and our dependent variables are the categories (type of bear) for each image. We will see many other types of block in the rest of this book.\nFor this DataLoaders our underlying items will be file paths. We have to tell fastai how to get a list of those files. The get_image_files function takes a path, and returns a list of all of the images in that path (recursively, by default):\nget_items=get_image_files\nOften, datasets that you download will already have a validation set defined. Sometimes this is done by placing the images for the training and validation sets into different folders. Sometimes it is done by providing a CSV file in which each filename is listed along with which dataset it should be in. There are many ways that this can be done, and fastai provides a very general approach that allows you to use one of its predefined classes for this, or to write your own. In this case, however, we simply want to split our training and validation sets randomly. However, we would like to have the same training/validation split each time we run this notebook, so we fix the random seed (computers don’t really know how to create random numbers at all, but simply create lists of numbers that look random; if you provide the same starting point for that list each time—called the seed—then you will get the exact same list each time):\nsplitter=RandomSplitter(valid_pct=0.2, seed=42)\nThe independent variable is often referred to as x and the dependent variable is often referred to as y. Here, we are telling fastai what function to call to create the labels in our dataset:\nget_y=parent_label\nparent_label is a function provided by fastai that simply gets the name of the folder a file is in. Because we put each of our bear images into folders based on the type of bear, this is going to give us the labels that we need.\nOur images are all different sizes, and this is a problem for deep learning: we don’t feed the model one image at a time but several of them (what we call a mini-batch). To group them in a big array (usually called a tensor) that is going to go through our model, they all need to be of the same size. So, we need to add a transform which will resize these images to the same size. Item transforms are pieces of code that run on each individual item, whether it be an image, category, or so forth. fastai includes many predefined transforms; we use the Resize transform here:\nitem_tfms=Resize(128)\nThis command has given us a DataBlock object. This is like a template for creating a DataLoaders. We still need to tell fastai the actual source of our data—in this case, the path where the images can be found:\n\n\nShow code\ndls = bears.dataloaders(path)\n\n\nA DataLoaders includes validation and training DataLoaders. DataLoader is a class that provides batches of a few items at a time to the GPU. We’ll be learning a lot more about this class in the next chapter. When you loop through a DataLoader fastai will give you 64 (by default) items at a time, all stacked up into a single tensor. We can take a look at a few of those items by calling the show_batch method on a DataLoader:\n\n\nShow code\ndls.valid.show_batch(max_n=4, nrows=1)\n\n\n\n\n\n\n\n\n\nBy default Resize crops the images to fit a square shape of the size requested, using the full width or height. This can result in losing some important details. Alternatively, you can ask fastai to pad the images with zeros (black), or squish/stretch them:\n\n\nShow code\nbears = bears.new(item_tfms=Resize(128, ResizeMethod.Squish))\ndls = bears.dataloaders(path)\ndls.valid.show_batch(max_n=4, nrows=1)\n\n\n\n\n\n\n\n\n\n\n\nShow code\nbears = bears.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode='zeros'))\ndls = bears.dataloaders(path)\ndls.valid.show_batch(max_n=4, nrows=1)\n\n\n\n\n\n\n\n\n\nAll of these approaches seem somewhat wasteful, or problematic. If we squish or stretch the images they end up as unrealistic shapes, leading to a model that learns that things look different to how they actually are, which we would expect to result in lower accuracy. If we crop the images then we remove some of the features that allow us to perform recognition. For instance, if we were trying to recognize breeds of dog or cat, we might end up cropping out a key part of the body or the face necessary to distinguish between similar breeds. If we pad the images then we have a whole lot of empty space, which is just wasted computation for our model and results in a lower effective resolution for the part of the image we actually use.\nInstead, what we normally do in practice is to randomly select part of the image, and crop to just that part. On each epoch (which is one complete pass through all of our images in the dataset) we randomly select a different part of each image. This means that our model can learn to focus on, and recognize, different features in our images. It also reflects how images work in the real world: different photos of the same thing may be framed in slightly different ways.\nIn fact, an entirely untrained neural network knows nothing whatsoever about how images behave. It doesn’t even recognize that when an object is rotated by one degree, it still is a picture of the same thing! So actually training the neural network with examples of images where the objects are in slightly different places and slightly different sizes helps it to understand the basic concept of what an object is, and how it can be represented in an image.\nHere’s another example where we replace Resize with RandomResizedCrop, which is the transform that provides the behavior we just described. The most important parameter to pass in is min_scale, which determines how much of the image to select at minimum each time:\n\n\nShow code\nbears = bears.new(item_tfms=RandomResizedCrop(128, min_scale=0.3))\ndls = bears.dataloaders(path)\ndls.train.show_batch(max_n=4, nrows=1, unique=True)\n\n\n\n\n\n\n\n\n\nWe used unique=True to have the same image repeated with different versions of this RandomResizedCrop transform. This is a specific example of a more general technique, called data augmentation.\n\nData Augmentation\nData augmentation refers to creating random variations of our input data, such that they appear different, but do not actually change the meaning of the data. Examples of common data augmentation techniques for images are rotation, flipping, perspective warping, brightness changes and contrast changes. For natural photo images such as the ones we are using here, a standard set of augmentations that we have found work pretty well are provided with the aug_transforms function. Because our images are now all the same size, we can apply these augmentations to an entire batch of them using the GPU, which will save a lot of time. To tell fastai we want to use these transforms on a batch, we use the batch_tfms parameter (note that we’re not using RandomResizedCrop in this example, so you can see the differences more clearly; we’re also using double the amount of augmentation compared to the default, for the same reason):\n\n\nShow code\nbears = bears.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))\ndls = bears.dataloaders(path)\ndls.train.show_batch(max_n=8, nrows=2, unique=True)\n\n\n\n\n\n\n\n\n\nNow that we have assembled our data in a format fit for model training, let’s actually train an image classifier using it."
  },
  {
    "objectID": "posts/02_production.html#training-your-model-and-using-it-to-clean-your-data",
    "href": "posts/02_production.html#training-your-model-and-using-it-to-clean-your-data",
    "title": "From Model to Production",
    "section": "Training Your Model, and Using It to Clean Your Data",
    "text": "Training Your Model, and Using It to Clean Your Data\nTime to use the same lines of code as in &lt;&gt; to train our bear classifier.\nWe don’t have a lot of data for our problem (150 pictures of each sort of bear at most), so to train our model, we’ll use RandomResizedCrop with an image size of 224 px, which is fairly standard for image classification, and default aug_transforms:\n\n\nShow code\nbears = bears.new(\n    item_tfms=RandomResizedCrop(224, min_scale=0.5),\n    batch_tfms=aug_transforms())\ndls = bears.dataloaders(path)\n\n\nWe can now create our Learner and fine-tune it in the usual way:\n\n\nShow code\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(4)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.235733\n0.212541\n0.087302\n00:05\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.213371\n0.112450\n0.023810\n00:05\n\n\n1\n0.173855\n0.072306\n0.023810\n00:06\n\n\n2\n0.147096\n0.039068\n0.015873\n00:06\n\n\n3\n0.123984\n0.026801\n0.015873\n00:06\n\n\n\n\n\nNow let’s see whether the mistakes the model is making are mainly thinking that grizzlies are teddies (that would be bad for safety!), or that grizzlies are black bears, or something else. To visualize this, we can create a confusion matrix:\n\n\nShow code\ninterp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix()\n\n\n\n\n\n\n\n\n\n\n\n\nThe rows represent all the black, grizzly, and teddy bears in our dataset, respectively. The columns represent the images which the model predicted as black, grizzly, and teddy bears, respectively. Therefore, the diagonal of the matrix shows the images which were classified correctly, and the off-diagonal cells represent those which were classified incorrectly. This is one of the many ways that fastai allows you to view the results of your model. It is (of course!) calculated using the validation set. With the color-coding, the goal is to have white everywhere except the diagonal, where we want dark blue. Our bear classifier isn’t making many mistakes!\nIt’s helpful to see where exactly our errors are occurring, to see whether they’re due to a dataset problem (e.g., images that aren’t bears at all, or are labeled incorrectly, etc.), or a model problem (perhaps it isn’t handling images taken with unusual lighting, or from a different angle, etc.). To do this, we can sort our images by their loss.\nThe loss is a number that is higher if the model is incorrect (especially if it’s also confident of its incorrect answer), or if it’s correct, but not confident of its correct answer. In a couple of chapters we’ll learn in depth how loss is calculated and used in the training process. For now, plot_top_losses shows us the images with the highest loss in our dataset. As the title of the output says, each image is labeled with four things: prediction, actual (target label), loss, and probability. The probability here is the confidence level, from zero to one, that the model has assigned to its prediction:\n\n\nShow code\ninterp.plot_top_losses(5, nrows=1)\n\n\n\n\n\n\n\n\n\nThis output shows that the image with the highest loss is one that has been predicted as “grizzly” with high confidence. However, it’s labeled (based on our Bing image search) as “black.” We’re not bear experts, but it sure looks to us like this label is incorrect! We should probably change its label to “grizzly.”\nThe intuitive approach to doing data cleaning is to do it before you train a model. But as you’ve seen in this case, a model can actually help you find data issues more quickly and easily. So, we normally prefer to train a quick and simple model first, and then use it to help us with data cleaning.\nfastai includes a handy GUI for data cleaning called ImageClassifierCleaner that allows you to choose a category and the training versus validation set and view the highest-loss images (in order), along with menus to allow images to be selected for removal or relabeling:\n\n\nShow code\n#hide_output\ncleaner = ImageClassifierCleaner(learn)\ncleaner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow code\n#hide\n# for idx in cleaner.delete(): cleaner.fns[idx].unlink()\n# for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)\n\n\nWe can see that amongst our “black bears” is an image that contains two bears: one grizzly, one black. So, we should choose &lt;Delete&gt; in the menu under this image. ImageClassifierCleaner doesn’t actually do the deleting or changing of labels for you; it just returns the indices of items to change. So, for instance, to delete (unlink) all images selected for deletion, we would run:\nfor idx in cleaner.delete(): cleaner.fns[idx].unlink()\nTo move images for which we’ve selected a different category, we would run:\nfor idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)\n\ns: Cleaning the data and getting it ready for your model are two of the biggest challenges for data scientists; they say it takes 90% of their time. The fastai library aims to provide tools that make it as easy as possible.\n\nWe’ll be seeing more examples of model-driven data cleaning throughout this book. Once we’ve cleaned up our data, we can retrain our model. Try it yourself, and see if your accuracy improves!\n\nnote: No Need for Big Data: After cleaning the dataset using these steps, we generally are seeing 100% accuracy on this task. We even see that result when we download a lot fewer images than the 150 per class we’re using here. As you can see, the common complaint that you need massive amounts of data to do deep learning can be a very long way from the truth!\n\nNow that we have trained our model, let’s see how we can deploy it to be used in practice."
  },
  {
    "objectID": "posts/02_production.html#turning-your-model-into-an-online-application",
    "href": "posts/02_production.html#turning-your-model-into-an-online-application",
    "title": "From Model to Production",
    "section": "Turning Your Model into an Online Application",
    "text": "Turning Your Model into an Online Application\nWe are now going to look at what it takes to turn this model into a working online application. We will just go as far as creating a basic working prototype; we do not have the scope in this book to teach you all the details of web application development generally.\n\nUsing the Model for Inference\nOnce you’ve got a model you’re happy with, you need to save it, so that you can then copy it over to a server where you’ll use it in production. Remember that a model consists of two parts: the architecture and the trained parameters. The easiest way to save the model is to save both of these, because that way when you load a model you can be sure that you have the matching architecture and parameters. To save both parts, use the export method.\nThis method even saves the definition of how to create your DataLoaders. This is important, because otherwise you would have to redefine how to transform your data in order to use your model in production. fastai automatically uses your validation set DataLoader for inference by default, so your data augmentation will not be applied, which is generally what you want.\nWhen you call export, fastai will save a file called “export.pkl”:\n\n\nShow code\nlearn.export()\n\n\nLet’s check that the file exists, by using the ls method that fastai adds to Python’s Path class:\n\n\nShow code\npath = Path()\npath.ls(file_exts='.pkl')\n\n\n(#1) [Path('export.pkl')]\n\n\nYou’ll need this file wherever you deploy your app to. For now, let’s try to create a simple app within our notebook.\nWhen we use a model for getting predictions, instead of training, we call it inference. To create our inference learner from the exported file, we use load_learner (in this case, this isn’t really necessary, since we already have a working Learner in our notebook; we’re just doing it here so you can see the whole process end-to-end):\n\n\nShow code\nlearn_inf = load_learner(path/'export.pkl')\n\n\nWhen we’re doing inference, we’re generally just getting predictions for one image at a time. To do this, pass a filename to predict:\n\n\nShow code\nlearn_inf.predict('images/grizzly.jpg')\n\n\n\n\n\n('grizzly', tensor(1), tensor([9.0767e-06, 9.9999e-01, 1.5748e-07]))\n\n\nThis has returned three things: the predicted category in the same format you originally provided (in this case that’s a string), the index of the predicted category, and the probabilities of each category. The last two are based on the order of categories in the vocab of the DataLoaders; that is, the stored list of all possible categories. At inference time, you can access the DataLoaders as an attribute of the Learner:\n\n\nShow code\nlearn_inf.dls.vocab\n\n\n(#3) ['black','grizzly','teddy']\n\n\nWe can see here that if we index into the vocab with the integer returned by predict then we get back “grizzly,” as expected. Also, note that if we index into the list of probabilities, we see a nearly 1.00 probability that this is a grizzly.\nWe know how to make predictions from our saved model, so we have everything we need to start building our app. We can do it directly in a Jupyter notebook.\n\n\nCreating a Notebook App from the Model\nTo use our model in an application, we can simply treat the predict method as a regular function. Therefore, creating an app from the model can be done using any of the myriad of frameworks and techniques available to application developers.\nHowever, most data scientists are not familiar with the world of web application development. So let’s try using something that you do, at this point, know: it turns out that we can create a complete working web application using nothing but Jupyter notebooks! The two things we need to make this happen are:\n\nIPython widgets (ipywidgets)\nVoilà\n\nIPython widgets are GUI components that bring together JavaScript and Python functionality in a web browser, and can be created and used within a Jupyter notebook. For instance, the image cleaner that we saw earlier in this chapter is entirely written with IPython widgets. However, we don’t want to require users of our application to run Jupyter themselves.\nThat is why Voilà exists. It is a system for making applications consisting of IPython widgets available to end users, without them having to use Jupyter at all. Voilà is taking advantage of the fact that a notebook already is a kind of web application, just a rather complex one that depends on another web application: Jupyter itself. Essentially, it helps us automatically convert the complex web application we’ve already implicitly made (the notebook) into a simpler, easier-to-deploy web application, which functions like a normal web application rather than like a notebook.\nBut we still have the advantage of developing in a notebook, so with ipywidgets, we can build up our GUI step by step. We will use this approach to create a simple image classifier. First, we need a file upload widget:\n\n\nShow code\n#hide_output\nbtn_upload = widgets.FileUpload()\nbtn_upload\n\n\n\n\n\n\nNow we can grab the image:\n\n\nShow code\n#hide\n# For the book, we can't actually click an upload button, so we fake it\nbtn_upload = SimpleNamespace(data = ['images/grizzly.jpg'])\n\n\n\n\nShow code\nimg = PILImage.create(btn_upload.data[-1])\n\n\n\nWe can use an Output widget to display it:\n\n\nShow code\n#hide_output\nout_pl = widgets.Output()\nout_pl.clear_output()\nwith out_pl: display(img.to_thumb(128,128))\nout_pl\n\n\n\nThen we can get our predictions:\n\n\nShow code\npred,pred_idx,probs = learn_inf.predict(img)\n\n\n\n\n\nand use a Label to display them:\n\n\nShow code\n#hide_output\nlbl_pred = widgets.Label()\nlbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'\nlbl_pred\n\n\n\n\n\nPrediction: grizzly; Probability: 1.0000\nWe’ll need a button to do the classification. It looks exactly like the upload button:\n\n\nShow code\n#hide_output\nbtn_run = widgets.Button(description='Classify')\nbtn_run\n\n\n\n\n\nWe’ll also need a click event handler; that is, a function that will be called when it’s pressed. We can just copy over the lines of code from above:\n\n\nShow code\ndef on_click_classify(change):\n    img = PILImage.create(btn_upload.data[-1])\n    out_pl.clear_output()\n    with out_pl: display(img.to_thumb(128,128))\n    pred,pred_idx,probs = learn_inf.predict(img)\n    lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'\n\nbtn_run.on_click(on_click_classify)\n\n\nYou can test the button now by pressing it, and you should see the image and predictions update automatically!\nWe can now put them all in a vertical box (VBox) to complete our GUI:\n\n\nShow code\n#hide\n#Putting back btn_upload to a widget for next cell\nbtn_upload = widgets.FileUpload()\n\n\n\n\nShow code\n#hide_output\nVBox([widgets.Label('Select your bear!'), \n      btn_upload, btn_run, out_pl, lbl_pred])\n\n\n\n\n\n\nWe have written all the code necessary for our app. The next step is to convert it into something we can deploy.\n\n\nTurning Your Notebook into a Real App\n\n\nShow code\n#hide\n# !pip install voila\n# !jupyter serverextension enable --sys-prefix voila \n\n\nNow that we have everything working in this Jupyter notebook, we can create our application. To do this, start a new notebook and add to it only the code needed to create and show the widgets that you need, and markdown for any text that you want to appear. Have a look at the bear_classifier notebook in the book’s repo to see the simple notebook application we created.\nNext, install Voilà if you haven’t already, by copying these lines into a notebook cell and executing it:\n!pip install voila\n!jupyter serverextension enable --sys-prefix voila\nCells that begin with a ! do not contain Python code, but instead contain code that is passed to your shell (bash, Windows PowerShell, etc.). If you are comfortable using the command line, which we’ll discuss more later in this book, you can of course simply type these two lines (without the ! prefix) directly into your terminal. In this case, the first line installs the voila library and application, and the second connects it to your existing Jupyter notebook.\nVoilà runs Jupyter notebooks just like the Jupyter notebook server you are using now does, but it also does something very important: it removes all of the cell inputs, and only shows output (including ipywidgets), along with your markdown cells. So what’s left is a web application! To view your notebook as a Voilà web application, replace the word “notebooks” in your browser’s URL with: “voila/render”. You will see the same content as your notebook, but without any of the code cells.\nOf course, you don’t need to use Voilà or ipywidgets. Your model is just a function you can call (pred,pred_idx,probs = learn.predict(img)), so you can use it with any framework, hosted on any platform. And you can take something you’ve prototyped in ipywidgets and Voilà and later convert it into a regular web application. We’re showing you this approach in the book because we think it’s a great way for data scientists and other folks that aren’t web development experts to create applications from their models.\nWe have our app, now let’s deploy it!\n\n\nDeploying your app\nAs you now know, you need a GPU to train nearly any useful deep learning model. So, do you need a GPU to use that model in production? No! You almost certainly do not need a GPU to serve your model in production. There are a few reasons for this:\n\nAs we’ve seen, GPUs are only useful when they do lots of identical work in parallel. If you’re doing (say) image classification, then you’ll normally be classifying just one user’s image at a time, and there isn’t normally enough work to do in a single image to keep a GPU busy for long enough for it to be very efficient. So, a CPU will often be more cost-effective.\nAn alternative could be to wait for a few users to submit their images, and then batch them up and process them all at once on a GPU. But then you’re asking your users to wait, rather than getting answers straight away! And you need a high-volume site for this to be workable. If you do need this functionality, you can use a tool such as Microsoft’s ONNX Runtime, or AWS Sagemaker\nThe complexities of dealing with GPU inference are significant. In particular, the GPU’s memory will need careful manual management, and you’ll need a careful queueing system to ensure you only process one batch at a time.\nThere’s a lot more market competition in CPU than GPU servers, as a result of which there are much cheaper options available for CPU servers.\n\nBecause of the complexity of GPU serving, many systems have sprung up to try to automate this. However, managing and running these systems is also complex, and generally requires compiling your model into a different form that’s specialized for that system. It’s typically preferable to avoid dealing with this complexity until/unless your app gets popular enough that it makes clear financial sense for you to do so.\nFor at least the initial prototype of your application, and for any hobby projects that you want to show off, you can easily host them for free. The best place and the best way to do this will vary over time, so check the book’s website for the most up-to-date recommendations. As we’re writing this book in early 2020 the simplest (and free!) approach is to use Binder. To publish your web app on Binder, you follow these steps:\n\nAdd your notebook to a GitHub repository.\nPaste the URL of that repo into Binder’s URL, as shown in &lt;&gt;.\nChange the File dropdown to instead select URL.\nIn the “URL to open” field, enter /voila/render/name.ipynb (replacing name with the name of for your notebook).\nClick the clickboard button at the bottom right to copy the URL and paste it somewhere safe.\nClick Launch.\n\n\nThe first time you do this, Binder will take around 5 minutes to build your site. Behind the scenes, it is finding a virtual machine that can run your app, allocating storage, collecting the files needed for Jupyter, for your notebook, and for presenting your notebook as a web application.\nFinally, once it has started the app running, it will navigate your browser to your new web app. You can share the URL you copied to allow others to access your app as well.\nFor other (both free and paid) options for deploying your web app, be sure to take a look at the book’s website.\nYou may well want to deploy your application onto mobile devices, or edge devices such as a Raspberry Pi. There are a lot of libraries and frameworks that allow you to integrate a model directly into a mobile application. However, these approaches tend to require a lot of extra steps and boilerplate, and do not always support all the PyTorch and fastai layers that your model might use. In addition, the work you do will depend on what kind of mobile devices you are targeting for deployment—you might need to do some work to run on iOS devices, different work to run on newer Android devices, different work for older Android devices, etc. Instead, we recommend wherever possible that you deploy the model itself to a server, and have your mobile or edge application connect to it as a web service.\nThere are quite a few upsides to this approach. The initial installation is easier, because you only have to deploy a small GUI application, which connects to the server to do all the heavy lifting. More importantly perhaps, upgrades of that core logic can happen on your server, rather than needing to be distributed to all of your users. Your server will have a lot more memory and processing capacity than most edge devices, and it is far easier to scale those resources if your model becomes more demanding. The hardware that you will have on a server is also going to be more standard and more easily supported by fastai and PyTorch, so you don’t have to compile your model into a different form.\nThere are downsides too, of course. Your application will require a network connection, and there will be some latency each time the model is called. (It takes a while for a neural network model to run anyway, so this additional network latency may not make a big difference to your users in practice. In fact, since you can use better hardware on the server, the overall latency may even be less than if it were running locally!) Also, if your application uses sensitive data then your users may be concerned about an approach which sends that data to a remote server, so sometimes privacy considerations will mean that you need to run the model on the edge device (it may be possible to avoid this by having an on-premise server, such as inside a company’s firewall). Managing the complexity and scaling the server can create additional overhead too, whereas if your model runs on the edge devices then each user is bringing their own compute resources, which leads to easier scaling with an increasing number of users (also known as horizontal scaling).\n\nA: I’ve had a chance to see up close how the mobile ML landscape is changing in my work. We offer an iPhone app that depends on computer vision, and for years we ran our own computer vision models in the cloud. This was the only way to do it then since those models needed significant memory and compute resources and took minutes to process inputs. This approach required building not only the models (fun!) but also the infrastructure to ensure a certain number of “compute worker machines” were absolutely always running (scary), that more machines would automatically come online if traffic increased, that there was stable storage for large inputs and outputs, that the iOS app could know and tell the user how their job was doing, etc. Nowadays Apple provides APIs for converting models to run efficiently on device and most iOS devices have dedicated ML hardware, so that’s the strategy we use for our newer models. It’s still not easy but in our case it’s worth it, for a faster user experience and to worry less about servers. What works for you will depend, realistically, on the user experience you’re trying to create and what you personally find is easy to do. If you really know how to run servers, do it. If you really know how to build native mobile apps, do that. There are many roads up the hill.\n\nOverall, we’d recommend using a simple CPU-based server approach where possible, for as long as you can get away with it. If you’re lucky enough to have a very successful application, then you’ll be able to justify the investment in more complex deployment approaches at that time.\nCongratulations, you have successfully built a deep learning model and deployed it! Now is a good time to take a pause and think about what could go wrong."
  },
  {
    "objectID": "posts/02_production.html#how-to-avoid-disaster",
    "href": "posts/02_production.html#how-to-avoid-disaster",
    "title": "From Model to Production",
    "section": "How to Avoid Disaster",
    "text": "How to Avoid Disaster\nIn practice, a deep learning model will be just one piece of a much bigger system. As we discussed at the start of this chapter, a data product requires thinking about the entire end-to-end process, from conception to use in production. In this book, we can’t hope to cover all the complexity of managing deployed data products, such as managing multiple versions of models, A/B testing, canarying, refreshing the data (should we just grow and grow our datasets all the time, or should we regularly remove some of the old data?), handling data labeling, monitoring all this, detecting model rot, and so forth. In this section we will give an overview of some of the most important issues to consider; for a more detailed discussion of deployment issues we refer to you to the excellent Building Machine Learning Powered Applications by Emmanuel Ameisen (O’Reilly)\nOne of the biggest issues to consider is that understanding and testing the behavior of a deep learning model is much more difficult than with most other code you write. With normal software development you can analyze the exact steps that the software is taking, and carefully study which of these steps match the desired behavior that you are trying to create. But with a neural network the behavior emerges from the model’s attempt to match the training data, rather than being exactly defined.\nThis can result in disaster! For instance, let’s say we really were rolling out a bear detection system that will be attached to video cameras around campsites in national parks, and will warn campers of incoming bears. If we used a model trained with the dataset we downloaded there would be all kinds of problems in practice, such as:\n\nWorking with video data instead of images\nHandling nighttime images, which may not appear in this dataset\nDealing with low-resolution camera images\nEnsuring results are returned fast enough to be useful in practice\nRecognizing bears in positions that are rarely seen in photos that people post online (for example from behind, partially covered by bushes, or when a long way away from the camera)\n\nA big part of the issue is that the kinds of photos that people are most likely to upload to the internet are the kinds of photos that do a good job of clearly and artistically displaying their subject matter—which isn’t the kind of input this system is going to be getting. So, we may need to do a lot of our own data collection and labelling to create a useful system.\nThis is just one example of the more general problem of out-of-domain data. That is to say, there may be data that our model sees in production which is very different to what it saw during training. There isn’t really a complete technical solution to this problem; instead, we have to be careful about our approach to rolling out the technology.\nThere are other reasons we need to be careful too. One very common problem is domain shift, where the type of data that our model sees changes over time. For instance, an insurance company may use a deep learning model as part of its pricing and risk algorithm, but over time the types of customers that the company attracts, and the types of risks they represent, may change so much that the original training data is no longer relevant.\nOut-of-domain data and domain shift are examples of a larger problem: that you can never fully understand the entire behaviour of your neural network. They have far too many parameters to be able to analytically understand all of their possible behaviors. This is the natural downside of their best feature—their flexibility, which enables them to solve complex problems where we may not even be able to fully specify our preferred solution approaches. The good news, however, is that there are ways to mitigate these risks using a carefully thought-out process. The details of this will vary depending on the details of the problem you are solving, but we will attempt to lay out here a high-level approach, summarized in &lt;&gt;, which we hope will provide useful guidance.\n\nWhere possible, the first step is to use an entirely manual process, with your deep learning model approach running in parallel but not being used directly to drive any actions. The humans involved in the manual process should look at the deep learning outputs and check whether they make sense. For instance, with our bear classifier a park ranger could have a screen displaying video feeds from all the cameras, with any possible bear sightings simply highlighted in red. The park ranger would still be expected to be just as alert as before the model was deployed; the model is simply helping to check for problems at this point.\nThe second step is to try to limit the scope of the model, and have it carefully supervised by people. For instance, do a small geographically and time-constrained trial of the model-driven approach. Rather than rolling our bear classifier out in every national park throughout the country, we could pick a single observation post, for a one-week period, and have a park ranger check each alert before it goes out.\nThen, gradually increase the scope of your rollout. As you do so, ensure that you have really good reporting systems in place, to make sure that you are aware of any significant changes to the actions being taken compared to your manual process. For instance, if the number of bear alerts doubles or halves after rollout of the new system in some location, we should be very concerned. Try to think about all the ways in which your system could go wrong, and then think about what measure or report or picture could reflect that problem, and ensure that your regular reporting includes that information.\n\nJ: I started a company 20 years ago called Optimal Decisions that used machine learning and optimization to help giant insurance companies set their pricing, impacting tens of billions of dollars of risks. We used the approaches described here to manage the potential downsides of something going wrong. Also, before we worked with our clients to put anything in production, we tried to simulate the impact by testing the end-to-end system on their previous year’s data. It was always quite a nerve-wracking process, putting these new algorithms into production, but every rollout was successful.\n\n\nUnforeseen Consequences and Feedback Loops\nOne of the biggest challenges in rolling out a model is that your model may change the behaviour of the system it is a part of. For instance, consider a “predictive policing” algorithm that predicts more crime in certain neighborhoods, causing more police officers to be sent to those neighborhoods, which can result in more crimes being recorded in those neighborhoods, and so on. In the Royal Statistical Society paper “To Predict and Serve?”, Kristian Lum and William Isaac observe that: “predictive policing is aptly named: it is predicting future policing, not future crime.”\nPart of the issue in this case is that in the presence of bias (which we’ll discuss in depth in the next chapter), feedback loops can result in negative implications of that bias getting worse and worse. For instance, there are concerns that this is already happening in the US, where there is significant bias in arrest rates on racial grounds. According to the ACLU, “despite roughly equal usage rates, Blacks are 3.73 times more likely than whites to be arrested for marijuana.” The impact of this bias, along with the rollout of predictive policing algorithms in many parts of the US, led Bärí Williams to write in the New York Times: “The same technology that’s the source of so much excitement in my career is being used in law enforcement in ways that could mean that in the coming years, my son, who is 7 now, is more likely to be profiled or arrested—or worse—for no reason other than his race and where we live.”\nA helpful exercise prior to rolling out a significant machine learning system is to consider this question: “What would happen if it went really, really well?” In other words, what if the predictive power was extremely high, and its ability to influence behavior was extremely significant? In that case, who would be most impacted? What would the most extreme results potentially look like? How would you know what was really going on?\nSuch a thought exercise might help you to construct a more careful rollout plan, with ongoing monitoring systems and human oversight. Of course, human oversight isn’t useful if it isn’t listened to, so make sure that there are reliable and resilient communication channels so that the right people will be aware of issues, and will have the power to fix them."
  },
  {
    "objectID": "posts/02_production.html#get-writing",
    "href": "posts/02_production.html#get-writing",
    "title": "From Model to Production",
    "section": "Get Writing!",
    "text": "Get Writing!\nOne of the things our students have found most helpful to solidify their understanding of this material is to write it down. There is no better test of your understanding of a topic than attempting to teach it to somebody else. This is helpful even if you never show your writing to anybody—but it’s even better if you share it! So we recommend that, if you haven’t already, you start a blog. Now that you’ve completed Chapter 2 and have learned how to train and deploy models, you’re well placed to write your first blog post about your deep learning journey. What’s surprised you? What opportunities do you see for deep learning in your field? What obstacles do you see?\nRachel Thomas, cofounder of fast.ai, wrote in the article “Why You (Yes, You) Should Blog”:\n____\nThe top advice I would give my younger self would be to start blogging sooner. Here are some reasons to blog:\n\n* It’s like a resume, only better. I know of a few people who have had blog posts lead to job offers!\n* Helps you learn. Organizing knowledge always helps me synthesize my own ideas. One of the tests of whether you understand something is whether you can explain it to someone else. A blog post is a great way to do that.\n* I’ve gotten invitations to conferences and invitations to speak from my blog posts. I was invited to the TensorFlow Dev Summit (which was awesome!) for writing a blog post about how I don’t like TensorFlow.\n* Meet new people. I’ve met several people who have responded to blog posts I wrote.\n* Saves time. Any time you answer a question multiple times through email, you should turn it into a blog post, which makes it easier for you to share the next time someone asks.\n____\nPerhaps her most important tip is this:\n\n: You are best positioned to help people one step behind you. The material is still fresh in your mind. Many experts have forgotten what it was like to be a beginner (or an intermediate) and have forgotten why the topic is hard to understand when you first hear it. The context of your particular background, your particular style, and your knowledge level will give a different twist to what you’re writing about.\n\nWe’ve provided full details on how to set up a blog in &lt;&gt;. If you don’t have a blog already, take a look at that now, because we’ve got a really great approach set up for you to start blogging for free, with no ads—and you can even use Jupyter Notebook!"
  },
  {
    "objectID": "posts/02_production.html#questionnaire",
    "href": "posts/02_production.html#questionnaire",
    "title": "From Model to Production",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nProvide an example of where the bear classification model might work poorly in production, due to structural or style differences in the training data.\nWhere do text models currently have a major deficiency?\nWhat are possible negative societal implications of text generation models?\nIn situations where a model might make mistakes, and those mistakes could be harmful, what is a good alternative to automating a process?\nWhat kind of tabular data is deep learning particularly good at?\nWhat’s a key downside of directly using a deep learning model for recommendation systems?\nWhat are the steps of the Drivetrain Approach?\nHow do the steps of the Drivetrain Approach map to a recommendation system?\nCreate an image recognition model using data you curate, and deploy it on the web.\nWhat is DataLoaders?\nWhat four things do we need to tell fastai to create DataLoaders?\nWhat does the splitter parameter to DataBlock do?\nHow do we ensure a random split always gives the same validation set?\nWhat letters are often used to signify the independent and dependent variables?\nWhat’s the difference between the crop, pad, and squish resize approaches? When might you choose one over the others?\nWhat is data augmentation? Why is it needed?\nWhat is the difference between item_tfms and batch_tfms?\nWhat is a confusion matrix?\nWhat does export save?\nWhat is it called when we use a model for getting predictions, instead of training?\nWhat are IPython widgets?\nWhen might you want to use CPU for deployment? When might GPU be better?\nWhat are the downsides of deploying your app to a server, instead of to a client (or edge) device such as a phone or PC?\nWhat are three examples of problems that could occur when rolling out a bear warning system in practice?\nWhat is “out-of-domain data”?\nWhat is “domain shift”?\nWhat are the three steps in the deployment process?\n\n\nFurther Research\n\nConsider how the Drivetrain Approach maps to a project or problem you’re interested in.\nWhen might it be best to avoid certain types of data augmentation?\nFor a project you’re interested in applying deep learning to, consider the thought experiment “What would happen if it went really, really well?”\nStart a blog, and write your first blog post. For instance, write about what you think deep learning might be useful for in a domain you’re interested in."
  },
  {
    "objectID": "posts/04_mnist_basics.html",
    "href": "posts/04_mnist_basics.html",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastai.vision.all import *\nfrom fastbook import *\n\nmatplotlib.rc('image', cmap='Greys')\n[[chapter_mnist_basics]]\nHaving seen what it looks like to actually train a variety of models in Chapter 2, let’s now look under the hood and see exactly what is going on. We’ll start by using computer vision to introduce fundamental tools and concepts for deep learning.\nTo be exact, we’ll discuss the roles of arrays and tensors and of broadcasting, a powerful technique for using them expressively. We’ll explain stochastic gradient descent (SGD), the mechanism for learning by updating weights automatically. We’ll discuss the choice of a loss function for our basic classification task, and the role of mini-batches. We’ll also describe the math that a basic neural network is actually doing. Finally, we’ll put all these pieces together.\nIn future chapters we’ll do deep dives into other applications as well, and see how these concepts and tools generalize. But this chapter is about laying foundation stones. To be frank, that also makes this one of the hardest chapters, because of how these concepts all depend on each other. Like an arch, all the stones need to be in place for the structure to stay up. Also like an arch, once that happens, it’s a powerful structure that can support other things. But it requires some patience to assemble.\nLet’s begin. The first step is to consider how images are represented in a computer."
  },
  {
    "objectID": "posts/04_mnist_basics.html#pixels-the-foundations-of-computer-vision",
    "href": "posts/04_mnist_basics.html#pixels-the-foundations-of-computer-vision",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "Pixels: The Foundations of Computer Vision",
    "text": "Pixels: The Foundations of Computer Vision\nIn order to understand what happens in a computer vision model, we first have to understand how computers handle images. We’ll use one of the most famous datasets in computer vision, MNIST, for our experiments. MNIST contains images of handwritten digits, collected by the National Institute of Standards and Technology and collated into a machine learning dataset by Yann Lecun and his colleagues. Lecun used MNIST in 1998 in Lenet-5, the first computer system to demonstrate practically useful recognition of handwritten digit sequences. This was one of the most important breakthroughs in the history of AI."
  },
  {
    "objectID": "posts/04_mnist_basics.html#sidebar-tenacity-and-deep-learning",
    "href": "posts/04_mnist_basics.html#sidebar-tenacity-and-deep-learning",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "Sidebar: Tenacity and Deep Learning",
    "text": "Sidebar: Tenacity and Deep Learning\nThe story of deep learning is one of tenacity and grit by a handful of dedicated researchers. After early hopes (and hype!) neural networks went out of favor in the 1990’s and 2000’s, and just a handful of researchers kept trying to make them work well. Three of them, Yann Lecun, Yoshua Bengio, and Geoffrey Hinton, were awarded the highest honor in computer science, the Turing Award (generally considered the “Nobel Prize of computer science”), in 2018 after triumphing despite the deep skepticism and disinterest of the wider machine learning and statistics community.\nGeoff Hinton has told of how even academic papers showing dramatically better results than anything previously published would be rejected by top journals and conferences, just because they used a neural network. Yann Lecun’s work on convolutional neural networks, which we will study in the next section, showed that these models could read handwritten text—something that had never been achieved before. However, his breakthrough was ignored by most researchers, even as it was used commercially to read 10% of the checks in the US!\nIn addition to these three Turing Award winners, there are many other researchers who have battled to get us to where we are today. For instance, Jurgen Schmidhuber (who many believe should have shared in the Turing Award) pioneered many important ideas, including working with his student Sepp Hochreiter on the long short-term memory (LSTM) architecture (widely used for speech recognition and other text modeling tasks, and used in the IMDb example in &lt;&gt;). Perhaps most important of all, Paul Werbos in 1974 invented back-propagation for neural networks, the technique shown in this chapter and used universally for training neural networks (Werbos 1994). His development was almost entirely ignored for decades, but today it is considered the most important foundation of modern AI.\nThere is a lesson here for all of us! On your deep learning journey you will face many obstacles, both technical, and (even more difficult) posed by people around you who don’t believe you’ll be successful. There’s one guaranteed way to fail, and that’s to stop trying. We’ve seen that the only consistent trait amongst every fast.ai student that’s gone on to be a world-class practitioner is that they are all very tenacious."
  },
  {
    "objectID": "posts/04_mnist_basics.html#end-sidebar",
    "href": "posts/04_mnist_basics.html#end-sidebar",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "End sidebar",
    "text": "End sidebar\nFor this initial tutorial we are just going to try to create a model that can classify any image as a 3 or a 7. So let’s download a sample of MNIST that contains images of just these digits:\n\n\nShow code\npath = untar_data(URLs.MNIST_SAMPLE)\n\n\n\n\nShow code\n#hide\nPath.BASE_PATH = path\n\n\nWe can see what’s in this directory by using ls, a method added by fastai. This method returns an object of a special fastai class called L, which has all the same functionality of Python’s built-in list, plus a lot more. One of its handy features is that, when printed, it displays the count of items, before listing the items themselves (if there are more than 10 items, it just shows the first few):\n\n\nShow code\npath.ls()\n\n\n(#9) [Path('cleaned.csv'),Path('item_list.txt'),Path('trained_model.pkl'),Path('models'),Path('valid'),Path('labels.csv'),Path('export.pkl'),Path('history.csv'),Path('train')]\n\n\nThe MNIST dataset follows a common layout for machine learning datasets: separate folders for the training set and the validation set (and/or test set). Let’s see what’s inside the training set:\n\n\nShow code\n(path/'train').ls()\n\n\n(#2) [Path('train/7'),Path('train/3')]\n\n\nThere’s a folder of 3s, and a folder of 7s. In machine learning parlance, we say that “3” and “7” are the labels (or targets) in this dataset. Let’s take a look in one of these folders (using sorted to ensure we all get the same order of files):\n\n\nShow code\nthrees = (path/'train'/'3').ls().sorted()\nsevens = (path/'train'/'7').ls().sorted()\nthrees\n\n\n(#6131) [Path('train/3/10.png'),Path('train/3/10000.png'),Path('train/3/10011.png'),Path('train/3/10031.png'),Path('train/3/10034.png'),Path('train/3/10042.png'),Path('train/3/10052.png'),Path('train/3/1007.png'),Path('train/3/10074.png'),Path('train/3/10091.png')...]\n\n\nAs we might expect, it’s full of image files. Let’s take a look at one now. Here’s an image of a handwritten number 3, taken from the famous MNIST dataset of handwritten numbers:\n\n\nShow code\nim3_path = threes[1]\nim3 = Image.open(im3_path)\nim3\n\n\n\n\n\n\n\n\n\nHere we are using the Image class from the Python Imaging Library (PIL), which is the most widely used Python package for opening, manipulating, and viewing images. Jupyter knows about PIL images, so it displays the image for us automatically.\nIn a computer, everything is represented as a number. To view the numbers that make up this image, we have to convert it to a NumPy array or a PyTorch tensor. For instance, here’s what a section of the image looks like, converted to a NumPy array:\n\n\nShow code\narray(im3)[4:10,4:10]\n\n\narray([[  0,   0,   0,   0,   0,   0],\n       [  0,   0,   0,   0,   0,  29],\n       [  0,   0,   0,  48, 166, 224],\n       [  0,  93, 244, 249, 253, 187],\n       [  0, 107, 253, 253, 230,  48],\n       [  0,   3,  20,  20,  15,   0]], dtype=uint8)\n\n\nThe 4:10 indicates we requested the rows from index 4 (included) to 10 (not included) and the same for the columns. NumPy indexes from top to bottom and left to right, so this section is located in the top-left corner of the image. Here’s the same thing as a PyTorch tensor:\n\n\nShow code\ntensor(im3)[4:10,4:10]\n\n\ntensor([[  0,   0,   0,   0,   0,   0],\n        [  0,   0,   0,   0,   0,  29],\n        [  0,   0,   0,  48, 166, 224],\n        [  0,  93, 244, 249, 253, 187],\n        [  0, 107, 253, 253, 230,  48],\n        [  0,   3,  20,  20,  15,   0]], dtype=torch.uint8)\n\n\nWe can slice the array to pick just the part with the top of the digit in it, and then use a Pandas DataFrame to color-code the values using a gradient, which shows us clearly how the image is created from the pixel values:\n\n\nShow code\n#hide_output\nim3_t = tensor(im3)\ndf = pd.DataFrame(im3_t[4:15,4:22])\ndf.style.set_properties(**{'font-size':'6pt'}).background_gradient('Greys')\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n1\n0\n0\n0\n0\n0\n29\n150\n195\n254\n255\n254\n176\n193\n150\n96\n0\n0\n0\n\n\n2\n0\n0\n0\n48\n166\n224\n253\n253\n234\n196\n253\n253\n253\n253\n233\n0\n0\n0\n\n\n3\n0\n93\n244\n249\n253\n187\n46\n10\n8\n4\n10\n194\n253\n253\n233\n0\n0\n0\n\n\n4\n0\n107\n253\n253\n230\n48\n0\n0\n0\n0\n0\n192\n253\n253\n156\n0\n0\n0\n\n\n5\n0\n3\n20\n20\n15\n0\n0\n0\n0\n0\n43\n224\n253\n245\n74\n0\n0\n0\n\n\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n249\n253\n245\n126\n0\n0\n0\n0\n\n\n7\n0\n0\n0\n0\n0\n0\n0\n14\n101\n223\n253\n248\n124\n0\n0\n0\n0\n0\n\n\n8\n0\n0\n0\n0\n0\n11\n166\n239\n253\n253\n253\n187\n30\n0\n0\n0\n0\n0\n\n\n9\n0\n0\n0\n0\n0\n16\n248\n250\n253\n253\n253\n253\n232\n213\n111\n2\n0\n0\n\n\n10\n0\n0\n0\n0\n0\n0\n0\n43\n98\n98\n208\n253\n253\n253\n253\n187\n22\n0\n\n\n\n\n\n\nYou can see that the background white pixels are stored as the number 0, black is the number 255, and shades of gray are between the two. The entire image contains 28 pixels across and 28 pixels down, for a total of 784 pixels. (This is much smaller than an image that you would get from a phone camera, which has millions of pixels, but is a convenient size for our initial learning and experiments. We will build up to bigger, full-color images soon.)\nSo, now you’ve seen what an image looks like to a computer, let’s recall our goal: create a model that can recognize 3s and 7s. How might you go about getting a computer to do that?\n\nWarning: Stop and Think!: Before you read on, take a moment to think about how a computer might be able to recognize these two different digits. What kinds of features might it be able to look at? How might it be able to identify these features? How could it combine them together? Learning works best when you try to solve problems yourself, rather than just reading somebody else’s answers; so step away from this book for a few minutes, grab a piece of paper and pen, and jot some ideas down…"
  },
  {
    "objectID": "posts/04_mnist_basics.html#first-try-pixel-similarity",
    "href": "posts/04_mnist_basics.html#first-try-pixel-similarity",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "First Try: Pixel Similarity",
    "text": "First Try: Pixel Similarity\nSo, here is a first idea: how about we find the average pixel value for every pixel of the 3s, then do the same for the 7s. This will give us two group averages, defining what we might call the “ideal” 3 and 7. Then, to classify an image as one digit or the other, we see which of these two ideal digits the image is most similar to. This certainly seems like it should be better than nothing, so it will make a good baseline.\n\njargon: Baseline: A simple model which you are confident should perform reasonably well. It should be very simple to implement, and very easy to test, so that you can then test each of your improved ideas, and make sure they are always better than your baseline. Without starting with a sensible baseline, it is very difficult to know whether your super-fancy models are actually any good. One good approach to creating a baseline is doing what we have done here: think of a simple, easy-to-implement model. Another good approach is to search around to find other people that have solved similar problems to yours, and download and run their code on your dataset. Ideally, try both of these!\n\nStep one for our simple model is to get the average of pixel values for each of our two groups. In the process of doing this, we will learn a lot of neat Python numeric programming tricks!\nLet’s create a tensor containing all of our 3s stacked together. We already know how to create a tensor containing a single image. To create a tensor containing all the images in a directory, we will first use a Python list comprehension to create a plain list of the single image tensors.\nWe will use Jupyter to do some little checks of our work along the way—in this case, making sure that the number of returned items seems reasonable:\n\n\nShow code\nseven_tensors = [tensor(Image.open(o)) for o in sevens]\nthree_tensors = [tensor(Image.open(o)) for o in threes]\nlen(three_tensors),len(seven_tensors)\n\n\n(6131, 6265)\n\n\n\nnote: List Comprehensions: List and dictionary comprehensions are a wonderful feature of Python. Many Python programmers use them every day, including the authors of this book—they are part of “idiomatic Python.” But programmers coming from other languages may have never seen them before. There are a lot of great tutorials just a web search away, so we won’t spend a long time discussing them now. Here is a quick explanation and example to get you started. A list comprehension looks like this: new_list = [f(o) for o in a_list if o&gt;0]. This will return every element of a_list that is greater than 0, after passing it to the function f. There are three parts here: the collection you are iterating over (a_list), an optional filter (if o&gt;0), and something to do to each element (f(o)). It’s not only shorter to write but way faster than the alternative ways of creating the same list with a loop.\n\nWe’ll also check that one of the images looks okay. Since we now have tensors (which Jupyter by default will print as values), rather than PIL images (which Jupyter by default will display as images), we need to use fastai’s show_image function to display it:\n\n\nShow code\nshow_image(three_tensors[1]);\n\n\n\n\n\n\n\n\n\nFor every pixel position, we want to compute the average over all the images of the intensity of that pixel. To do this we first combine all the images in this list into a single three-dimensional tensor. The most common way to describe such a tensor is to call it a rank-3 tensor. We often need to stack up individual tensors in a collection into a single tensor. Unsurprisingly, PyTorch comes with a function called stack that we can use for this purpose.\nSome operations in PyTorch, such as taking a mean, require us to cast our integer types to float types. Since we’ll be needing this later, we’ll also cast our stacked tensor to float now. Casting in PyTorch is as simple as typing the name of the type you wish to cast to, and treating it as a method.\nGenerally when images are floats, the pixel values are expected to be between 0 and 1, so we will also divide by 255 here:\n\n\nShow code\nstacked_sevens = torch.stack(seven_tensors).float()/255\nstacked_threes = torch.stack(three_tensors).float()/255\nstacked_threes.shape\n\n\ntorch.Size([6131, 28, 28])\n\n\nPerhaps the most important attribute of a tensor is its shape. This tells you the length of each axis. In this case, we can see that we have 6,131 images, each of size 28×28 pixels. There is nothing specifically about this tensor that says that the first axis is the number of images, the second is the height, and the third is the width—the semantics of a tensor are entirely up to us, and how we construct it. As far as PyTorch is concerned, it is just a bunch of numbers in memory.\nThe length of a tensor’s shape is its rank:\n\n\nShow code\nlen(stacked_threes.shape)\n\n\n3\n\n\nIt is really important for you to commit to memory and practice these bits of tensor jargon: rank is the number of axes or dimensions in a tensor; shape is the size of each axis of a tensor.\n\nA: Watch out because the term “dimension” is sometimes used in two ways. Consider that we live in “three-dimensonal space” where a physical position can be described by a 3-vector v. But according to PyTorch, the attribute v.ndim (which sure looks like the “number of dimensions” of v) equals one, not three! Why? Because v is a vector, which is a tensor of rank one, meaning that it has only one axis (even if that axis has a length of three). In other words, sometimes dimension is used for the size of an axis (“space is three-dimensional”); other times, it is used for the rank, or the number of axes (“a matrix has two dimensions”). When confused, I find it helpful to translate all statements into terms of rank, axis, and length, which are unambiguous terms.\n\nWe can also get a tensor’s rank directly with ndim:\n\n\nShow code\nstacked_threes.ndim\n\n\n3\n\n\nFinally, we can compute what the ideal 3 looks like. We calculate the mean of all the image tensors by taking the mean along dimension 0 of our stacked, rank-3 tensor. This is the dimension that indexes over all the images.\nIn other words, for every pixel position, this will compute the average of that pixel over all images. The result will be one value for every pixel position, or a single image. Here it is:\n\n\nShow code\nmean3 = stacked_threes.mean(0)\nshow_image(mean3);\n\n\n\n\n\n\n\n\n\nAccording to this dataset, this is the ideal number 3! (You may not like it, but this is what peak number 3 performance looks like.) You can see how it’s very dark where all the images agree it should be dark, but it becomes wispy and blurry where the images disagree.\nLet’s do the same thing for the 7s, but put all the steps together at once to save some time:\n\n\nShow code\nmean7 = stacked_sevens.mean(0)\nshow_image(mean7);\n\n\n\n\n\n\n\n\n\nLet’s now pick an arbitrary 3 and measure its distance from our “ideal digits.”\n\nstop: Stop and Think!: How would you calculate how similar a particular image is to each of our ideal digits? Remember to step away from this book and jot down some ideas before you move on! Research shows that recall and understanding improves dramatically when you are engaged with the learning process by solving problems, experimenting, and trying new ideas yourself\n\nHere’s a sample 3:\n\n\nShow code\na_3 = stacked_threes[1]\nshow_image(a_3);\n\n\n\n\n\n\n\n\n\nHow can we determine its distance from our ideal 3? We can’t just add up the differences between the pixels of this image and the ideal digit. Some differences will be positive while others will be negative, and these differences will cancel out, resulting in a situation where an image that is too dark in some places and too light in others might be shown as having zero total differences from the ideal. That would be misleading!\nTo avoid this, there are two main ways data scientists measure distance in this context:\n\nTake the mean of the absolute value of differences (absolute value is the function that replaces negative values with positive values). This is called the mean absolute difference or L1 norm\nTake the mean of the square of differences (which makes everything positive) and then take the square root (which undoes the squaring). This is called the root mean squared error (RMSE) or L2 norm.\n\n\nimportant: It’s Okay to Have Forgotten Your Math: In this book we generally assume that you have completed high school math, and remember at least some of it… But everybody forgets some things! It all depends on what you happen to have had reason to practice in the meantime. Perhaps you have forgotten what a square root is, or exactly how they work. No problem! Any time you come across a maths concept that is not explained fully in this book, don’t just keep moving on; instead, stop and look it up. Make sure you understand the basic idea, how it works, and why we might be using it. One of the best places to refresh your understanding is Khan Academy. For instance, Khan Academy has a great introduction to square roots.\n\nLet’s try both of these now:\n\n\nShow code\ndist_3_abs = (a_3 - mean3).abs().mean()\ndist_3_sqr = ((a_3 - mean3)**2).mean().sqrt()\ndist_3_abs,dist_3_sqr\n\n\n(tensor(0.1114), tensor(0.2021))\n\n\n\n\nShow code\ndist_7_abs = (a_3 - mean7).abs().mean()\ndist_7_sqr = ((a_3 - mean7)**2).mean().sqrt()\ndist_7_abs,dist_7_sqr\n\n\n(tensor(0.1586), tensor(0.3021))\n\n\nIn both cases, the distance between our 3 and the “ideal” 3 is less than the distance to the ideal 7. So our simple model will give the right prediction in this case.\nPyTorch already provides both of these as loss functions. You’ll find these inside torch.nn.functional, which the PyTorch team recommends importing as F (and is available by default under that name in fastai):\n\n\nShow code\nF.l1_loss(a_3.float(),mean7), F.mse_loss(a_3,mean7).sqrt()\n\n\n(tensor(0.1586), tensor(0.3021))\n\n\nHere mse stands for mean squared error, and l1 refers to the standard mathematical jargon for mean absolute value (in math it’s called the L1 norm).\n\nS: Intuitively, the difference between L1 norm and mean squared error (MSE) is that the latter will penalize bigger mistakes more heavily than the former (and be more lenient with small mistakes).\n\n\nJ: When I first came across this “L1” thingie, I looked it up to see what on earth it meant. I found on Google that it is a vector norm using absolute value, so looked up vector norm and started reading: Given a vector space V over a field F of the real or complex numbers, a norm on V is a nonnegative-valued any function p: V → [0,+∞) with the following properties: For all a ∈ F and all u, v ∈ V, p(u + v) ≤ p(u) + p(v)… Then I stopped reading. “Ugh, I’ll never understand math!” I thought, for the thousandth time. Since then I’ve learned that every time these complex mathy bits of jargon come up in practice, it turns out I can replace them with a tiny bit of code! Like, the L1 loss is just equal to (a-b).abs().mean(), where a and b are tensors. I guess mathy folks just think differently than me… I’ll make sure in this book that every time some mathy jargon comes up, I’ll give you the little bit of code it’s equal to as well, and explain in common-sense terms what’s going on.\n\nWe just completed various mathematical operations on PyTorch tensors. If you’ve done some numeric programming in NumPy before, you may recognize these as being similar to NumPy arrays. Let’s have a look at those two very important data structures.\n\nNumPy Arrays and PyTorch Tensors\nNumPy is the most widely used library for scientific and numeric programming in Python. It provides very similar functionality and a very similar API to that provided by PyTorch; however, it does not support using the GPU or calculating gradients, which are both critical for deep learning. Therefore, in this book we will generally use PyTorch tensors instead of NumPy arrays, where possible.\n(Note that fastai adds some features to NumPy and PyTorch to make them a bit more similar to each other. If any code in this book doesn’t work on your computer, it’s possible that you forgot to include a line like this at the start of your notebook: from fastai.vision.all import *.)\nBut what are arrays and tensors, and why should you care?\nPython is slow compared to many languages. Anything fast in Python, NumPy, or PyTorch is likely to be a wrapper for a compiled object written (and optimized) in another language—specifically C. In fact, NumPy arrays and PyTorch tensors can finish computations many thousands of times faster than using pure Python.\nA NumPy array is a multidimensional table of data, with all items of the same type. Since that can be any type at all, they can even be arrays of arrays, with the innermost arrays potentially being different sizes—this is called a “jagged array.” By “multidimensional table” we mean, for instance, a list (dimension of one), a table or matrix (dimension of two), a “table of tables” or “cube” (dimension of three), and so forth. If the items are all of some simple type such as integer or float, then NumPy will store them as a compact C data structure in memory. This is where NumPy shines. NumPy has a wide variety of operators and methods that can run computations on these compact structures at the same speed as optimized C, because they are written in optimized C.\nA PyTorch tensor is nearly the same thing as a NumPy array, but with an additional restriction that unlocks some additional capabilities. It’s the same in that it, too, is a multidimensional table of data, with all items of the same type. However, the restriction is that a tensor cannot use just any old type—it has to use a single basic numeric type for all components. For example, a PyTorch tensor cannot be jagged. It is always a regularly shaped multidimensional rectangular structure.\nThe vast majority of methods and operators supported by NumPy on these structures are also supported by PyTorch, but PyTorch tensors have additional capabilities. One major capability is that these structures can live on the GPU, in which case their computation will be optimized for the GPU and can run much faster (given lots of values to work on). In addition, PyTorch can automatically calculate derivatives of these operations, including combinations of operations. As you’ll see, it would be impossible to do deep learning in practice without this capability.\n\nS: If you don’t know what C is, don’t worry as you won’t need it at all. In a nutshell, it’s a low-level (low-level means more similar to the language that computers use internally) language that is very fast compared to Python. To take advantage of its speed while programming in Python, try to avoid as much as possible writing loops, and replace them by commands that work directly on arrays or tensors.\n\nPerhaps the most important new coding skill for a Python programmer to learn is how to effectively use the array/tensor APIs. We will be showing lots more tricks later in this book, but here’s a summary of the key things you need to know for now.\nTo create an array or tensor, pass a list (or list of lists, or list of lists of lists, etc.) to array() or tensor():\n\n\nShow code\ndata = [[1,2,3],[4,5,6]]\narr = array (data)\ntns = tensor(data)\n\n\n\n\nShow code\narr  # numpy\n\n\narray([[1, 2, 3],\n       [4, 5, 6]])\n\n\n\n\nShow code\ntns  # pytorch\n\n\ntensor([[1, 2, 3],\n        [4, 5, 6]])\n\n\nAll the operations that follow are shown on tensors, but the syntax and results for NumPy arrays is identical.\nYou can select a row (note that, like lists in Python, tensors are 0-indexed so 1 refers to the second row/column):\n\n\nShow code\ntns[1]\n\n\ntensor([4, 5, 6])\n\n\nor a column, by using : to indicate all of the first axis (we sometimes refer to the dimensions of tensors/arrays as axes):\n\n\nShow code\ntns[:,1]\n\n\ntensor([2, 5])\n\n\nYou can combine these with Python slice syntax ([start:end] with end being excluded) to select part of a row or column:\n\n\nShow code\ntns[1,1:3]\n\n\ntensor([5, 6])\n\n\nAnd you can use the standard operators such as +, -, *, /:\n\n\nShow code\ntns+1\n\n\ntensor([[2, 3, 4],\n        [5, 6, 7]])\n\n\nTensors have a type:\n\n\nShow code\ntns.type()\n\n\n'torch.LongTensor'\n\n\nAnd will automatically change type as needed, for example from int to float:\n\n\nShow code\ntns*1.5\n\n\ntensor([[1.5000, 3.0000, 4.5000],\n        [6.0000, 7.5000, 9.0000]])\n\n\nSo, is our baseline model any good? To quantify this, we must define a metric."
  },
  {
    "objectID": "posts/04_mnist_basics.html#computing-metrics-using-broadcasting",
    "href": "posts/04_mnist_basics.html#computing-metrics-using-broadcasting",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "Computing Metrics Using Broadcasting",
    "text": "Computing Metrics Using Broadcasting\nRecall that a metric is a number that is calculated based on the predictions of our model, and the correct labels in our dataset, in order to tell us how good our model is. For instance, we could use either of the functions we saw in the previous section, mean squared error, or mean absolute error, and take the average of them over the whole dataset. However, neither of these are numbers that are very understandable to most people; in practice, we normally use accuracy as the metric for classification models.\nAs we’ve discussed, we want to calculate our metric over a validation set. This is so that we don’t inadvertently overfit—that is, train a model to work well only on our training data. This is not really a risk with the pixel similarity model we’re using here as a first try, since it has no trained components, but we’ll use a validation set anyway to follow normal practices and to be ready for our second try later.\nTo get a validation set we need to remove some of the data from training entirely, so it is not seen by the model at all. As it turns out, the creators of the MNIST dataset have already done this for us. Do you remember how there was a whole separate directory called valid? That’s what this directory is for!\nSo to start with, let’s create tensors for our 3s and 7s from that directory. These are the tensors we will use to calculate a metric measuring the quality of our first-try model, which measures distance from an ideal image:\n\n\nShow code\nvalid_3_tens = torch.stack([tensor(Image.open(o)) \n                            for o in (path/'valid'/'3').ls()])\nvalid_3_tens = valid_3_tens.float()/255\nvalid_7_tens = torch.stack([tensor(Image.open(o)) \n                            for o in (path/'valid'/'7').ls()])\nvalid_7_tens = valid_7_tens.float()/255\nvalid_3_tens.shape,valid_7_tens.shape\n\n\n(torch.Size([1010, 28, 28]), torch.Size([1028, 28, 28]))\n\n\nIt’s good to get in the habit of checking shapes as you go. Here we see two tensors, one representing the 3s validation set of 1,010 images of size 28×28, and one representing the 7s validation set of 1,028 images of size 28×28.\nWe ultimately want to write a function, is_3, that will decide if an arbitrary image is a 3 or a 7. It will do this by deciding which of our two “ideal digits” this arbitrary image is closer to. For that we need to define a notion of distance—that is, a function that calculates the distance between two images.\nWe can write a simple function that calculates the mean absolute error using an expression very similar to the one we wrote in the last section:\n\n\nShow code\ndef mnist_distance(a,b): return (a-b).abs().mean((-1,-2))\nmnist_distance(a_3, mean3)\n\n\ntensor(0.1114)\n\n\nThis is the same value we previously calculated for the distance between these two images, the ideal 3 mean3 and the arbitrary sample 3 a_3, which are both single-image tensors with a shape of [28,28].\nBut in order to calculate a metric for overall accuracy, we will need to calculate the distance to the ideal 3 for every image in the validation set. How do we do that calculation? We could write a loop over all of the single-image tensors that are stacked within our validation set tensor, valid_3_tens, which has a shape of [1010,28,28] representing 1,010 images. But there is a better way.\nSomething very interesting happens when we take this exact same distance function, designed for comparing two single images, but pass in as an argument valid_3_tens, the tensor that represents the 3s validation set:\n\n\nShow code\nvalid_3_dist = mnist_distance(valid_3_tens, mean3)\nvalid_3_dist, valid_3_dist.shape\n\n\n(tensor([0.1050, 0.1526, 0.1186,  ..., 0.1122, 0.1170, 0.1086]),\n torch.Size([1010]))\n\n\nInstead of complaining about shapes not matching, it returned the distance for every single image as a vector (i.e., a rank-1 tensor) of length 1,010 (the number of 3s in our validation set). How did that happen?\nTake another look at our function mnist_distance, and you’ll see we have there the subtraction (a-b). The magic trick is that PyTorch, when it tries to perform a simple subtraction operation between two tensors of different ranks, will use broadcasting. That is, it will automatically expand the tensor with the smaller rank to have the same size as the one with the larger rank. Broadcasting is an important capability that makes tensor code much easier to write.\nAfter broadcasting so the two argument tensors have the same rank, PyTorch applies its usual logic for two tensors of the same rank: it performs the operation on each corresponding element of the two tensors, and returns the tensor result. For instance:\n\n\nShow code\ntensor([1,2,3]) + tensor(1)\n\n\ntensor([2, 3, 4])\n\n\nSo in this case, PyTorch treats mean3, a rank-2 tensor representing a single image, as if it were 1,010 copies of the same image, and then subtracts each of those copies from each 3 in our validation set. What shape would you expect this tensor to have? Try to figure it out yourself before you look at the answer below:\n\n\nShow code\n(valid_3_tens-mean3).shape\n\n\ntorch.Size([1010, 28, 28])\n\n\nWe are calculating the difference between our “ideal 3” and each of the 1,010 3s in the validation set, for each of 28×28 images, resulting in the shape [1010,28,28].\nThere are a couple of important points about how broadcasting is implemented, which make it valuable not just for expressivity but also for performance:\n\nPyTorch doesn’t actually copy mean3 1,010 times. It pretends it were a tensor of that shape, but doesn’t actually allocate any additional memory\nIt does the whole calculation in C (or, if you’re using a GPU, in CUDA, the equivalent of C on the GPU), tens of thousands of times faster than pure Python (up to millions of times faster on a GPU!).\n\nThis is true of all broadcasting and elementwise operations and functions done in PyTorch. It’s the most important technique for you to know to create efficient PyTorch code.\nNext in mnist_distance we see abs. You might be able to guess now what this does when applied to a tensor. It applies the method to each individual element in the tensor, and returns a tensor of the results (that is, it applies the method “elementwise”). So in this case, we’ll get back 1,010 matrices of absolute values.\nFinally, our function calls mean((-1,-2)). The tuple (-1,-2) represents a range of axes. In Python, -1 refers to the last element, and -2 refers to the second-to-last. So in this case, this tells PyTorch that we want to take the mean ranging over the values indexed by the last two axes of the tensor. The last two axes are the horizontal and vertical dimensions of an image. After taking the mean over the last two axes, we are left with just the first tensor axis, which indexes over our images, which is why our final size was (1010). In other words, for every image, we averaged the intensity of all the pixels in that image.\nWe’ll be learning lots more about broadcasting throughout this book, especially in &lt;&gt;, and will be practicing it regularly too.\nWe can use mnist_distance to figure out whether an image is a 3 or not by using the following logic: if the distance between the digit in question and the ideal 3 is less than the distance to the ideal 7, then it’s a 3. This function will automatically do broadcasting and be applied elementwise, just like all PyTorch functions and operators:\n\n\nShow code\ndef is_3(x): return mnist_distance(x,mean3) &lt; mnist_distance(x,mean7)\n\n\nLet’s test it on our example case:\n\n\nShow code\nis_3(a_3), is_3(a_3).float()\n\n\n(tensor(True), tensor(1.))\n\n\nNote that when we convert the Boolean response to a float, we get 1.0 for True and 0.0 for False. Thanks to broadcasting, we can also test it on the full validation set of 3s:\n\n\nShow code\nis_3(valid_3_tens)\n\n\ntensor([True, True, True,  ..., True, True, True])\n\n\nNow we can calculate the accuracy for each of the 3s and 7s by taking the average of that function for all 3s and its inverse for all 7s:\n\n\nShow code\naccuracy_3s =      is_3(valid_3_tens).float() .mean()\naccuracy_7s = (1 - is_3(valid_7_tens).float()).mean()\n\naccuracy_3s,accuracy_7s,(accuracy_3s+accuracy_7s)/2\n\n\n(tensor(0.9168), tensor(0.9854), tensor(0.9511))\n\n\nThis looks like a pretty good start! We’re getting over 90% accuracy on both 3s and 7s, and we’ve seen how to define a metric conveniently using broadcasting.\nBut let’s be honest: 3s and 7s are very different-looking digits. And we’re only classifying 2 out of the 10 possible digits so far. So we’re going to need to do better!\nTo do better, perhaps it is time to try a system that does some real learning—that is, that can automatically modify itself to improve its performance. In other words, it’s time to talk about the training process, and SGD."
  },
  {
    "objectID": "posts/04_mnist_basics.html#stochastic-gradient-descent-sgd",
    "href": "posts/04_mnist_basics.html#stochastic-gradient-descent-sgd",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "Stochastic Gradient Descent (SGD)",
    "text": "Stochastic Gradient Descent (SGD)\nDo you remember the way that Arthur Samuel described machine learning, which we quoted in &lt;&gt;?\n\n: Suppose we arrange for some automatic means of testing the effectiveness of any current weight assignment in terms of actual performance and provide a mechanism for altering the weight assignment so as to maximize the performance. We need not go into the details of such a procedure to see that it could be made entirely automatic and to see that a machine so programmed would “learn” from its experience.\n\nAs we discussed, this is the key to allowing us to have a model that can get better and better—that can learn. But our pixel similarity approach does not really do this. We do not have any kind of weight assignment, or any way of improving based on testing the effectiveness of a weight assignment. In other words, we can’t really improve our pixel similarity approach by modifying a set of parameters. In order to take advantage of the power of deep learning, we will first have to represent our task in the way that Arthur Samuel described it.\nInstead of trying to find the similarity between an image and an “ideal image,” we could instead look at each individual pixel and come up with a set of weights for each one, such that the highest weights are associated with those pixels most likely to be black for a particular category. For instance, pixels toward the bottom right are not very likely to be activated for a 7, so they should have a low weight for a 7, but they are likely to be activated for an 8, so they should have a high weight for an 8. This can be represented as a function and set of weight values for each possible category—for instance the probability of being the number 8:\ndef pr_eight(x,w): return (x*w).sum()\nHere we are assuming that x is the image, represented as a vector—in other words, with all of the rows stacked up end to end into a single long line. And we are assuming that the weights are a vector w. If we have this function, then we just need some way to update the weights to make them a little bit better. With such an approach, we can repeat that step a number of times, making the weights better and better, until they are as good as we can make them.\nWe want to find the specific values for the vector w that causes the result of our function to be high for those images that are actually 8s, and low for those images that are not. Searching for the best vector w is a way to search for the best function for recognising 8s. (Because we are not yet using a deep neural network, we are limited by what our function can actually do—we are going to fix that constraint later in this chapter.)\nTo be more specific, here are the steps that we are going to require, to turn this function into a machine learning classifier:\n\nInitialize the weights.\nFor each image, use these weights to predict whether it appears to be a 3 or a 7.\nBased on these predictions, calculate how good the model is (its loss).\nCalculate the gradient, which measures for each weight, how changing that weight would change the loss\nStep (that is, change) all the weights based on that calculation.\nGo back to the step 2, and repeat the process.\nIterate until you decide to stop the training process (for instance, because the model is good enough or you don’t want to wait any longer).\n\nThese seven steps, illustrated in &lt;&gt;, are the key to the training of all deep learning models. That deep learning turns out to rely entirely on these steps is extremely surprising and counterintuitive. It’s amazing that this process can solve such complex problems. But, as you’ll see, it really does!\n\n\nShow code\n#id gradient_descent\n#caption The gradient descent process\n#alt Graph showing the steps for Gradient Descent\ngv('''\ninit-&gt;predict-&gt;loss-&gt;gradient-&gt;step-&gt;stop\nstep-&gt;predict[label=repeat]\n''')\n\n\n\n\n\n\n\n\n\nThere are many different ways to do each of these seven steps, and we will be learning about them throughout the rest of this book. These are the details that make a big difference for deep learning practitioners, but it turns out that the general approach to each one generally follows some basic principles. Here are a few guidelines:\n\nInitialize:: We initialize the parameters to random values. This may sound surprising. There are certainly other choices we could make, such as initializing them to the percentage of times that pixel is activated for that category—but since we already know that we have a routine to improve these weights, it turns out that just starting with random weights works perfectly well.\nLoss:: This is what Samuel referred to when he spoke of testing the effectiveness of any current weight assignment in terms of actual performance. We need some function that will return a number that is small if the performance of the model is good (the standard approach is to treat a small loss as good, and a large loss as bad, although this is just a convention).\nStep:: A simple way to figure out whether a weight should be increased a bit, or decreased a bit, would be just to try it: increase the weight by a small amount, and see if the loss goes up or down. Once you find the correct direction, you could then change that amount by a bit more, and a bit less, until you find an amount that works well. However, this is slow! As we will see, the magic of calculus allows us to directly figure out in which direction, and by roughly how much, to change each weight, without having to try all these small changes. The way to do this is by calculating gradients. This is just a performance optimization, we would get exactly the same results by using the slower manual process as well.\nStop:: Once we’ve decided how many epochs to train the model for (a few suggestions for this were given in the earlier list), we apply that decision. This is where that decision is applied. For our digit classifier, we would keep training until the accuracy of the model started getting worse, or we ran out of time.\n\nBefore applying these steps to our image classification problem, let’s illustrate what they look like in a simpler case. First we will define a very simple function, the quadratic—let’s pretend that this is our loss function, and x is a weight parameter of the function:\n\n\nShow code\ndef f(x): return x**2\n\n\nHere is a graph of that function:\n\n\nShow code\nplot_function(f, 'x', 'x**2')\n\n\n\n\n\n\n\n\n\nThe sequence of steps we described earlier starts by picking some random value for a parameter, and calculating the value of the loss:\n\n\nShow code\nplot_function(f, 'x', 'x**2')\nplt.scatter(-1.5, f(-1.5), color='red');\n\n\n\n\n\n\n\n\n\nNow we look to see what would happen if we increased or decreased our parameter by a little bit—the adjustment. This is simply the slope at a particular point:\n\nWe can change our weight by a little in the direction of the slope, calculate our loss and adjustment again, and repeat this a few times. Eventually, we will get to the lowest point on our curve:\n\nThis basic idea goes all the way back to Isaac Newton, who pointed out that we can optimize arbitrary functions in this way. Regardless of how complicated our functions become, this basic approach of gradient descent will not significantly change. The only minor changes we will see later in this book are some handy ways we can make it faster, by finding better steps.\n\nCalculating Gradients\nThe one magic step is the bit where we calculate the gradients. As we mentioned, we use calculus as a performance optimization; it allows us to more quickly calculate whether our loss will go up or down when we adjust our parameters up or down. In other words, the gradients will tell us how much we have to change each weight to make our model better.\nYou may remember from your high school calculus class that the derivative of a function tells you how much a change in its parameters will change its result. If not, don’t worry, lots of us forget calculus once high school is behind us! But you will have to have some intuitive understanding of what a derivative is before you continue, so if this is all very fuzzy in your head, head over to Khan Academy and complete the lessons on basic derivatives. You won’t have to know how to calculate them yourselves, you just have to know what a derivative is.\nThe key point about a derivative is this: for any function, such as the quadratic function we saw in the previous section, we can calculate its derivative. The derivative is another function. It calculates the change, rather than the value. For instance, the derivative of the quadratic function at the value 3 tells us how rapidly the function changes at the value 3. More specifically, you may recall that gradient is defined as rise/run, that is, the change in the value of the function, divided by the change in the value of the parameter. When we know how our function will change, then we know what we need to do to make it smaller. This is the key to machine learning: having a way to change the parameters of a function to make it smaller. Calculus provides us with a computational shortcut, the derivative, which lets us directly calculate the gradients of our functions.\nOne important thing to be aware of is that our function has lots of weights that we need to adjust, so when we calculate the derivative we won’t get back one number, but lots of them—a gradient for every weight. But there is nothing mathematically tricky here; you can calculate the derivative with respect to one weight, and treat all the other ones as constant, then repeat that for each other weight. This is how all of the gradients are calculated, for every weight.\nWe mentioned just now that you won’t have to calculate any gradients yourself. How can that be? Amazingly enough, PyTorch is able to automatically compute the derivative of nearly any function! What’s more, it does it very fast. Most of the time, it will be at least as fast as any derivative function that you can create by hand. Let’s see an example.\nFirst, let’s pick a tensor value which we want gradients at:\n\n\nShow code\nxt = tensor(3.).requires_grad_()\n\n\nNotice the special method requires_grad_? That’s the magical incantation we use to tell PyTorch that we want to calculate gradients with respect to that variable at that value. It is essentially tagging the variable, so PyTorch will remember to keep track of how to compute gradients of the other, direct calculations on it that you will ask for.\n\na: This API might throw you off if you’re coming from math or physics. In those contexts the “gradient” of a function is just another function (i.e., its derivative), so you might expect gradient-related APIs to give you a new function. But in deep learning, “gradients” usually means the value of a function’s derivative at a particular argument value. The PyTorch API also puts the focus on the argument, not the function you’re actually computing the gradients of. It may feel backwards at first, but it’s just a different perspective.\n\nNow we calculate our function with that value. Notice how PyTorch prints not just the value calculated, but also a note that it has a gradient function it’ll be using to calculate our gradients when needed:\n\n\nShow code\nyt = f(xt)\nyt\n\n\ntensor(9., grad_fn=&lt;PowBackward0&gt;)\n\n\nFinally, we tell PyTorch to calculate the gradients for us:\n\n\nShow code\nyt.backward()\n\n\nThe “backward” here refers to backpropagation, which is the name given to the process of calculating the derivative of each layer. We’ll see how this is done exactly in chapter &lt;&gt;, when we calculate the gradients of a deep neural net from scratch. This is called the “backward pass” of the network, as opposed to the “forward pass,” which is where the activations are calculated. Life would probably be easier if backward was just called calculate_grad, but deep learning folks really do like to add jargon everywhere they can!\nWe can now view the gradients by checking the grad attribute of our tensor:\n\n\nShow code\nxt.grad\n\n\ntensor(6.)\n\n\nIf you remember your high school calculus rules, the derivative of x**2 is 2*x, and we have x=3, so the gradients should be 2*3=6, which is what PyTorch calculated for us!\nNow we’ll repeat the preceding steps, but with a vector argument for our function:\n\n\nShow code\nxt = tensor([3.,4.,10.]).requires_grad_()\nxt\n\n\ntensor([ 3.,  4., 10.], requires_grad=True)\n\n\nAnd we’ll add sum to our function so it can take a vector (i.e., a rank-1 tensor), and return a scalar (i.e., a rank-0 tensor):\n\n\nShow code\ndef f(x): return (x**2).sum()\n\nyt = f(xt)\nyt\n\n\ntensor(125., grad_fn=&lt;SumBackward0&gt;)\n\n\nOur gradients are 2*xt, as we’d expect!\n\n\nShow code\nyt.backward()\nxt.grad\n\n\ntensor([ 6.,  8., 20.])\n\n\nThe gradients only tell us the slope of our function, they don’t actually tell us exactly how far to adjust the parameters. But it gives us some idea of how far; if the slope is very large, then that may suggest that we have more adjustments to do, whereas if the slope is very small, that may suggest that we are close to the optimal value.\n\n\nStepping With a Learning Rate\nDeciding how to change our parameters based on the values of the gradients is an important part of the deep learning process. Nearly all approaches start with the basic idea of multiplying the gradient by some small number, called the learning rate (LR). The learning rate is often a number between 0.001 and 0.1, although it could be anything. Often, people select a learning rate just by trying a few, and finding which results in the best model after training (we’ll show you a better approach later in this book, called the learning rate finder). Once you’ve picked a learning rate, you can adjust your parameters using this simple function:\nw -= gradient(w) * lr\nThis is known as stepping your parameters, using an optimizer step. Notice how we subtract the gradient * lr from the parameter to update it. This allows us to adjust the parameter in the direction of the slope by increasing the parameter when the slope is negative and decreasing the parameter when the slope is positive. We want to adjust our parameters in the direction of the slope because our goal in deep learning is to minimize the loss.\nIf you pick a learning rate that’s too low, it can mean having to do a lot of steps. &lt;&gt; illustrates that.\n\nBut picking a learning rate that’s too high is even worse—it can actually result in the loss getting worse, as we see in &lt;&gt;!\n\nIf the learning rate is too high, it may also “bounce” around, rather than actually diverging; &lt;&gt; shows how this has the result of taking many steps to train successfully.\n\nNow let’s apply all of this in an end-to-end example.\n\n\nAn End-to-End SGD Example\nWe’ve seen how to use gradients to find a minimum. Now it’s time to look at an SGD example and see how finding a minimum can be used to train a model to fit data better.\nLet’s start with a simple, synthetic, example model. Imagine you were measuring the speed of a roller coaster as it went over the top of a hump. It would start fast, and then get slower as it went up the hill; it would be slowest at the top, and it would then speed up again as it went downhill. You want to build a model of how the speed changes over time. If you were measuring the speed manually every second for 20 seconds, it might look something like this:\n\n\nShow code\ntime = torch.arange(0,20).float(); time\n\n\ntensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19.])\n\n\n\n\nShow code\nspeed = torch.randn(20)*3 + 0.75*(time-9.5)**2 + 1\nplt.scatter(time,speed);\n\n\n\n\n\n\n\n\n\nWe’ve added a bit of random noise, since measuring things manually isn’t precise. This means it’s not that easy to answer the question: what was the roller coaster’s speed? Using SGD we can try to find a function that matches our observations. We can’t consider every possible function, so let’s use a guess that it will be quadratic; i.e., a function of the form a*(time**2)+(b*time)+c.\nWe want to distinguish clearly between the function’s input (the time when we are measuring the coaster’s speed) and its parameters (the values that define which quadratic we’re trying). So, let’s collect the parameters in one argument and thus separate the input, t, and the parameters, params, in the function’s signature:\n\n\nShow code\ndef f(t, params):\n    a,b,c = params\n    return a*(t**2) + (b*t) + c\n\n\nIn other words, we’ve restricted the problem of finding the best imaginable function that fits the data, to finding the best quadratic function. This greatly simplifies the problem, since every quadratic function is fully defined by the three parameters a, b, and c. Thus, to find the best quadratic function, we only need to find the best values for a, b, and c.\nIf we can solve this problem for the three parameters of a quadratic function, we’ll be able to apply the same approach for other, more complex functions with more parameters—such as a neural net. Let’s find the parameters for f first, and then we’ll come back and do the same thing for the MNIST dataset with a neural net.\nWe need to define first what we mean by “best.” We define this precisely by choosing a loss function, which will return a value based on a prediction and a target, where lower values of the function correspond to “better” predictions. It is important for loss functions to return lower values when predictions are more accurate, as the SGD procedure we defined earlier will try to minimize this loss. For continuous data, it’s common to use mean squared error:\n\n\nShow code\ndef mse(preds, targets): return ((preds-targets)**2).mean()\n\n\nNow, let’s work through our 7 step process.\n\nStep 1: Initialize the parameters\nFirst, we initialize the parameters to random values, and tell PyTorch that we want to track their gradients, using requires_grad_:\n\n\nShow code\nparams = torch.randn(3).requires_grad_()\n\n\n\n\nShow code\n#hide\norig_params = params.clone()\n\n\n\n\nStep 2: Calculate the predictions\nNext, we calculate the predictions:\n\n\nShow code\npreds = f(time, params)\n\n\nLet’s create a little function to see how close our predictions are to our targets, and take a look:\n\n\nShow code\ndef show_preds(preds, ax=None):\n    if ax is None: ax=plt.subplots()[1]\n    ax.scatter(time, speed)\n    ax.scatter(time, to_np(preds), color='red')\n    ax.set_ylim(-300,100)\n\n\n\n\nShow code\nshow_preds(preds)\n\n\n\n\n\n\n\n\n\nThis doesn’t look very close—our random parameters suggest that the roller coaster will end up going backwards, since we have negative speeds!\n\n\nStep 3: Calculate the loss\nWe calculate the loss as follows:\n\n\nShow code\nloss = mse(preds, speed)\nloss\n\n\ntensor(25823.8086, grad_fn=&lt;MeanBackward0&gt;)\n\n\nOur goal is now to improve this. To do that, we’ll need to know the gradients.\n\n\nStep 4: Calculate the gradients\nThe next step is to calculate the gradients. In other words, calculate an approximation of how the parameters need to change:\n\n\nShow code\nloss.backward()\nparams.grad\n\n\ntensor([-53195.8594,  -3419.7146,   -253.8908])\n\n\n\n\nShow code\nparams.grad * 1e-5\n\n\ntensor([-0.5320, -0.0342, -0.0025])\n\n\nWe can use these gradients to improve our parameters. We’ll need to pick a learning rate (we’ll discuss how to do that in practice in the next chapter; for now we’ll just use 1e-5, or 0.00001):\n\n\nShow code\nparams\n\n\ntensor([-0.7658, -0.7506,  1.3525], requires_grad=True)\n\n\n\n\nStep 5: Step the weights.\nNow we need to update the parameters based on the gradients we just calculated:\n\n\nShow code\nlr = 1e-5\nparams.data -= lr * params.grad.data\nparams.grad = None\n\n\n\na: Understanding this bit depends on remembering recent history. To calculate the gradients we call backward on the loss. But this loss was itself calculated by mse, which in turn took preds as an input, which was calculated using f taking as an input params, which was the object on which we originally called requires_grad_—which is the original call that now allows us to call backward on loss. This chain of function calls represents the mathematical composition of functions, which enables PyTorch to use calculus’s chain rule under the hood to calculate these gradients.\n\nLet’s see if the loss has improved:\n\n\nShow code\npreds = f(time,params)\nmse(preds, speed)\n\n\ntensor(5435.5366, grad_fn=&lt;MeanBackward0&gt;)\n\n\nAnd take a look at the plot:\n\n\nShow code\nshow_preds(preds)\n\n\n\n\n\n\n\n\n\nWe need to repeat this a few times, so we’ll create a function to apply one step:\n\n\nShow code\ndef apply_step(params, prn=True):\n    preds = f(time, params)\n    loss = mse(preds, speed)\n    loss.backward()\n    params.data -= lr * params.grad.data\n    params.grad = None\n    if prn: print(loss.item())\n    return preds\n\n\n\n\nStep 6: Repeat the process\nNow we iterate. By looping and performing many improvements, we hope to reach a good result:\n\n\nShow code\nfor i in range(10): apply_step(params)\n\n\n5435.53662109375\n1577.4495849609375\n847.3780517578125\n709.22265625\n683.0757446289062\n678.12451171875\n677.1839599609375\n677.0025024414062\n676.96435546875\n676.9537353515625\n\n\n\n\nShow code\n#hide\nparams = orig_params.detach().requires_grad_()\n\n\nThe loss is going down, just as we hoped! But looking only at these loss numbers disguises the fact that each iteration represents an entirely different quadratic function being tried, on the way to finding the best possible quadratic function. We can see this process visually if, instead of printing out the loss function, we plot the function at every step. Then we can see how the shape is approaching the best possible quadratic function for our data:\n\n\nShow code\n_,axs = plt.subplots(1,4,figsize=(12,3))\nfor ax in axs: show_preds(apply_step(params, False), ax)\nplt.tight_layout()\n\n\n\n\n\n\n\n\n\n\n\nStep 7: stop\nWe just decided to stop after 10 epochs arbitrarily. In practice, we would watch the training and validation losses and our metrics to decide when to stop, as we’ve discussed.\n\n\n\nSummarizing Gradient Descent\n\n\nShow code\n#hide_input\n#id gradient_descent\n#caption The gradient descent process\n#alt Graph showing the steps for Gradient Descent\ngv('''\ninit-&gt;predict-&gt;loss-&gt;gradient-&gt;step-&gt;stop\nstep-&gt;predict[label=repeat]\n''')\n\n\n\n\n\n\n\n\n\nTo summarize, at the beginning, the weights of our model can be random (training from scratch) or come from a pretrained model (transfer learning). In the first case, the output we will get from our inputs won’t have anything to do with what we want, and even in the second case, it’s very likely the pretrained model won’t be very good at the specific task we are targeting. So the model will need to learn better weights.\nWe begin by comparing the outputs the model gives us with our targets (we have labeled data, so we know what result the model should give) using a loss function, which returns a number that we want to make as low as possible by improving our weights. To do this, we take a few data items (such as images) from the training set and feed them to our model. We compare the corresponding targets using our loss function, and the score we get tells us how wrong our predictions were. We then change the weights a little bit to make it slightly better.\nTo find how to change the weights to make the loss a bit better, we use calculus to calculate the gradients. (Actually, we let PyTorch do it for us!) Let’s consider an analogy. Imagine you are lost in the mountains with your car parked at the lowest point. To find your way back to it, you might wander in a random direction, but that probably wouldn’t help much. Since you know your vehicle is at the lowest point, you would be better off going downhill. By always taking a step in the direction of the steepest downward slope, you should eventually arrive at your destination. We use the magnitude of the gradient (i.e., the steepness of the slope) to tell us how big a step to take; specifically, we multiply the gradient by a number we choose called the learning rate to decide on the step size. We then iterate until we have reached the lowest point, which will be our parking lot, then we can stop.\nAll of that we just saw can be transposed directly to the MNIST dataset, except for the loss function. Let’s now see how we can define a good training objective."
  },
  {
    "objectID": "posts/04_mnist_basics.html#the-mnist-loss-function",
    "href": "posts/04_mnist_basics.html#the-mnist-loss-function",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "The MNIST Loss Function",
    "text": "The MNIST Loss Function\nWe already have our independent variables x—these are the images themselves. We’ll concatenate them all into a single tensor, and also change them from a list of matrices (a rank-3 tensor) to a list of vectors (a rank-2 tensor). We can do this using view, which is a PyTorch method that changes the shape of a tensor without changing its contents. -1 is a special parameter to view that means “make this axis as big as necessary to fit all the data”:\n\n\nShow code\ntrain_x = torch.cat([stacked_threes, stacked_sevens]).view(-1, 28*28)\n\n\nWe need a label for each image. We’ll use 1 for 3s and 0 for 7s:\n\n\nShow code\ntrain_y = tensor([1]*len(threes) + [0]*len(sevens)).unsqueeze(1)\ntrain_x.shape,train_y.shape\n\n\n(torch.Size([12396, 784]), torch.Size([12396, 1]))\n\n\nA Dataset in PyTorch is required to return a tuple of (x,y) when indexed. Python provides a zip function which, when combined with list, provides a simple way to get this functionality:\n\n\nShow code\ndset = list(zip(train_x,train_y))\nx,y = dset[0]\nx.shape,y\n\n\n(torch.Size([784]), tensor([1]))\n\n\n\n\nShow code\nvalid_x = torch.cat([valid_3_tens, valid_7_tens]).view(-1, 28*28)\nvalid_y = tensor([1]*len(valid_3_tens) + [0]*len(valid_7_tens)).unsqueeze(1)\nvalid_dset = list(zip(valid_x,valid_y))\n\n\nNow we need an (initially random) weight for every pixel (this is the initialize step in our seven-step process):\n\n\nShow code\ndef init_params(size, std=1.0): return (torch.randn(size)*std).requires_grad_()\n\n\n\n\nShow code\nweights = init_params((28*28,1))\n\n\nThe function weights*pixels won’t be flexible enough—it is always equal to 0 when the pixels are equal to 0 (i.e., its intercept is 0). You might remember from high school math that the formula for a line is y=w*x+b; we still need the b. We’ll initialize it to a random number too:\n\n\nShow code\nbias = init_params(1)\n\n\nIn neural networks, the w in the equation y=w*x+b is called the weights, and the b is called the bias. Together, the weights and bias make up the parameters.\n\njargon: Parameters: The weights and biases of a model. The weights are the w in the equation w*x+b, and the biases are the b in that equation.\n\nWe can now calculate a prediction for one image:\n\n\nShow code\n(train_x[0]*weights.T).sum() + bias\n\n\ntensor([20.2336], grad_fn=&lt;AddBackward0&gt;)\n\n\nWhile we could use a Python for loop to calculate the prediction for each image, that would be very slow. Because Python loops don’t run on the GPU, and because Python is a slow language for loops in general, we need to represent as much of the computation in a model as possible using higher-level functions.\nIn this case, there’s an extremely convenient mathematical operation that calculates w*x for every row of a matrix—it’s called matrix multiplication. &lt;&gt; shows what matrix multiplication looks like.\n\nThis image shows two matrices, A and B, being multiplied together. Each item of the result, which we’ll call AB, contains each item of its corresponding row of A multiplied by each item of its corresponding column of B, added together. For instance, row 1, column 2 (the yellow dot with a red border) is calculated as \\(a_{1,1} * b_{1,2} + a_{1,2} * b_{2,2}\\). If you need a refresher on matrix multiplication, we suggest you take a look at the Intro to Matrix Multiplication on Khan Academy, since this is the most important mathematical operation in deep learning.\nIn Python, matrix multiplication is represented with the @ operator. Let’s try it:\n\n\nShow code\ndef linear1(xb): return xb@weights + bias\npreds = linear1(train_x)\npreds\n\n\ntensor([[20.2336],\n        [17.0644],\n        [15.2384],\n        ...,\n        [18.3804],\n        [23.8567],\n        [28.6816]], grad_fn=&lt;AddBackward0&gt;)\n\n\nThe first element is the same as we calculated before, as we’d expect. This equation, batch@weights + bias, is one of the two fundamental equations of any neural network (the other one is the activation function, which we’ll see in a moment).\nLet’s check our accuracy. To decide if an output represents a 3 or a 7, we can just check whether it’s greater than 0.0, so our accuracy for each item can be calculated (using broadcasting, so no loops!) with:\n\n\nShow code\ncorrects = (preds&gt;0.0).float() == train_y\ncorrects\n\n\ntensor([[ True],\n        [ True],\n        [ True],\n        ...,\n        [False],\n        [False],\n        [False]])\n\n\n\n\nShow code\ncorrects.float().mean().item()\n\n\n0.4912068545818329\n\n\nNow let’s see what the change in accuracy is for a small change in one of the weights (note that we have to ask PyTorch not to calculate gradients as we do this, which is what with torch.no_grad() is doing here):\n\n\nShow code\nwith torch.no_grad(): weights[0] *= 1.0001\n\n\n\n\nShow code\npreds = linear1(train_x)\n((preds&gt;0.0).float() == train_y).float().mean().item()\n\n\n0.4912068545818329\n\n\nAs we’ve seen, we need gradients in order to improve our model using SGD, and in order to calculate gradients we need some loss function that represents how good our model is. That is because the gradients are a measure of how that loss function changes with small tweaks to the weights.\nSo, we need to choose a loss function. The obvious approach would be to use accuracy, which is our metric, as our loss function as well. In this case, we would calculate our prediction for each image, collect these values to calculate an overall accuracy, and then calculate the gradients of each weight with respect to that overall accuracy.\nUnfortunately, we have a significant technical problem here. The gradient of a function is its slope, or its steepness, which can be defined as rise over run—that is, how much the value of the function goes up or down, divided by how much we changed the input. We can write this in mathematically as: (y_new - y_old) / (x_new - x_old). This gives us a good approximation of the gradient when x_new is very similar to x_old, meaning that their difference is very small. But accuracy only changes at all when a prediction changes from a 3 to a 7, or vice versa. The problem is that a small change in weights from x_old to x_new isn’t likely to cause any prediction to change, so (y_new - y_old) will almost always be 0. In other words, the gradient is 0 almost everywhere.\nA very small change in the value of a weight will often not actually change the accuracy at all. This means it is not useful to use accuracy as a loss function—if we do, most of the time our gradients will actually be 0, and the model will not be able to learn from that number.\n\nS: In mathematical terms, accuracy is a function that is constant almost everywhere (except at the threshold, 0.5), so its derivative is nil almost everywhere (and infinity at the threshold). This then gives gradients that are 0 or infinite, which are useless for updating the model.\n\nInstead, we need a loss function which, when our weights result in slightly better predictions, gives us a slightly better loss. So what does a “slightly better prediction” look like, exactly? Well, in this case, it means that if the correct answer is a 3 the score is a little higher, or if the correct answer is a 7 the score is a little lower.\nLet’s write such a function now. What form does it take?\nThe loss function receives not the images themselves, but the predictions from the model. Let’s make one argument, prds, of values between 0 and 1, where each value is the prediction that an image is a 3. It is a vector (i.e., a rank-1 tensor), indexed over the images.\nThe purpose of the loss function is to measure the difference between predicted values and the true values — that is, the targets (aka labels). Let’s make another argument, trgts, with values of 0 or 1 which tells whether an image actually is a 3 or not. It is also a vector (i.e., another rank-1 tensor), indexed over the images.\nSo, for instance, suppose we had three images which we knew were a 3, a 7, and a 3. And suppose our model predicted with high confidence (0.9) that the first was a 3, with slight confidence (0.4) that the second was a 7, and with fair confidence (0.2), but incorrectly, that the last was a 7. This would mean our loss function would receive these values as its inputs:\n\n\nShow code\ntrgts  = tensor([1,0,1])\nprds   = tensor([0.9, 0.4, 0.2])\n\n\nHere’s a first try at a loss function that measures the distance between predictions and targets:\n\n\nShow code\ndef mnist_loss(predictions, targets):\n    return torch.where(targets==1, 1-predictions, predictions).mean()\n\n\nWe’re using a new function, torch.where(a,b,c). This is the same as running the list comprehension [b[i] if a[i] else c[i] for i in range(len(a))], except it works on tensors, at C/CUDA speed. In plain English, this function will measure how distant each prediction is from 1 if it should be 1, and how distant it is from 0 if it should be 0, and then it will take the mean of all those distances.\n\nnote: Read the Docs: It’s important to learn about PyTorch functions like this, because looping over tensors in Python performs at Python speed, not C/CUDA speed! Try running help(torch.where) now to read the docs for this function, or, better still, look it up on the PyTorch documentation site.\n\nLet’s try it on our prds and trgts:\n\n\nShow code\ntorch.where(trgts==1, 1-prds, prds)\n\n\ntensor([0.1000, 0.4000, 0.8000])\n\n\nYou can see that this function returns a lower number when predictions are more accurate, when accurate predictions are more confident (higher absolute values), and when inaccurate predictions are less confident. In PyTorch, we always assume that a lower value of a loss function is better. Since we need a scalar for the final loss, mnist_loss takes the mean of the previous tensor:\n\n\nShow code\nmnist_loss(prds,trgts)\n\n\ntensor(0.4333)\n\n\nFor instance, if we change our prediction for the one “false” target from 0.2 to 0.8 the loss will go down, indicating that this is a better prediction:\n\n\nShow code\nmnist_loss(tensor([0.9, 0.4, 0.8]),trgts)\n\n\ntensor(0.2333)\n\n\nOne problem with mnist_loss as currently defined is that it assumes that predictions are always between 0 and 1. We need to ensure, then, that this is actually the case! As it happens, there is a function that does exactly that—let’s take a look.\n\nSigmoid\nThe sigmoid function always outputs a number between 0 and 1. It’s defined as follows:\n\n\nShow code\ndef sigmoid(x): return 1/(1+torch.exp(-x))\n\n\nPytorch defines an accelerated version for us, so we don’t really need our own. This is an important function in deep learning, since we often want to ensure values are between 0 and 1. This is what it looks like:\n\n\nShow code\nplot_function(torch.sigmoid, title='Sigmoid', min=-4, max=4)\n\n\n\n\n\n\n\n\n\nAs you can see, it takes any input value, positive or negative, and smooshes it onto an output value between 0 and 1. It’s also a smooth curve that only goes up, which makes it easier for SGD to find meaningful gradients.\nLet’s update mnist_loss to first apply sigmoid to the inputs:\n\n\nShow code\ndef mnist_loss(predictions, targets):\n    predictions = predictions.sigmoid()\n    return torch.where(targets==1, 1-predictions, predictions).mean()\n\n\nNow we can be confident our loss function will work, even if the predictions are not between 0 and 1. All that is required is that a higher prediction corresponds to higher confidence an image is a 3.\nHaving defined a loss function, now is a good moment to recapitulate why we did this. After all, we already had a metric, which was overall accuracy. So why did we define a loss?\nThe key difference is that the metric is to drive human understanding and the loss is to drive automated learning. To drive automated learning, the loss must be a function that has a meaningful derivative. It can’t have big flat sections and large jumps, but instead must be reasonably smooth. This is why we designed a loss function that would respond to small changes in confidence level. This requirement means that sometimes it does not really reflect exactly what we are trying to achieve, but is rather a compromise between our real goal and a function that can be optimized using its gradient. The loss function is calculated for each item in our dataset, and then at the end of an epoch the loss values are all averaged and the overall mean is reported for the epoch.\nMetrics, on the other hand, are the numbers that we really care about. These are the values that are printed at the end of each epoch that tell us how our model is really doing. It is important that we learn to focus on these metrics, rather than the loss, when judging the performance of a model.\n\n\nSGD and Mini-Batches\nNow that we have a loss function that is suitable for driving SGD, we can consider some of the details involved in the next phase of the learning process, which is to change or update the weights based on the gradients. This is called an optimization step.\nIn order to take an optimization step we need to calculate the loss over one or more data items. How many should we use? We could calculate it for the whole dataset, and take the average, or we could calculate it for a single data item. But neither of these is ideal. Calculating it for the whole dataset would take a very long time. Calculating it for a single item would not use much information, so it would result in a very imprecise and unstable gradient. That is, you’d be going to the trouble of updating the weights, but taking into account only how that would improve the model’s performance on that single item.\nSo instead we take a compromise between the two: we calculate the average loss for a few data items at a time. This is called a mini-batch. The number of data items in the mini-batch is called the batch size. A larger batch size means that you will get a more accurate and stable estimate of your dataset’s gradients from the loss function, but it will take longer, and you will process fewer mini-batches per epoch. Choosing a good batch size is one of the decisions you need to make as a deep learning practitioner to train your model quickly and accurately. We will talk about how to make this choice throughout this book.\nAnother good reason for using mini-batches rather than calculating the gradient on individual data items is that, in practice, we nearly always do our training on an accelerator such as a GPU. These accelerators only perform well if they have lots of work to do at a time, so it’s helpful if we can give them lots of data items to work on. Using mini-batches is one of the best ways to do this. However, if you give them too much data to work on at once, they run out of memory—making GPUs happy is also tricky!\nAs we saw in our discussion of data augmentation in &lt;&gt;, we get better generalization if we can vary things during training. One simple and effective thing we can vary is what data items we put in each mini-batch. Rather than simply enumerating our dataset in order for every epoch, instead what we normally do is randomly shuffle it on every epoch, before we create mini-batches. PyTorch and fastai provide a class that will do the shuffling and mini-batch collation for you, called DataLoader.\nA DataLoader can take any Python collection and turn it into an iterator over mini-batches, like so:\n\n\nShow code\ncoll = range(15)\ndl = DataLoader(coll, batch_size=5, shuffle=True)\nlist(dl)\n\n\n[tensor([ 3, 12,  8, 10,  2]),\n tensor([ 9,  4,  7, 14,  5]),\n tensor([ 1, 13,  0,  6, 11])]\n\n\nFor training a model, we don’t just want any Python collection, but a collection containing independent and dependent variables (that is, the inputs and targets of the model). A collection that contains tuples of independent and dependent variables is known in PyTorch as a Dataset. Here’s an example of an extremely simple Dataset:\n\n\nShow code\nds = L(enumerate(string.ascii_lowercase))\nds\n\n\n(#26) [(0, 'a'),(1, 'b'),(2, 'c'),(3, 'd'),(4, 'e'),(5, 'f'),(6, 'g'),(7, 'h'),(8, 'i'),(9, 'j')...]\n\n\nWhen we pass a Dataset to a DataLoader we will get back mini-batches which are themselves tuples of tensors representing batches of independent and dependent variables:\n\n\nShow code\ndl = DataLoader(ds, batch_size=6, shuffle=True)\nlist(dl)\n\n\n[(tensor([17, 18, 10, 22,  8, 14]), ('r', 's', 'k', 'w', 'i', 'o')),\n (tensor([20, 15,  9, 13, 21, 12]), ('u', 'p', 'j', 'n', 'v', 'm')),\n (tensor([ 7, 25,  6,  5, 11, 23]), ('h', 'z', 'g', 'f', 'l', 'x')),\n (tensor([ 1,  3,  0, 24, 19, 16]), ('b', 'd', 'a', 'y', 't', 'q')),\n (tensor([2, 4]), ('c', 'e'))]\n\n\nWe are now ready to write our first training loop for a model using SGD!"
  },
  {
    "objectID": "posts/04_mnist_basics.html#putting-it-all-together",
    "href": "posts/04_mnist_basics.html#putting-it-all-together",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "Putting It All Together",
    "text": "Putting It All Together\nIt’s time to implement the process we saw in &lt;&gt;. In code, our process will be implemented something like this for each epoch:\nfor x,y in dl:\n    pred = model(x)\n    loss = loss_func(pred, y)\n    loss.backward()\n    parameters -= parameters.grad * lr\nFirst, let’s re-initialize our parameters:\n\n\nShow code\nweights = init_params((28*28,1))\nbias = init_params(1)\n\n\nA DataLoader can be created from a Dataset:\n\n\nShow code\ndl = DataLoader(dset, batch_size=256)\nxb,yb = first(dl)\nxb.shape,yb.shape\n\n\n(torch.Size([256, 784]), torch.Size([256, 1]))\n\n\nWe’ll do the same for the validation set:\n\n\nShow code\nvalid_dl = DataLoader(valid_dset, batch_size=256)\n\n\nLet’s create a mini-batch of size 4 for testing:\n\n\nShow code\nbatch = train_x[:4]\nbatch.shape\n\n\ntorch.Size([4, 784])\n\n\n\n\nShow code\npreds = linear1(batch)\npreds\n\n\ntensor([[-11.1002],\n        [  5.9263],\n        [  9.9627],\n        [ -8.1484]], grad_fn=&lt;AddBackward0&gt;)\n\n\n\n\nShow code\nloss = mnist_loss(preds, train_y[:4])\nloss\n\n\ntensor(0.5006, grad_fn=&lt;MeanBackward0&gt;)\n\n\nNow we can calculate the gradients:\n\n\nShow code\nloss.backward()\nweights.grad.shape,weights.grad.mean(),bias.grad\n\n\n(torch.Size([784, 1]), tensor(-0.0001), tensor([-0.0008]))\n\n\nLet’s put that all in a function:\n\n\nShow code\ndef calc_grad(xb, yb, model):\n    preds = model(xb)\n    loss = mnist_loss(preds, yb)\n    loss.backward()\n\n\nand test it:\n\n\nShow code\ncalc_grad(batch, train_y[:4], linear1)\nweights.grad.mean(),bias.grad\n\n\n(tensor(-0.0002), tensor([-0.0015]))\n\n\nBut look what happens if we call it twice:\n\n\nShow code\ncalc_grad(batch, train_y[:4], linear1)\nweights.grad.mean(),bias.grad\n\n\n(tensor(-0.0003), tensor([-0.0023]))\n\n\nThe gradients have changed! The reason for this is that loss.backward actually adds the gradients of loss to any gradients that are currently stored. So, we have to set the current gradients to 0 first:\n\n\nShow code\nweights.grad.zero_()\nbias.grad.zero_();\n\n\n\nnote: Inplace Operations: Methods in PyTorch whose names end in an underscore modify their objects in place. For instance, bias.zero_() sets all elements of the tensor bias to 0.\n\nOur only remaining step is to update the weights and biases based on the gradient and learning rate. When we do so, we have to tell PyTorch not to take the gradient of this step too—otherwise things will get very confusing when we try to compute the derivative at the next batch! If we assign to the data attribute of a tensor then PyTorch will not take the gradient of that step. Here’s our basic training loop for an epoch:\n\n\nShow code\ndef train_epoch(model, lr, params):\n    for xb,yb in dl:\n        calc_grad(xb, yb, model)\n        for p in params:\n            p.data -= p.grad*lr\n            p.grad.zero_()\n\n\nWe also want to check how we’re doing, by looking at the accuracy of the validation set. To decide if an output represents a 3 or a 7, we can just check whether it’s greater than 0. So our accuracy for each item can be calculated (using broadcasting, so no loops!) with:\n\n\nShow code\n(preds&gt;0.0).float() == train_y[:4]\n\n\ntensor([[False],\n        [ True],\n        [ True],\n        [False]])\n\n\nThat gives us this function to calculate our validation accuracy:\n\n\nShow code\ndef batch_accuracy(xb, yb):\n    preds = xb.sigmoid()\n    correct = (preds&gt;0.5) == yb\n    return correct.float().mean()\n\n\nWe can check it works:\n\n\nShow code\nbatch_accuracy(linear1(batch), train_y[:4])\n\n\ntensor(0.5000)\n\n\nand then put the batches together:\n\n\nShow code\ndef validate_epoch(model):\n    accs = [batch_accuracy(model(xb), yb) for xb,yb in valid_dl]\n    return round(torch.stack(accs).mean().item(), 4)\n\n\n\n\nShow code\nvalidate_epoch(linear1)\n\n\n0.5219\n\n\nThat’s our starting point. Let’s train for one epoch, and see if the accuracy improves:\n\n\nShow code\nlr = 1.\nparams = weights,bias\ntrain_epoch(linear1, lr, params)\nvalidate_epoch(linear1)\n\n\n0.6883\n\n\nThen do a few more:\n\n\nShow code\nfor i in range(20):\n    train_epoch(linear1, lr, params)\n    print(validate_epoch(linear1), end=' ')\n\n\n0.8314 0.9017 0.9227 0.9349 0.9438 0.9501 0.9535 0.9564 0.9594 0.9618 0.9613 0.9638 0.9643 0.9652 0.9662 0.9677 0.9687 0.9691 0.9691 0.9696 \n\n\nLooking good! We’re already about at the same accuracy as our “pixel similarity” approach, and we’ve created a general-purpose foundation we can build on. Our next step will be to create an object that will handle the SGD step for us. In PyTorch, it’s called an optimizer.\n\nCreating an Optimizer\nBecause this is such a general foundation, PyTorch provides some useful classes to make it easier to implement. The first thing we can do is replace our linear1 function with PyTorch’s nn.Linear module. A module is an object of a class that inherits from the PyTorch nn.Module class. Objects of this class behave identically to standard Python functions, in that you can call them using parentheses and they will return the activations of a model.\nnn.Linear does the same thing as our init_params and linear together. It contains both the weights and biases in a single class. Here’s how we replicate our model from the previous section:\n\n\nShow code\nlinear_model = nn.Linear(28*28,1)\n\n\nEvery PyTorch module knows what parameters it has that can be trained; they are available through the parameters method:\n\n\nShow code\nw,b = linear_model.parameters()\nw.shape,b.shape\n\n\n(torch.Size([1, 784]), torch.Size([1]))\n\n\nWe can use this information to create an optimizer:\n\n\nShow code\nclass BasicOptim:\n    def __init__(self,params,lr): self.params,self.lr = list(params),lr\n\n    def step(self, *args, **kwargs):\n        for p in self.params: p.data -= p.grad.data * self.lr\n\n    def zero_grad(self, *args, **kwargs):\n        for p in self.params: p.grad = None\n\n\nWe can create our optimizer by passing in the model’s parameters:\n\n\nShow code\nopt = BasicOptim(linear_model.parameters(), lr)\n\n\nOur training loop can now be simplified to:\n\n\nShow code\ndef train_epoch(model):\n    for xb,yb in dl:\n        calc_grad(xb, yb, model)\n        opt.step()\n        opt.zero_grad()\n\n\nOur validation function doesn’t need to change at all:\n\n\nShow code\nvalidate_epoch(linear_model)\n\n\n0.4157\n\n\nLet’s put our little training loop in a function, to make things simpler:\n\n\nShow code\ndef train_model(model, epochs):\n    for i in range(epochs):\n        train_epoch(model)\n        print(validate_epoch(model), end=' ')\n\n\nThe results are the same as in the previous section:\n\n\nShow code\ntrain_model(linear_model, 20)\n\n\n0.4932 0.8618 0.8203 0.9102 0.9331 0.9468 0.9555 0.9629 0.9658 0.9673 0.9687 0.9707 0.9726 0.9751 0.9761 0.9761 0.9775 0.978 0.9785 0.9785 \n\n\nfastai provides the SGD class which, by default, does the same thing as our BasicOptim:\n\n\nShow code\nlinear_model = nn.Linear(28*28,1)\nopt = SGD(linear_model.parameters(), lr)\ntrain_model(linear_model, 20)\n\n\n0.4932 0.852 0.8335 0.9116 0.9326 0.9473 0.9555 0.9624 0.9648 0.9668 0.9692 0.9712 0.9731 0.9746 0.9761 0.9765 0.9775 0.978 0.9785 0.9785 \n\n\nfastai also provides Learner.fit, which we can use instead of train_model. To create a Learner we first need to create a DataLoaders, by passing in our training and validation DataLoaders:\n\n\nShow code\ndls = DataLoaders(dl, valid_dl)\n\n\nTo create a Learner without using an application (such as vision_learner) we need to pass in all the elements that we’ve created in this chapter: the DataLoaders, the model, the optimization function (which will be passed the parameters), the loss function, and optionally any metrics to print:\n\n\nShow code\nlearn = Learner(dls, nn.Linear(28*28,1), opt_func=SGD,\n                loss_func=mnist_loss, metrics=batch_accuracy)\n\n\nNow we can call fit:\n\n\nShow code\nlearn.fit(10, lr=lr)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nbatch_accuracy\ntime\n\n\n\n\n0\n0.636857\n0.503549\n0.495584\n00:00\n\n\n1\n0.545725\n0.170281\n0.866045\n00:00\n\n\n2\n0.199223\n0.184893\n0.831207\n00:00\n\n\n3\n0.086580\n0.107836\n0.911187\n00:00\n\n\n4\n0.045185\n0.078481\n0.932777\n00:00\n\n\n5\n0.029108\n0.062792\n0.946516\n00:00\n\n\n6\n0.022560\n0.053017\n0.955348\n00:00\n\n\n7\n0.019687\n0.046500\n0.962218\n00:00\n\n\n8\n0.018252\n0.041929\n0.965162\n00:00\n\n\n9\n0.017402\n0.038573\n0.967615\n00:00\n\n\n\n\n\nAs you can see, there’s nothing magic about the PyTorch and fastai classes. They are just convenient pre-packaged pieces that make your life a bit easier! (They also provide a lot of extra functionality we’ll be using in future chapters.)\nWith these classes, we can now replace our linear model with a neural network."
  },
  {
    "objectID": "posts/04_mnist_basics.html#adding-a-nonlinearity",
    "href": "posts/04_mnist_basics.html#adding-a-nonlinearity",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "Adding a Nonlinearity",
    "text": "Adding a Nonlinearity\nSo far we have a general procedure for optimizing the parameters of a function, and we have tried it out on a very boring function: a simple linear classifier. A linear classifier is very constrained in terms of what it can do. To make it a bit more complex (and able to handle more tasks), we need to add something nonlinear between two linear classifiers—this is what gives us a neural network.\nHere is the entire definition of a basic neural network:\n\n\nShow code\ndef simple_net(xb): \n    res = xb@w1 + b1\n    res = res.max(tensor(0.0))\n    res = res@w2 + b2\n    return res\n\n\nThat’s it! All we have in simple_net is two linear classifiers with a max function between them.\nHere, w1 and w2 are weight tensors, and b1 and b2 are bias tensors; that is, parameters that are initially randomly initialized, just like we did in the previous section:\n\n\nShow code\nw1 = init_params((28*28,30))\nb1 = init_params(30)\nw2 = init_params((30,1))\nb2 = init_params(1)\n\n\nThe key point about this is that w1 has 30 output activations (which means that w2 must have 30 input activations, so they match). That means that the first layer can construct 30 different features, each representing some different mix of pixels. You can change that 30 to anything you like, to make the model more or less complex.\nThat little function res.max(tensor(0.0)) is called a rectified linear unit, also known as ReLU. We think we can all agree that rectified linear unit sounds pretty fancy and complicated… But actually, there’s nothing more to it than res.max(tensor(0.0))—in other words, replace every negative number with a zero. This tiny function is also available in PyTorch as F.relu:\n\n\nShow code\nplot_function(F.relu)\n\n\n\n\n\n\n\n\n\n\nJ: There is an enormous amount of jargon in deep learning, including terms like rectified linear unit. The vast vast majority of this jargon is no more complicated than can be implemented in a short line of code, as we saw in this example. The reality is that for academics to get their papers published they need to make them sound as impressive and sophisticated as possible. One of the ways that they do that is to introduce jargon. Unfortunately, this has the result that the field ends up becoming far more intimidating and difficult to get into than it should be. You do have to learn the jargon, because otherwise papers and tutorials are not going to mean much to you. But that doesn’t mean you have to find the jargon intimidating. Just remember, when you come across a word or phrase that you haven’t seen before, it will almost certainly turn out to be referring to a very simple concept.\n\nThe basic idea is that by using more linear layers, we can have our model do more computation, and therefore model more complex functions. But there’s no point just putting one linear layer directly after another one, because when we multiply things together and then add them up multiple times, that could be replaced by multiplying different things together and adding them up just once! That is to say, a series of any number of linear layers in a row can be replaced with a single linear layer with a different set of parameters.\nBut if we put a nonlinear function between them, such as max, then this is no longer true. Now each linear layer is actually somewhat decoupled from the other ones, and can do its own useful work. The max function is particularly interesting, because it operates as a simple if statement.\n\nS: Mathematically, we say the composition of two linear functions is another linear function. So, we can stack as many linear classifiers as we want on top of each other, and without nonlinear functions between them, it will just be the same as one linear classifier.\n\nAmazingly enough, it can be mathematically proven that this little function can solve any computable problem to an arbitrarily high level of accuracy, if you can find the right parameters for w1 and w2 and if you make these matrices big enough. For any arbitrarily wiggly function, we can approximate it as a bunch of lines joined together; to make it closer to the wiggly function, we just have to use shorter lines. This is known as the universal approximation theorem. The three lines of code that we have here are known as layers. The first and third are known as linear layers, and the second line of code is known variously as a nonlinearity, or activation function.\nJust like in the previous section, we can replace this code with something a bit simpler, by taking advantage of PyTorch:\n\n\nShow code\nsimple_net = nn.Sequential(\n    nn.Linear(28*28,30),\n    nn.ReLU(),\n    nn.Linear(30,1)\n)\n\n\nnn.Sequential creates a module that will call each of the listed layers or functions in turn.\nnn.ReLU is a PyTorch module that does exactly the same thing as the F.relu function. Most functions that can appear in a model also have identical forms that are modules. Generally, it’s just a case of replacing F with nn and changing the capitalization. When using nn.Sequential, PyTorch requires us to use the module version. Since modules are classes, we have to instantiate them, which is why you see nn.ReLU() in this example.\nBecause nn.Sequential is a module, we can get its parameters, which will return a list of all the parameters of all the modules it contains. Let’s try it out! As this is a deeper model, we’ll use a lower learning rate and a few more epochs.\n\n\nShow code\nlearn = Learner(dls, simple_net, opt_func=SGD,\n                loss_func=mnist_loss, metrics=batch_accuracy)\n\n\n\n\nShow code\n#hide_output\nlearn.fit(40, 0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nbatch_accuracy\ntime\n\n\n\n\n0\n0.305828\n0.399663\n0.508341\n00:00\n\n\n1\n0.142960\n0.225702\n0.807655\n00:00\n\n\n2\n0.079516\n0.113519\n0.919529\n00:00\n\n\n3\n0.052391\n0.076792\n0.943081\n00:00\n\n\n4\n0.039796\n0.060083\n0.956330\n00:00\n\n\n5\n0.033368\n0.050713\n0.963690\n00:00\n\n\n6\n0.029680\n0.044797\n0.965653\n00:00\n\n\n7\n0.027290\n0.040729\n0.968106\n00:00\n\n\n8\n0.025568\n0.037771\n0.968597\n00:00\n\n\n9\n0.024233\n0.035508\n0.970559\n00:00\n\n\n10\n0.023149\n0.033714\n0.972031\n00:00\n\n\n11\n0.022242\n0.032243\n0.972522\n00:00\n\n\n12\n0.021468\n0.031006\n0.973503\n00:00\n\n\n13\n0.020796\n0.029944\n0.974485\n00:00\n\n\n14\n0.020207\n0.029016\n0.975466\n00:00\n\n\n15\n0.019683\n0.028196\n0.976448\n00:00\n\n\n16\n0.019215\n0.027463\n0.976448\n00:00\n\n\n17\n0.018791\n0.026806\n0.976938\n00:00\n\n\n18\n0.018405\n0.026212\n0.977920\n00:00\n\n\n19\n0.018051\n0.025671\n0.977920\n00:00\n\n\n20\n0.017725\n0.025179\n0.977920\n00:00\n\n\n21\n0.017422\n0.024728\n0.978410\n00:00\n\n\n22\n0.017141\n0.024313\n0.978901\n00:00\n\n\n23\n0.016878\n0.023932\n0.979392\n00:00\n\n\n24\n0.016632\n0.023580\n0.979882\n00:00\n\n\n25\n0.016400\n0.023254\n0.979882\n00:00\n\n\n26\n0.016181\n0.022952\n0.979882\n00:00\n\n\n27\n0.015975\n0.022672\n0.980864\n00:00\n\n\n28\n0.015779\n0.022411\n0.980864\n00:00\n\n\n29\n0.015593\n0.022168\n0.981845\n00:00\n\n\n30\n0.015417\n0.021941\n0.981845\n00:00\n\n\n31\n0.015249\n0.021728\n0.981845\n00:00\n\n\n32\n0.015088\n0.021529\n0.981845\n00:00\n\n\n33\n0.014935\n0.021341\n0.981845\n00:00\n\n\n34\n0.014788\n0.021164\n0.981845\n00:00\n\n\n35\n0.014647\n0.020998\n0.982336\n00:00\n\n\n36\n0.014512\n0.020840\n0.982826\n00:00\n\n\n37\n0.014382\n0.020691\n0.982826\n00:00\n\n\n38\n0.014257\n0.020550\n0.982826\n00:00\n\n\n39\n0.014136\n0.020415\n0.982826\n00:00\n\n\n\n\n\nWe’re not showing the 40 lines of output here to save room; the training process is recorded in learn.recorder, with the table of output stored in the values attribute, so we can plot the accuracy over training as:\n\n\nShow code\nplt.plot(L(learn.recorder.values).itemgot(2));\n\n\n\n\n\n\n\n\n\nAnd we can view the final accuracy:\n\n\nShow code\nlearn.recorder.values[-1][2]\n\n\n0.982826292514801\n\n\nAt this point we have something that is rather magical:\n\nA function that can solve any problem to any level of accuracy (the neural network) given the correct set of parameters\nA way to find the best set of parameters for any function (stochastic gradient descent)\n\nThis is why deep learning can do things which seem rather magical, such fantastic things. Believing that this combination of simple techniques can really solve any problem is one of the biggest steps that we find many students have to take. It seems too good to be true—surely things should be more difficult and complicated than this? Our recommendation: try it out! We just tried it on the MNIST dataset and you have seen the results. And since we are doing everything from scratch ourselves (except for calculating the gradients) you know that there is no special magic hiding behind the scenes.\n\nGoing Deeper\nThere is no need to stop at just two linear layers. We can add as many as we want, as long as we add a nonlinearity between each pair of linear layers. As you will learn, however, the deeper the model gets, the harder it is to optimize the parameters in practice. Later in this book you will learn about some simple but brilliantly effective techniques for training deeper models.\nWe already know that a single nonlinearity with two linear layers is enough to approximate any function. So why would we use deeper models? The reason is performance. With a deeper model (that is, one with more layers) we do not need to use as many parameters; it turns out that we can use smaller matrices with more layers, and get better results than we would get with larger matrices, and few layers.\nThat means that we can train the model more quickly, and it will take up less memory. In the 1990s researchers were so focused on the universal approximation theorem that very few were experimenting with more than one nonlinearity. This theoretical but not practical foundation held back the field for years. Some researchers, however, did experiment with deep models, and eventually were able to show that these models could perform much better in practice. Eventually, theoretical results were developed which showed why this happens. Today, it is extremely unusual to find anybody using a neural network with just one nonlinearity.\nHere is what happens when we train an 18-layer model using the same approach we saw in &lt;&gt;:\n\n\nShow code\ndls = ImageDataLoaders.from_folder(path)\nlearn = vision_learner(dls, resnet18, pretrained=False,\n                    loss_func=F.cross_entropy, metrics=accuracy)\nlearn.fit_one_cycle(1, 0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.082089\n0.009578\n0.997056\n00:11\n\n\n\n\n\nNearly 100% accuracy! That’s a big difference compared to our simple neural net. But as you’ll learn in the remainder of this book, there are just a few little tricks you need to use to get such great results from scratch yourself. You already know the key foundational pieces. (Of course, even once you know all the tricks, you’ll nearly always want to work with the pre-built classes provided by PyTorch and fastai, because they save you having to think about all the little details yourself.)"
  },
  {
    "objectID": "posts/04_mnist_basics.html#jargon-recap",
    "href": "posts/04_mnist_basics.html#jargon-recap",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "Jargon Recap",
    "text": "Jargon Recap\nCongratulations: you now know how to create and train a deep neural network from scratch! We’ve gone through quite a few steps to get to this point, but you might be surprised at how simple it really is.\nNow that we are at this point, it is a good opportunity to define, and review, some jargon and key concepts.\nA neural network contains a lot of numbers, but they are only of two types: numbers that are calculated, and the parameters that these numbers are calculated from. This gives us the two most important pieces of jargon to learn:\n\nActivations:: Numbers that are calculated (both by linear and nonlinear layers)\nParameters:: Numbers that are randomly initialized, and optimized (that is, the numbers that define the model)\n\nWe will often talk in this book about activations and parameters. Remember that they have very specific meanings. They are numbers. They are not abstract concepts, but they are actual specific numbers that are in your model. Part of becoming a good deep learning practitioner is getting used to the idea of actually looking at your activations and parameters, and plotting them and testing whether they are behaving correctly.\nOur activations and parameters are all contained in tensors. These are simply regularly shaped arrays—for example, a matrix. Matrices have rows and columns; we call these the axes or dimensions. The number of dimensions of a tensor is its rank. There are some special tensors:\n\nRank zero: scalar\nRank one: vector\nRank two: matrix\n\nA neural network contains a number of layers. Each layer is either linear or nonlinear. We generally alternate between these two kinds of layers in a neural network. Sometimes people refer to both a linear layer and its subsequent nonlinearity together as a single layer. Yes, this is confusing. Sometimes a nonlinearity is referred to as an activation function.\n&lt;&gt; summarizes the key concepts related to SGD.\n[[dljargon1]]\n.Deep learning vocabulary\n[options=\"header\"]\n|=====\n| Term | Meaning\n|ReLU | Function that returns 0 for negative numbers and doesn't change positive numbers.\n|Mini-batch | A small group of inputs and labels gathered together in two arrays. A gradient descent step is updated on this batch (rather than a whole epoch).\n|Forward pass | Applying the model to some input and computing the predictions.\n|Loss | A value that represents how well (or badly) our model is doing.\n|Gradient | The derivative of the loss with respect to some parameter of the model.\n|Backward pass | Computing the gradients of the loss with respect to all model parameters.\n|Gradient descent | Taking a step in the directions opposite to the gradients to make the model parameters a little bit better.\n|Learning rate | The size of the step we take when applying SGD to update the parameters of the model.\n|=====\n\nnote: Choose Your Own Adventure Reminder: Did you choose to skip over chapters 2 & 3, in your excitement to peek under the hood? Well, here’s your reminder to head back to chapter 2 now, because you’ll be needing to know that stuff very soon!"
  },
  {
    "objectID": "posts/04_mnist_basics.html#questionnaire",
    "href": "posts/04_mnist_basics.html#questionnaire",
    "title": "Under the Hood: Training a Digit Classifier",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nHow is a grayscale image represented on a computer? How about a color image?\nHow are the files and folders in the MNIST_SAMPLE dataset structured? Why?\nExplain how the “pixel similarity” approach to classifying digits works.\nWhat is a list comprehension? Create one now that selects odd numbers from a list and doubles them.\nWhat is a “rank-3 tensor”?\nWhat is the difference between tensor rank and shape? How do you get the rank from the shape?\nWhat are RMSE and L1 norm?\nHow can you apply a calculation on thousands of numbers at once, many thousands of times faster than a Python loop?\nCreate a 3×3 tensor or array containing the numbers from 1 to 9. Double it. Select the bottom-right four numbers.\nWhat is broadcasting?\nAre metrics generally calculated using the training set, or the validation set? Why?\nWhat is SGD?\nWhy does SGD use mini-batches?\nWhat are the seven steps in SGD for machine learning?\nHow do we initialize the weights in a model?\nWhat is “loss”?\nWhy can’t we always use a high learning rate?\nWhat is a “gradient”?\nDo you need to know how to calculate gradients yourself?\nWhy can’t we use accuracy as a loss function?\nDraw the sigmoid function. What is special about its shape?\nWhat is the difference between a loss function and a metric?\nWhat is the function to calculate new weights using a learning rate?\nWhat does the DataLoader class do?\nWrite pseudocode showing the basic steps taken in each epoch for SGD.\nCreate a function that, if passed two arguments [1,2,3,4] and 'abcd', returns [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]. What is special about that output data structure?\nWhat does view do in PyTorch?\nWhat are the “bias” parameters in a neural network? Why do we need them?\nWhat does the @ operator do in Python?\nWhat does the backward method do?\nWhy do we have to zero the gradients?\nWhat information do we have to pass to Learner?\nShow Python or pseudocode for the basic steps of a training loop.\nWhat is “ReLU”? Draw a plot of it for values from -2 to +2.\nWhat is an “activation function”?\nWhat’s the difference between F.relu and nn.ReLU?\nThe universal approximation theorem shows that any function can be approximated as closely as needed using just one nonlinearity. So why do we normally use more?\n\n\nFurther Research\n\nCreate your own implementation of Learner from scratch, based on the training loop shown in this chapter.\nComplete all the steps in this chapter using the full MNIST datasets (that is, for all digits, not just 3s and 7s). This is a significant project and will take you quite a bit of time to complete! You’ll need to do some of your own research to figure out how to overcome some obstacles you’ll meet on the way."
  },
  {
    "objectID": "posts/06_multicat.html",
    "href": "posts/06_multicat.html",
    "title": "Other Computer Vision Problems",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_multicat]]\nIn the previous chapter you learned some important practical techniques for training models in practice. Considerations like selecting learning rates and the number of epochs are very important to getting good results.\nIn this chapter we are going to look at two other types of computer vision problems: multi-label classification and regression. The first one is when you want to predict more than one label per image (or sometimes none at all), and the second is when your labels are one or several numbers—a quantity instead of a category.\nIn the process will study more deeply the output activations, targets, and loss functions in deep learning models."
  },
  {
    "objectID": "posts/06_multicat.html#multi-label-classification",
    "href": "posts/06_multicat.html#multi-label-classification",
    "title": "Other Computer Vision Problems",
    "section": "Multi-Label Classification",
    "text": "Multi-Label Classification\nMulti-label classification refers to the problem of identifying the categories of objects in images that may not contain exactly one type of object. There may be more than one kind of object, or there may be no objects at all in the classes that you are looking for.\nFor instance, this would have been a great approach for our bear classifier. One problem with the bear classifier that we rolled out in &lt;&gt; was that if a user uploaded something that wasn’t any kind of bear, the model would still say it was either a grizzly, black, or teddy bear—it had no ability to predict “not a bear at all.” In fact, after we have completed this chapter, it would be a great exercise for you to go back to your image classifier application, and try to retrain it using the multi-label technique, then test it by passing in an image that is not of any of your recognized classes.\nIn practice, we have not seen many examples of people training multi-label classifiers for this purpose—but we very often see both users and developers complaining about this problem. It appears that this simple solution is not at all widely understood or appreciated! Because in practice it is probably more common to have some images with zero matches or more than one match, we should probably expect in practice that multi-label classifiers are more widely applicable than single-label classifiers.\nFirst, let’s see what a multi-label dataset looks like, then we’ll explain how to get it ready for our model. You’ll see that the architecture of the model does not change from the last chapter; only the loss function does. Let’s start with the data.\n\nThe Data\nFor our example we are going to use the PASCAL dataset, which can have more than one kind of classified object per image.\nWe begin by downloading and extracting the dataset as per usual:\n\n\nShow code\nfrom fastai.vision.all import *\npath = untar_data(URLs.PASCAL_2007)\n\n\nThis dataset is different from the ones we have seen before, in that it is not structured by filename or folder but instead comes with a CSV (comma-separated values) file telling us what labels to use for each image. We can inspect the CSV file by reading it into a Pandas DataFrame:\n\n\nShow code\ndf = pd.read_csv(path/'train.csv')\ndf.head()\n\n\n\n\n\n\n\n\n\nfname\nlabels\nis_valid\n\n\n\n\n0\n000005.jpg\nchair\nTrue\n\n\n1\n000007.jpg\ncar\nTrue\n\n\n2\n000009.jpg\nhorse person\nTrue\n\n\n3\n000012.jpg\ncar\nFalse\n\n\n4\n000016.jpg\nbicycle\nTrue\n\n\n\n\n\n\n\nAs you can see, the list of categories in each image is shown as a space-delimited string.\n\n\nSidebar: Pandas and DataFrames\nNo, it’s not actually a panda! Pandas is a Python library that is used to manipulate and analyze tabular and time series data. The main class is DataFrame, which represents a table of rows and columns. You can get a DataFrame from a CSV file, a database table, Python dictionaries, and many other sources. In Jupyter, a DataFrame is output as a formatted table, as shown here.\nYou can access rows and columns of a DataFrame with the iloc property, as if it were a matrix:\n\n\nShow code\ndf.iloc[:,0]\n\n\n0       000005.jpg\n1       000007.jpg\n2       000009.jpg\n3       000012.jpg\n4       000016.jpg\n           ...    \n5006    009954.jpg\n5007    009955.jpg\n5008    009958.jpg\n5009    009959.jpg\n5010    009961.jpg\nName: fname, Length: 5011, dtype: object\n\n\n\n\nShow code\ndf.iloc[0,:]\n# Trailing :s are always optional (in numpy, pytorch, pandas, etc.),\n#   so this is equivalent:\ndf.iloc[0]\n\n\nfname       000005.jpg\nlabels           chair\nis_valid          True\nName: 0, dtype: object\n\n\nYou can also grab a column by name by indexing into a DataFrame directly:\n\n\nShow code\ndf['fname']\n\n\n0       000005.jpg\n1       000007.jpg\n2       000009.jpg\n3       000012.jpg\n4       000016.jpg\n           ...    \n5006    009954.jpg\n5007    009955.jpg\n5008    009958.jpg\n5009    009959.jpg\n5010    009961.jpg\nName: fname, Length: 5011, dtype: object\n\n\nYou can create new columns and do calculations using columns:\n\n\nShow code\ntmp_df = pd.DataFrame({'a':[1,2], 'b':[3,4]})\ntmp_df\n\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n1\n3\n\n\n1\n2\n4\n\n\n\n\n\n\n\n\n\nShow code\ntmp_df['c'] = tmp_df['a']+tmp_df['b']\ntmp_df\n\n\n\n\n\n\n\n\n\na\nb\nc\n\n\n\n\n0\n1\n3\n4\n\n\n1\n2\n4\n6\n\n\n\n\n\n\n\nPandas is a fast and flexible library, and an important part of every data scientist’s Python toolbox. Unfortunately, its API can be rather confusing and surprising, so it takes a while to get familiar with it. If you haven’t used Pandas before, we’d suggest going through a tutorial; we are particularly fond of the book Python for Data Analysis by Wes McKinney, the creator of Pandas (O’Reilly). It also covers other important libraries like matplotlib and numpy. We will try to briefly describe Pandas functionality we use as we come across it, but will not go into the level of detail of McKinney’s book.\n\n\nEnd sidebar\nNow that we have seen what the data looks like, let’s make it ready for model training.\n\n\nConstructing a DataBlock\nHow do we convert from a DataFrame object to a DataLoaders object? We generally suggest using the data block API for creating a DataLoaders object, where possible, since it provides a good mix of flexibility and simplicity. Here we will show you the steps that we take to use the data blocks API to construct a DataLoaders object in practice, using this dataset as an example.\nAs we have seen, PyTorch and fastai have two main classes for representing and accessing a training set or validation set:\n\nDataset:: A collection that returns a tuple of your independent and dependent variable for a single item\nDataLoader:: An iterator that provides a stream of mini-batches, where each mini-batch is a tuple of a batch of independent variables and a batch of dependent variables\n\nOn top of these, fastai provides two classes for bringing your training and validation sets together:\n\nDatasets:: An object that contains a training Dataset and a validation Dataset\nDataLoaders:: An object that contains a training DataLoader and a validation DataLoader\n\nSince a DataLoader builds on top of a Dataset and adds additional functionality to it (collating multiple items into a mini-batch), it’s often easiest to start by creating and testing Datasets, and then look at DataLoaders after that’s working.\nWhen we create a DataBlock, we build up gradually, step by step, and use the notebook to check our data along the way. This is a great way to make sure that you maintain momentum as you are coding, and that you keep an eye out for any problems. It’s easy to debug, because you know that if a problem arises, it is in the line of code you just typed!\nLet’s start with the simplest case, which is a data block created with no parameters:\n\n\nShow code\ndblock = DataBlock()\n\n\nWe can create a Datasets object from this. The only thing needed is a source—in this case, our DataFrame:\n\n\nShow code\ndsets = dblock.datasets(df)\n\n\nThis contains a train and a valid dataset, which we can index into:\n\n\nShow code\nlen(dsets.train),len(dsets.valid)\n\n\n(4009, 1002)\n\n\n\n\nShow code\nx,y = dsets.train[0]\nx,y\n\n\n(fname       008663.jpg\n labels      car person\n is_valid         False\n Name: 4346, dtype: object,\n fname       008663.jpg\n labels      car person\n is_valid         False\n Name: 4346, dtype: object)\n\n\nAs you can see, this simply returns a row of the DataFrame, twice. This is because by default, the data block assumes we have two things: input and target. We are going to need to grab the appropriate fields from the DataFrame, which we can do by passing get_x and get_y functions:\n\n\nShow code\nx['fname']\n\n\n'008663.jpg'\n\n\n\n\nShow code\ndblock = DataBlock(get_x = lambda r: r['fname'], get_y = lambda r: r['labels'])\ndsets = dblock.datasets(df)\ndsets.train[0]\n\n\n('005620.jpg', 'aeroplane')\n\n\nAs you can see, rather than defining a function in the usual way, we are using Python’s lambda keyword. This is just a shortcut for defining and then referring to a function. The following more verbose approach is identical:\n\n\nShow code\ndef get_x(r): return r['fname']\ndef get_y(r): return r['labels']\ndblock = DataBlock(get_x = get_x, get_y = get_y)\ndsets = dblock.datasets(df)\ndsets.train[0]\n\n\n('002549.jpg', 'tvmonitor')\n\n\nLambda functions are great for quickly iterating, but they are not compatible with serialization, so we advise you to use the more verbose approach if you want to export your Learner after training (lambdas are fine if you are just experimenting).\nWe can see that the independent variable will need to be converted into a complete path, so that we can open it as an image, and the dependent variable will need to be split on the space character (which is the default for Python’s split function) so that it becomes a list:\n\n\nShow code\ndef get_x(r): return path/'train'/r['fname']\ndef get_y(r): return r['labels'].split(' ')\ndblock = DataBlock(get_x = get_x, get_y = get_y)\ndsets = dblock.datasets(df)\ndsets.train[0]\n\n\n(Path('/home/jhoward/.fastai/data/pascal_2007/train/002844.jpg'), ['train'])\n\n\nTo actually open the image and do the conversion to tensors, we will need to use a set of transforms; block types will provide us with those. We can use the same block types that we have used previously, with one exception: the ImageBlock will work fine again, because we have a path that points to a valid image, but the CategoryBlock is not going to work. The problem is that block returns a single integer, but we need to be able to have multiple labels for each item. To solve this, we use a MultiCategoryBlock. This type of block expects to receive a list of strings, as we have in this case, so let’s test it out:\n\n\nShow code\ndblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   get_x = get_x, get_y = get_y)\ndsets = dblock.datasets(df)\ndsets.train[0]\n\n\n(PILImage mode=RGB size=500x375,\n TensorMultiCategory([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.]))\n\n\nAs you can see, our list of categories is not encoded in the same way that it was for the regular CategoryBlock. In that case, we had a single integer representing which category was present, based on its location in our vocab. In this case, however, we instead have a list of zeros, with a one in any position where that category is present. For example, if there is a one in the second and fourth positions, then that means that vocab items two and four are present in this image. This is known as one-hot encoding. The reason we can’t easily just use a list of category indices is that each list would be a different length, and PyTorch requires tensors, where everything has to be the same length.\n\njargon: One-hot encoding: Using a vector of zeros, with a one in each location that is represented in the data, to encode a list of integers.\n\nLet’s check what the categories represent for this example (we are using the convenient torch.where function, which tells us all of the indices where our condition is true or false):\n\n\nShow code\nidxs = torch.where(dsets.train[0][1]==1.)[0]\ndsets.train.vocab[idxs]\n\n\n(#1) ['dog']\n\n\nWith NumPy arrays, PyTorch tensors, and fastai’s L class, we can index directly using a list or vector, which makes a lot of code (such as this example) much clearer and more concise.\nWe have ignored the column is_valid up until now, which means that DataBlock has been using a random split by default. To explicitly choose the elements of our validation set, we need to write a function and pass it to splitter (or use one of fastai’s predefined functions or classes). It will take the items (here our whole DataFrame) and must return two (or more) lists of integers:\n\n\nShow code\ndef splitter(df):\n    train = df.index[~df['is_valid']].tolist()\n    valid = df.index[df['is_valid']].tolist()\n    return train,valid\n\ndblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   splitter=splitter,\n                   get_x=get_x, \n                   get_y=get_y)\n\ndsets = dblock.datasets(df)\ndsets.train[0]\n\n\n(PILImage mode=RGB size=500x333,\n TensorMultiCategory([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))\n\n\nAs we have discussed, a DataLoader collates the items from a Dataset into a mini-batch. This is a tuple of tensors, where each tensor simply stacks the items from that location in the Dataset item.\nNow that we have confirmed that the individual items look okay, there’s one more step we need to ensure we can create our DataLoaders, which is to ensure that every item is of the same size. To do this, we can use RandomResizedCrop:\n\n\nShow code\ndblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   splitter=splitter,\n                   get_x=get_x, \n                   get_y=get_y,\n                   item_tfms = RandomResizedCrop(128, min_scale=0.35))\ndls = dblock.dataloaders(df)\n\n\nAnd now we can display a sample of our data:\n\n\nShow code\ndls.show_batch(nrows=1, ncols=3)\n\n\n\n\n\n\n\n\n\nRemember that if anything goes wrong when you create your DataLoaders from your DataBlock, or if you want to view exactly what happens with your DataBlock, you can use the summary method we presented in the last chapter.\nOur data is now ready for training a model. As we will see, nothing is going to change when we create our Learner, but behind the scenes, the fastai library will pick a new loss function for us: binary cross-entropy.\n\n\nBinary Cross-Entropy\nNow we’ll create our Learner. We saw in &lt;&gt; that a Learner object contains four main things: the model, a DataLoaders object, an Optimizer, and the loss function to use. We already have our DataLoaders, we can leverage fastai’s resnet models (which we’ll learn how to create from scratch later), and we know how to create an SGD optimizer. So let’s focus on ensuring we have a suitable loss function. To do this, let’s use vision_learner to create a Learner, so we can look at its activations:\n\n\nShow code\nlearn = vision_learner(dls, resnet18)\n\n\nWe also saw that the model in a Learner is generally an object of a class inheriting from nn.Module, and that we can call it using parentheses and it will return the activations of a model. You should pass it your independent variable, as a mini-batch. We can try it out by grabbing a mini batch from our DataLoader and then passing it to the model:\n\n\nShow code\nx,y = to_cpu(dls.train.one_batch())\nactivs = learn.model(x)\nactivs.shape\n\n\ntorch.Size([64, 20])\n\n\nThink about why activs has this shape—we have a batch size of 64, and we need to calculate the probability of each of 20 categories. Here’s what one of those activations looks like:\n\n\nShow code\nactivs[0]\n\n\nTensorBase([-1.4608,  0.9895,  0.5279, -1.0224, -1.4174, -0.1778, -0.4821, -0.2561,  0.6638,  0.1715,  2.3625,  4.2209,  1.0515,  4.5342,  0.5485,  1.0585, -0.7959,  2.2770, -1.9935,  1.9646],\n       grad_fn=&lt;AliasBackward0&gt;)\n\n\n\nnote: Getting Model Activations: Knowing how to manually get a mini-batch and pass it into a model, and look at the activations and loss, is really important for debugging your model. It is also very helpful for learning, so that you can see exactly what is going on.\n\nThey aren’t yet scaled to between 0 and 1, but we learned how to do that in &lt;&gt;, using the sigmoid function. We also saw how to calculate a loss based on this—this is our loss function from &lt;&gt;, with the addition of log as discussed in the last chapter:\n\n\nShow code\ndef binary_cross_entropy(inputs, targets):\n    inputs = inputs.sigmoid()\n    return -torch.where(targets==1, inputs, 1-inputs).log().mean()\n\n\nNote that because we have a one-hot-encoded dependent variable, we can’t directly use nll_loss or softmax (and therefore we can’t use cross_entropy):\n\nsoftmax, as we saw, requires that all predictions sum to 1, and tends to push one activation to be much larger than the others (due to the use of exp); however, we may well have multiple objects that we’re confident appear in an image, so restricting the maximum sum of activations to 1 is not a good idea. By the same reasoning, we may want the sum to be less than 1, if we don’t think any of the categories appear in an image.\nnll_loss, as we saw, returns the value of just one activation: the single activation corresponding with the single label for an item. This doesn’t make sense when we have multiple labels.\n\nOn the other hand, the binary_cross_entropy function, which is just mnist_loss along with log, provides just what we need, thanks to the magic of PyTorch’s elementwise operations. Each activation will be compared to each target for each column, so we don’t have to do anything to make this function work for multiple columns.\n\nj: One of the things I really like about working with libraries like PyTorch, with broadcasting and elementwise operations, is that quite frequently I find I can write code that works equally well for a single item or a batch of items, without changes. binary_cross_entropy is a great example of this. By using these operations, we don’t have to write loops ourselves, and can rely on PyTorch to do the looping we need as appropriate for the rank of the tensors we’re working with.\n\nPyTorch already provides this function for us. In fact, it provides a number of versions, with rather confusing names!\nF.binary_cross_entropy and its module equivalent nn.BCELoss calculate cross-entropy on a one-hot-encoded target, but do not include the initial sigmoid. Normally for one-hot-encoded targets you’ll want F.binary_cross_entropy_with_logits (or nn.BCEWithLogitsLoss), which do both sigmoid and binary cross-entropy in a single function, as in the preceding example.\nThe equivalent for single-label datasets (like MNIST or the Pet dataset), where the target is encoded as a single integer, is F.nll_loss or nn.NLLLoss for the version without the initial softmax, and F.cross_entropy or nn.CrossEntropyLoss for the version with the initial softmax.\nSince we have a one-hot-encoded target, we will use BCEWithLogitsLoss:\n\n\nShow code\nloss_func = nn.BCEWithLogitsLoss()\nloss = loss_func(activs, y)\nloss\n\n\nTensorMultiCategory(1.0524, grad_fn=&lt;AliasBackward0&gt;)\n\n\nWe don’t actually need to tell fastai to use this loss function (although we can if we want) since it will be automatically chosen for us. fastai knows that the DataLoaders has multiple category labels, so it will use nn.BCEWithLogitsLoss by default.\nOne change compared to the last chapter is the metric we use: because this is a multilabel problem, we can’t use the accuracy function. Why is that? Well, accuracy was comparing our outputs to our targets like so:\ndef accuracy(inp, targ, axis=-1):\n    \"Compute accuracy with `targ` when `pred` is bs * n_classes\"\n    pred = inp.argmax(dim=axis)\n    return (pred == targ).float().mean()\nThe class predicted was the one with the highest activation (this is what argmax does). Here it doesn’t work because we could have more than one prediction on a single image. After applying the sigmoid to our activations (to make them between 0 and 1), we need to decide which ones are 0s and which ones are 1s by picking a threshold. Each value above the threshold will be considered as a 1, and each value lower than the threshold will be considered a 0:\ndef accuracy_multi(inp, targ, thresh=0.5, sigmoid=True):\n    \"Compute accuracy when `inp` and `targ` are the same size.\"\n    if sigmoid: inp = inp.sigmoid()\n    return ((inp&gt;thresh)==targ.bool()).float().mean()\nIf we pass accuracy_multi directly as a metric, it will use the default value for threshold, which is 0.5. We might want to adjust that default and create a new version of accuracy_multi that has a different default. To help with this, there is a function in Python called partial. It allows us to bind a function with some arguments or keyword arguments, making a new version of that function that, whenever it is called, always includes those arguments. For instance, here is a simple function taking two arguments:\n\n\nShow code\ndef say_hello(name, say_what=\"Hello\"): return f\"{say_what} {name}.\"\nsay_hello('Jeremy'),say_hello('Jeremy', 'Ahoy!')\n\n\n('Hello Jeremy.', 'Ahoy! Jeremy.')\n\n\nWe can switch to a French version of that function by using partial:\n\n\nShow code\nf = partial(say_hello, say_what=\"Bonjour\")\nf(\"Jeremy\"),f(\"Sylvain\")\n\n\n('Bonjour Jeremy.', 'Bonjour Sylvain.')\n\n\nWe can now train our model. Let’s try setting the accuracy threshold to 0.2 for our metric:\n\n\nShow code\nlearn = vision_learner(dls, resnet50, metrics=partial(accuracy_multi, thresh=0.2))\nlearn.fine_tune(3, base_lr=3e-3, freeze_epochs=4)\n\n\nDownloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /home/jhoward/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy_multi\ntime\n\n\n\n\n0\n0.942999\n0.698309\n0.230896\n00:05\n\n\n1\n0.822529\n0.567567\n0.287151\n00:04\n\n\n2\n0.604535\n0.200134\n0.818327\n00:04\n\n\n3\n0.359754\n0.123086\n0.945558\n00:04\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy_multi\ntime\n\n\n\n\n0\n0.133748\n0.116784\n0.943725\n00:05\n\n\n1\n0.117125\n0.107055\n0.950837\n00:05\n\n\n2\n0.098062\n0.103551\n0.950877\n00:05\n\n\n\n\n\nPicking a threshold is important. If you pick a threshold that’s too low, you’ll often be failing to select correctly labeled objects. We can see this by changing our metric, and then calling validate, which returns the validation loss and metrics:\n\n\nShow code\nlearn.metrics = partial(accuracy_multi, thresh=0.1)\nlearn.validate()\n\n\n\n\n\n(#2) [0.10477833449840546,0.9314740300178528]\n\n\nIf you pick a threshold that’s too high, you’ll only be selecting the objects for which your model is very confident:\n\n\nShow code\nlearn.metrics = partial(accuracy_multi, thresh=0.99)\nlearn.validate()\n\n\n\n\n\n(#2) [0.10477833449840546,0.9429482221603394]\n\n\nWe can find the best threshold by trying a few levels and seeing what works best. This is much faster if we just grab the predictions once:\n\n\nShow code\npreds,targs = learn.get_preds()\n\n\n\n\n\nThen we can call the metric directly. Note that by default get_preds applies the output activation function (sigmoid, in this case) for us, so we’ll need to tell accuracy_multi to not apply it:\n\n\nShow code\naccuracy_multi(preds, targs, thresh=0.9, sigmoid=False)\n\n\nTensorImage(0.9567)\n\n\nWe can now use this approach to find the best threshold level:\n\n\nShow code\nxs = torch.linspace(0.05,0.95,29)\naccs = [accuracy_multi(preds, targs, thresh=i, sigmoid=False) for i in xs]\nplt.plot(xs,accs);\n\n\n\n\n\n\n\n\n\nIn this case, we’re using the validation set to pick a hyperparameter (the threshold), which is the purpose of the validation set. Sometimes students have expressed their concern that we might be overfitting to the validation set, since we’re trying lots of values to see which is the best. However, as you see in the plot, changing the threshold in this case results in a smooth curve, so we’re clearly not picking some inappropriate outlier. This is a good example of where you have to be careful of the difference between theory (don’t try lots of hyperparameter values or you might overfit the validation set) versus practice (if the relationship is smooth, then it’s fine to do this).\nThis concludes the part of this chapter dedicated to multi-label classification. Next, we’ll take a look at a regression problem."
  },
  {
    "objectID": "posts/06_multicat.html#regression",
    "href": "posts/06_multicat.html#regression",
    "title": "Other Computer Vision Problems",
    "section": "Regression",
    "text": "Regression\nIt’s easy to think of deep learning models as being classified into domains, like computer vision, NLP, and so forth. And indeed, that’s how fastai classifies its applications—largely because that’s how most people are used to thinking of things.\nBut really, that’s hiding a more interesting and deeper perspective. A model is defined by its independent and dependent variables, along with its loss function. That means that there’s really a far wider array of models than just the simple domain-based split. Perhaps we have an independent variable that’s an image, and a dependent that’s text (e.g., generating a caption from an image); or perhaps we have an independent variable that’s text and dependent that’s an image (e.g., generating an image from a caption—which is actually possible for deep learning to do!); or perhaps we’ve got images, texts, and tabular data as independent variables, and we’re trying to predict product purchases… the possibilities really are endless.\nTo be able to move beyond fixed applications, to crafting your own novel solutions to novel problems, it helps to really understand the data block API (and maybe also the mid-tier API, which we’ll see later in the book). As an example, let’s consider the problem of image regression. This refers to learning from a dataset where the independent variable is an image, and the dependent variable is one or more floats. Often we see people treat image regression as a whole separate application—but as you’ll see here, we can treat it as just another CNN on top of the data block API.\nWe’re going to jump straight to a somewhat tricky variant of image regression, because we know you’re ready for it! We’re going to do a key point model. A key point refers to a specific location represented in an image—in this case, we’ll use images of people and we’ll be looking for the center of the person’s face in each image. That means we’ll actually be predicting two values for each image: the row and column of the face center.\n\nAssemble the Data\nWe will use the Biwi Kinect Head Pose dataset for this section. We’ll begin by downloading the dataset as usual:\n\n\nShow code\npath = untar_data(URLs.BIWI_HEAD_POSE)\n\n\n\n\nShow code\n#hide\nPath.BASE_PATH = path\n\n\nLet’s see what we’ve got!\n\n\nShow code\npath.ls().sorted()\n\n\n(#50) [Path('01'),Path('01.obj'),Path('02'),Path('02.obj'),Path('03'),Path('03.obj'),Path('04'),Path('04.obj'),Path('05'),Path('05.obj')...]\n\n\nThere are 24 directories numbered from 01 to 24 (they correspond to the different people photographed), and a corresponding .obj file for each (we won’t need them here). Let’s take a look inside one of these directories:\n\n\nShow code\n(path/'01').ls().sorted()\n\n\n(#1000) [Path('01/depth.cal'),Path('01/frame_00003_pose.txt'),Path('01/frame_00003_rgb.jpg'),Path('01/frame_00004_pose.txt'),Path('01/frame_00004_rgb.jpg'),Path('01/frame_00005_pose.txt'),Path('01/frame_00005_rgb.jpg'),Path('01/frame_00006_pose.txt'),Path('01/frame_00006_rgb.jpg'),Path('01/frame_00007_pose.txt')...]\n\n\nInside the subdirectories, we have different frames, each of them come with an image (_rgb.jpg) and a pose file (_pose.txt). We can easily get all the image files recursively with get_image_files, then write a function that converts an image filename to its associated pose file:\n\n\nShow code\nimg_files = get_image_files(path)\ndef img2pose(x): return Path(f'{str(x)[:-7]}pose.txt')\nimg2pose(img_files[0])\n\n\nPath('13/frame_00349_pose.txt')\n\n\nLet’s take a look at our first image:\n\n\nShow code\nim = PILImage.create(img_files[0])\nim.shape\n\n\n(480, 640)\n\n\n\n\nShow code\nim.to_thumb(160)\n\n\n\n\n\n\n\n\n\nThe Biwi dataset website used to explain the format of the pose text file associated with each image, which shows the location of the center of the head. The details of this aren’t important for our purposes, so we’ll just show the function we use to extract the head center point:\n\n\nShow code\ncal = np.genfromtxt(path/'01'/'rgb.cal', skip_footer=6)\ndef get_ctr(f):\n    ctr = np.genfromtxt(img2pose(f), skip_header=3)\n    c1 = ctr[0] * cal[0][0]/ctr[2] + cal[0][2]\n    c2 = ctr[1] * cal[1][1]/ctr[2] + cal[1][2]\n    return tensor([c1,c2])\n\n\nThis function returns the coordinates as a tensor of two items:\n\n\nShow code\nget_ctr(img_files[0])\n\n\ntensor([384.6370, 259.4787])\n\n\nWe can pass this function to DataBlock as get_y, since it is responsible for labeling each item. We’ll resize the images to half their input size, just to speed up training a bit.\nOne important point to note is that we should not just use a random splitter. The reason for this is that the same people appear in multiple images in this dataset, but we want to ensure that our model can generalize to people that it hasn’t seen yet. Each folder in the dataset contains the images for one person. Therefore, we can create a splitter function that returns true for just one person, resulting in a validation set containing just that person’s images.\nThe only other difference from the previous data block examples is that the second block is a PointBlock. This is necessary so that fastai knows that the labels represent coordinates; that way, it knows that when doing data augmentation, it should do the same augmentation to these coordinates as it does to the images:\n\n\nShow code\nbiwi = DataBlock(\n    blocks=(ImageBlock, PointBlock),\n    get_items=get_image_files,\n    get_y=get_ctr,\n    splitter=FuncSplitter(lambda o: o.parent.name=='13'),\n    batch_tfms=aug_transforms(size=(240,320)), \n)\n\n\n\nimportant: Points and Data Augmentation: We’re not aware of other libraries (except for fastai) that automatically and correctly apply data augmentation to coordinates. So, if you’re working with another library, you may need to disable data augmentation for these kinds of problems.\n\nBefore doing any modeling, we should look at our data to confirm it seems okay:\n\n\nShow code\ndls = biwi.dataloaders(path)\ndls.show_batch(max_n=9, figsize=(8,6))\n\n\n\n\n\n\n\n\n\nThat’s looking good! As well as looking at the batch visually, it’s a good idea to also look at the underlying tensors (especially as a student; it will help clarify your understanding of what your model is really seeing):\n\n\nShow code\nxb,yb = dls.one_batch()\nxb.shape,yb.shape\n\n\n(torch.Size([64, 3, 240, 320]), torch.Size([64, 1, 2]))\n\n\nMake sure that you understand why these are the shapes for our mini-batches.\nHere’s an example of one row from the dependent variable:\n\n\nShow code\nyb[0]\n\n\nTensorPoint([[-0.3375,  0.2193]], device='cuda:6')\n\n\nAs you can see, we haven’t had to use a separate image regression application; all we’ve had to do is label the data, and tell fastai what kinds of data the independent and dependent variables represent.\nIt’s the same for creating our Learner. We will use the same function as before, with one new parameter, and we will be ready to train our model.\n\n\nTraining a Model\nAs usual, we can use vision_learner to create our Learner. Remember way back in &lt;&gt; how we used y_range to tell fastai the range of our targets? We’ll do the same here (coordinates in fastai and PyTorch are always rescaled between -1 and +1):\n\n\nShow code\nlearn = vision_learner(dls, resnet18, y_range=(-1,1))\n\n\ny_range is implemented in fastai using sigmoid_range, which is defined as:\n\n\nShow code\ndef sigmoid_range(x, lo, hi): return torch.sigmoid(x) * (hi-lo) + lo\n\n\nThis is set as the final layer of the model, if y_range is defined. Take a moment to think about what this function does, and why it forces the model to output activations in the range (lo,hi).\nHere’s what it looks like:\n\n\nShow code\nplot_function(partial(sigmoid_range,lo=-1,hi=1), min=-4, max=4)\n\n\n/home/jhoward/anaconda3/lib/python3.7/site-packages/fastbook/__init__.py:55: UserWarning: Not providing a value for linspace's steps is deprecated and will throw a runtime error in a future release. This warning will appear only once per process. (Triggered internally at  /pytorch/aten/src/ATen/native/RangeFactories.cpp:23.)\n  x = torch.linspace(min,max)\n\n\n\n\n\n\n\n\n\nWe didn’t specify a loss function, which means we’re getting whatever fastai chooses as the default. Let’s see what it picked for us:\n\n\nShow code\ndls.loss_func\n\n\nFlattenedLoss of MSELoss()\n\n\nThis makes sense, since when coordinates are used as the dependent variable, most of the time we’re likely to be trying to predict something as close as possible; that’s basically what MSELoss (mean squared error loss) does. If you want to use a different loss function, you can pass it to vision_learner using the loss_func parameter.\nNote also that we didn’t specify any metrics. That’s because the MSE is already a useful metric for this task (although it’s probably more interpretable after we take the square root).\nWe can pick a good learning rate with the learning rate finder:\n\n\nShow code\nlearn.lr_find()\n\n\n\n\n\nSuggestedLRs(lr_min=0.005754399299621582, lr_steep=0.033113110810518265)\n\n\n\n\n\n\n\n\n\nWe’ll try an LR of 1e-2:\n\n\nShow code\nlr = 1e-2\nlearn.fine_tune(3, lr)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.049630\n0.007602\n00:42\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.008714\n0.004291\n00:53\n\n\n1\n0.003213\n0.000715\n00:53\n\n\n2\n0.001482\n0.000036\n00:53\n\n\n\n\n\nGenerally when we run this we get a loss of around 0.0001, which corresponds to an average coordinate prediction error of:\n\n\nShow code\nmath.sqrt(0.0001)\n\n\n0.01\n\n\nThis sounds very accurate! But it’s important to take a look at our results with Learner.show_results. The left side are the actual (ground truth) coordinates and the right side are our model’s predictions:\n\n\nShow code\nlearn.show_results(ds_idx=1, nrows=3, figsize=(6,8))\n\n\n\n\n\n\n\n\n\n\n\n\nIt’s quite amazing that with just a few minutes of computation we’ve created such an accurate key points model, and without any special domain-specific application. This is the power of building on flexible APIs, and using transfer learning! It’s particularly striking that we’ve been able to use transfer learning so effectively even between totally different tasks; our pretrained model was trained to do image classification, and we fine-tuned for image regression."
  },
  {
    "objectID": "posts/06_multicat.html#conclusion",
    "href": "posts/06_multicat.html#conclusion",
    "title": "Other Computer Vision Problems",
    "section": "Conclusion",
    "text": "Conclusion\nIn problems that are at first glance completely different (single-label classification, multi-label classification, and regression), we end up using the same model with just different numbers of outputs. The loss function is the one thing that changes, which is why it’s important to double-check that you are using the right loss function for your problem.\nfastai will automatically try to pick the right one from the data you built, but if you are using pure PyTorch to build your DataLoaders, make sure you think hard when you have to decide on your choice of loss function, and remember that you most probably want:\n\nnn.CrossEntropyLoss for single-label classification\nnn.BCEWithLogitsLoss for multi-label classification\nnn.MSELoss for regression"
  },
  {
    "objectID": "posts/06_multicat.html#questionnaire",
    "href": "posts/06_multicat.html#questionnaire",
    "title": "Other Computer Vision Problems",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nHow could multi-label classification improve the usability of the bear classifier?\nHow do we encode the dependent variable in a multi-label classification problem?\nHow do you access the rows and columns of a DataFrame as if it was a matrix?\nHow do you get a column by name from a DataFrame?\nWhat is the difference between a Dataset and DataLoader?\nWhat does a Datasets object normally contain?\nWhat does a DataLoaders object normally contain?\nWhat does lambda do in Python?\nWhat are the methods to customize how the independent and dependent variables are created with the data block API?\nWhy is softmax not an appropriate output activation function when using a one hot encoded target?\nWhy is nll_loss not an appropriate loss function when using a one-hot-encoded target?\nWhat is the difference between nn.BCELoss and nn.BCEWithLogitsLoss?\nWhy can’t we use regular accuracy in a multi-label problem?\nWhen is it okay to tune a hyperparameter on the validation set?\nHow is y_range implemented in fastai? (See if you can implement it yourself and test it without peeking!)\nWhat is a regression problem? What loss function should you use for such a problem?\nWhat do you need to do to make sure the fastai library applies the same data augmentation to your input images and your target point coordinates?\n\n\nFurther Research\n\nRead a tutorial about Pandas DataFrames and experiment with a few methods that look interesting to you. See the book’s website for recommended tutorials.\nRetrain the bear classifier using multi-label classification. See if you can make it work effectively with images that don’t contain any bears, including showing that information in the web application. Try an image with two different kinds of bears. Check whether the accuracy on the single-label dataset is impacted using multi-label classification."
  },
  {
    "objectID": "posts/08_collab.html",
    "href": "posts/08_collab.html",
    "title": "Collaborative Filtering Deep Dive",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_collab]]\nOne very common problem to solve is when you have a number of users and a number of products, and you want to recommend which products are most likely to be useful for which users. There are many variations of this: for example, recommending movies (such as on Netflix), figuring out what to highlight for a user on a home page, deciding what stories to show in a social media feed, and so forth. There is a general solution to this problem, called collaborative filtering, which works like this: look at what products the current user has used or liked, find other users that have used or liked similar products, and then recommend other products that those users have used or liked.\nFor example, on Netflix you may have watched lots of movies that are science fiction, full of action, and were made in the 1970s. Netflix may not know these particular properties of the films you have watched, but it will be able to see that other people that have watched the same movies that you watched also tended to watch other movies that are science fiction, full of action, and were made in the 1970s. In other words, to use this approach we don’t necessarily need to know anything about the movies, except who like to watch them.\nThere is actually a more general class of problems that this approach can solve, not necessarily involving users and products. Indeed, for collaborative filtering we more commonly refer to items, rather than products. Items could be links that people click on, diagnoses that are selected for patients, and so forth.\nThe key foundational idea is that of latent factors. In the Netflix example, we started with the assumption that you like old, action-packed sci-fi movies. But you never actually told Netflix that you like these kinds of movies. And Netflix never actually needed to add columns to its movies table saying which movies are of these types. Still, there must be some underlying concept of sci-fi, action, and movie age, and these concepts must be relevant for at least some people’s movie watching decisions.\nFor this chapter we are going to work on this movie recommendation problem. We’ll start by getting some data suitable for a collaborative filtering model."
  },
  {
    "objectID": "posts/08_collab.html#a-first-look-at-the-data",
    "href": "posts/08_collab.html#a-first-look-at-the-data",
    "title": "Collaborative Filtering Deep Dive",
    "section": "A First Look at the Data",
    "text": "A First Look at the Data\nWe do not have access to Netflix’s entire dataset of movie watching history, but there is a great dataset that we can use, called MovieLens. This dataset contains tens of millions of movie rankings (a combination of a movie ID, a user ID, and a numeric rating), although we will just use a subset of 100,000 of them for our example. If you’re interested, it would be a great learning project to try and replicate this approach on the full 25-million recommendation dataset, which you can get from their website.\nThe dataset is available through the usual fastai function:\n\n\nShow code\nfrom fastai.collab import *\nfrom fastai.tabular.all import *\npath = untar_data(URLs.ML_100k)\n\n\nAccording to the README, the main table is in the file u.data. It is tab-separated and the columns are, respectively user, movie, rating, and timestamp. Since those names are not encoded, we need to indicate them when reading the file with Pandas. Here is a way to open this table and take a look:\n\n\nShow code\nratings = pd.read_csv(path/'u.data', delimiter='\\t', header=None,\n                      names=['user','movie','rating','timestamp'])\nratings.head()\n\n\n\n\n\n\n\n\n\nuser\nmovie\nrating\ntimestamp\n\n\n\n\n0\n196\n242\n3\n881250949\n\n\n1\n186\n302\n3\n891717742\n\n\n2\n22\n377\n1\n878887116\n\n\n3\n244\n51\n2\n880606923\n\n\n4\n166\n346\n1\n886397596\n\n\n\n\n\n\n\nAlthough this has all the information we need, it is not a particularly helpful way for humans to look at this data. &lt;&gt; shows the same data cross-tabulated into a human-friendly table.\n\nWe have selected just a few of the most popular movies, and users who watch the most movies, for this crosstab example. The empty cells in this table are the things that we would like our model to learn to fill in. Those are the places where a user has not reviewed the movie yet, presumably because they have not watched it. For each user, we would like to figure out which of those movies they might be most likely to enjoy.\nIf we knew for each user to what degree they liked each important category that a movie might fall into, such as genre, age, preferred directors and actors, and so forth, and we knew the same information about each movie, then a simple way to fill in this table would be to multiply this information together for each movie and use a combination. For instance, assuming these factors range between -1 and +1, with positive numbers indicating stronger matches and negative numbers weaker ones, and the categories are science-fiction, action, and old movies, then we could represent the movie The Last Skywalker as:\n\n\nShow code\nlast_skywalker = np.array([0.98,0.9,-0.9])\n\n\nHere, for instance, we are scoring very science-fiction as 0.98, very action as 0.9, and very not old as -0.9. We could represent a user who likes modern sci-fi action movies as:\n\n\nShow code\nuser1 = np.array([0.9,0.8,-0.6])\n\n\nand we can now calculate the match between this combination:\n\n\nShow code\n(user1*last_skywalker).sum()\n\n\n2.1420000000000003\n\n\nWhen we multiply two vectors together and add up the results, this is known as the dot product. It is used a lot in machine learning, and forms the basis of matrix multiplication. We will be looking a lot more at matrix multiplication and dot products in &lt;&gt;.\n\njargon: dot product: The mathematical operation of multiplying the elements of two vectors together, and then summing up the result.\n\nOn the other hand, we might represent the movie Casablanca as:\n\n\nShow code\ncasablanca = np.array([-0.99,-0.3,0.8])\n\n\nThe match between this combination is:\n\n\nShow code\n(user1*casablanca).sum()\n\n\n-1.611\n\n\nSince we don’t know what the latent factors actually are, and we don’t know how to score them for each user and movie, we should learn them."
  },
  {
    "objectID": "posts/08_collab.html#learning-the-latent-factors",
    "href": "posts/08_collab.html#learning-the-latent-factors",
    "title": "Collaborative Filtering Deep Dive",
    "section": "Learning the Latent Factors",
    "text": "Learning the Latent Factors\nThere is surprisingly little difference between specifying the structure of a model, as we did in the last section, and learning one, since we can just use our general gradient descent approach.\nStep 1 of this approach is to randomly initialize some parameters. These parameters will be a set of latent factors for each user and movie. We will have to decide how many to use. We will discuss how to select this shortly, but for illustrative purposes let’s use 5 for now. Because each user will have a set of these factors and each movie will have a set of these factors, we can show these randomly initialized values right next to the users and movies in our crosstab, and we can then fill in the dot products for each of these combinations in the middle. For example, &lt;&gt; shows what it looks like in Microsoft Excel, with the top-left cell formula displayed as an example.\n\nStep 2 of this approach is to calculate our predictions. As we’ve discussed, we can do this by simply taking the dot product of each movie with each user. If, for instance, the first latent user factor represents how much the user likes action movies and the first latent movie factor represents if the movie has a lot of action or not, the product of those will be particularly high if either the user likes action movies and the movie has a lot of action in it or the user doesn’t like action movies and the movie doesn’t have any action in it. On the other hand, if we have a mismatch (a user loves action movies but the movie isn’t an action film, or the user doesn’t like action movies and it is one), the product will be very low.\nStep 3 is to calculate our loss. We can use any loss function that we wish; let’s pick mean squared error for now, since that is one reasonable way to represent the accuracy of a prediction.\nThat’s all we need. With this in place, we can optimize our parameters (that is, the latent factors) using stochastic gradient descent, such as to minimize the loss. At each step, the stochastic gradient descent optimizer will calculate the match between each movie and each user using the dot product, and will compare it to the actual rating that each user gave to each movie. It will then calculate the derivative of this value and will step the weights by multiplying this by the learning rate. After doing this lots of times, the loss will get better and better, and the recommendations will also get better and better.\nTo use the usual Learner.fit function we will need to get our data into a DataLoaders, so let’s focus on that now."
  },
  {
    "objectID": "posts/08_collab.html#creating-the-dataloaders",
    "href": "posts/08_collab.html#creating-the-dataloaders",
    "title": "Collaborative Filtering Deep Dive",
    "section": "Creating the DataLoaders",
    "text": "Creating the DataLoaders\nWhen showing the data, we would rather see movie titles than their IDs. The table u.item contains the correspondence of IDs to titles:\n\n\nShow code\nmovies = pd.read_csv(path/'u.item',  delimiter='|', encoding='latin-1',\n                     usecols=(0,1), names=('movie','title'), header=None)\nmovies.head()\n\n\n\n\n\n\n\n\n\nmovie\ntitle\n\n\n\n\n0\n1\nToy Story (1995)\n\n\n1\n2\nGoldenEye (1995)\n\n\n2\n3\nFour Rooms (1995)\n\n\n3\n4\nGet Shorty (1995)\n\n\n4\n5\nCopycat (1995)\n\n\n\n\n\n\n\nWe can merge this with our ratings table to get the user ratings by title:\n\n\nShow code\nratings = ratings.merge(movies)\nratings.head()\n\n\n\n\n\n\n\n\n\nuser\nmovie\nrating\ntimestamp\ntitle\n\n\n\n\n0\n196\n242\n3\n881250949\nKolya (1996)\n\n\n1\n63\n242\n3\n875747190\nKolya (1996)\n\n\n2\n226\n242\n5\n883888671\nKolya (1996)\n\n\n3\n154\n242\n3\n879138235\nKolya (1996)\n\n\n4\n306\n242\n5\n876503793\nKolya (1996)\n\n\n\n\n\n\n\nWe can then build a DataLoaders object from this table. By default, it takes the first column for the user, the second column for the item (here our movies), and the third column for the ratings. We need to change the value of item_name in our case to use the titles instead of the IDs:\n\n\nShow code\ndls = CollabDataLoaders.from_df(ratings, item_name='title', bs=64)\ndls.show_batch()\n\n\n\n\n\n\nuser\ntitle\nrating\n\n\n\n\n0\n542\nMy Left Foot (1989)\n4\n\n\n1\n422\nEvent Horizon (1997)\n3\n\n\n2\n311\nAfrican Queen, The (1951)\n4\n\n\n3\n595\nFace/Off (1997)\n4\n\n\n4\n617\nEvil Dead II (1987)\n1\n\n\n5\n158\nJurassic Park (1993)\n5\n\n\n6\n836\nChasing Amy (1997)\n3\n\n\n7\n474\nEmma (1996)\n3\n\n\n8\n466\nJackie Chan's First Strike (1996)\n3\n\n\n9\n554\nScream (1996)\n3\n\n\n\n\n\nTo represent collaborative filtering in PyTorch we can’t just use the crosstab representation directly, especially if we want it to fit into our deep learning framework. We can represent our movie and user latent factor tables as simple matrices:\n\n\nShow code\ndls.classes\n\n\n{'user': (#944) ['#na#',1,2,3,4,5,6,7,8,9...],\n 'title': (#1635) ['#na#',\"'Til There Was You (1997)\",'1-900 (1994)','101 Dalmatians (1996)','12 Angry Men (1957)','187 (1997)','2 Days in the Valley (1996)','20,000 Leagues Under the Sea (1954)','2001: A Space Odyssey (1968)','3 Ninjas: High Noon At Mega Mountain (1998)'...]}\n\n\n\n\nShow code\nn_users  = len(dls.classes['user'])\nn_movies = len(dls.classes['title'])\nn_factors = 5\n\nuser_factors = torch.randn(n_users, n_factors)\nmovie_factors = torch.randn(n_movies, n_factors)\n\n\nTo calculate the result for a particular movie and user combination, we have to look up the index of the movie in our movie latent factor matrix and the index of the user in our user latent factor matrix; then we can do our dot product between the two latent factor vectors. But look up in an index is not an operation our deep learning models know how to do. They know how to do matrix products, and activation functions.\nFortunately, it turns out that we can represent look up in an index as a matrix product. The trick is to replace our indices with one-hot-encoded vectors. Here is an example of what happens if we multiply a vector by a one-hot-encoded vector representing the index 3:\n\n\nShow code\none_hot_3 = one_hot(3, n_users).float()\n\n\n\n\nShow code\nuser_factors.t() @ one_hot_3\n\n\ntensor([-0.4586, -0.9915, -0.4052, -0.3621, -0.5908])\n\n\nIt gives us the same vector as the one at index 3 in the matrix:\n\n\nShow code\nuser_factors[3]\n\n\ntensor([-0.4586, -0.9915, -0.4052, -0.3621, -0.5908])\n\n\nIf we do that for a few indices at once, we will have a matrix of one-hot-encoded vectors, and that operation will be a matrix multiplication! This would be a perfectly acceptable way to build models using this kind of architecture, except that it would use a lot more memory and time than necessary. We know that there is no real underlying reason to store the one-hot-encoded vector, or to search through it to find the occurrence of the number one—we should just be able to index into an array directly with an integer. Therefore, most deep learning libraries, including PyTorch, include a special layer that does just this; it indexes into a vector using an integer, but has its derivative calculated in such a way that it is identical to what it would have been if it had done a matrix multiplication with a one-hot-encoded vector. This is called an embedding.\n\njargon: Embedding: Multiplying by a one-hot-encoded matrix, using the computational shortcut that it can be implemented by simply indexing directly. This is quite a fancy word for a very simple concept. The thing that you multiply the one-hot-encoded matrix by (or, using the computational shortcut, index into directly) is called the embedding matrix.\n\nIn computer vision, we have a very easy way to get all the information of a pixel through its RGB values: each pixel in a colored image is represented by three numbers. Those three numbers give us the redness, the greenness and the blueness, which is enough to get our model to work afterward.\nFor the problem at hand, we don’t have the same easy way to characterize a user or a movie. There are probably relations with genres: if a given user likes romance, they are likely to give higher scores to romance movies. Other factors might be whether the movie is more action-oriented versus heavy on dialogue, or the presence of a specific actor that a user might particularly like.\nHow do we determine numbers to characterize those? The answer is, we don’t. We will let our model learn them. By analyzing the existing relations between users and movies, our model can figure out itself the features that seem important or not.\nThis is what embeddings are. We will attribute to each of our users and each of our movies a random vector of a certain length (here, n_factors=5), and we will make those learnable parameters. That means that at each step, when we compute the loss by comparing our predictions to our targets, we will compute the gradients of the loss with respect to those embedding vectors and update them with the rules of SGD (or another optimizer).\nAt the beginning, those numbers don’t mean anything since we have chosen them randomly, but by the end of training, they will. By learning on existing data about the relations between users and movies, without having any other information, we will see that they still get some important features, and can isolate blockbusters from independent cinema, action movies from romance, and so on.\nWe are now in a position that we can create our whole model from scratch."
  },
  {
    "objectID": "posts/08_collab.html#collaborative-filtering-from-scratch",
    "href": "posts/08_collab.html#collaborative-filtering-from-scratch",
    "title": "Collaborative Filtering Deep Dive",
    "section": "Collaborative Filtering from Scratch",
    "text": "Collaborative Filtering from Scratch\nBefore we can write a model in PyTorch, we first need to learn the basics of object-oriented programming and Python. If you haven’t done any object-oriented programming before, we will give you a quick introduction here, but we would recommend looking up a tutorial and getting some practice before moving on.\nThe key idea in object-oriented programming is the class. We have been using classes throughout this book, such as DataLoader, string, and Learner. Python also makes it easy for us to create new classes. Here is an example of a simple class:\n\n\nShow code\nclass Example:\n    def __init__(self, a): self.a = a\n    def say(self,x): return f'Hello {self.a}, {x}.'\n\n\nThe most important piece of this is the special method called __init__ (pronounced dunder init). In Python, any method surrounded in double underscores like this is considered special. It indicates that there is some extra behavior associated with this method name. In the case of __init__, this is the method Python will call when your new object is created. So, this is where you can set up any state that needs to be initialized upon object creation. Any parameters included when the user constructs an instance of your class will be passed to the __init__ method as parameters. Note that the first parameter to any method defined inside a class is self, so you can use this to set and get any attributes that you will need:\n\n\nShow code\nex = Example('Sylvain')\nex.say('nice to meet you')\n\n\n'Hello Sylvain, nice to meet you.'\n\n\nAlso note that creating a new PyTorch module requires inheriting from Module. Inheritance is an important object-oriented concept that we will not discuss in detail here—in short, it means that we can add additional behavior to an existing class. PyTorch already provides a Module class, which provides some basic foundations that we want to build on. So, we add the name of this superclass after the name of the class that we are defining, as shown in the following example.\nThe final thing that you need to know to create a new PyTorch module is that when your module is called, PyTorch will call a method in your class called forward, and will pass along to that any parameters that are included in the call. Here is the class defining our dot product model:\n\n\nShow code\nclass DotProduct(Module):\n    def __init__(self, n_users, n_movies, n_factors):\n        self.user_factors = Embedding(n_users, n_factors)\n        self.movie_factors = Embedding(n_movies, n_factors)\n        \n    def forward(self, x):\n        users = self.user_factors(x[:,0])\n        movies = self.movie_factors(x[:,1])\n        return (users * movies).sum(dim=1)\n\n\nIf you haven’t seen object-oriented programming before, then don’t worry, you won’t need to use it much in this book. We are just mentioning this approach here, because most online tutorials and documentation will use the object-oriented syntax.\nNote that the input of the model is a tensor of shape batch_size x 2, where the first column (x[:, 0]) contains the user IDs and the second column (x[:, 1]) contains the movie IDs. As explained before, we use the embedding layers to represent our matrices of user and movie latent factors:\n\n\nShow code\nx,y = dls.one_batch()\nx.shape\n\n\ntorch.Size([64, 2])\n\n\nNow that we have defined our architecture, and created our parameter matrices, we need to create a Learner to optimize our model. In the past we have used special functions, such as vision_learner, which set up everything for us for a particular application. Since we are doing things from scratch here, we will use the plain Learner class:\n\n\nShow code\nmodel = DotProduct(n_users, n_movies, 50)\nlearn = Learner(dls, model, loss_func=MSELossFlat())\n\n\nWe are now ready to fit our model:\n\n\nShow code\nlearn.fit_one_cycle(5, 5e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.993168\n0.990168\n00:12\n\n\n1\n0.884821\n0.911269\n00:12\n\n\n2\n0.671865\n0.875679\n00:12\n\n\n3\n0.471727\n0.878200\n00:11\n\n\n4\n0.361314\n0.884209\n00:12\n\n\n\n\n\nThe first thing we can do to make this model a little bit better is to force those predictions to be between 0 and 5. For this, we just need to use sigmoid_range, like in &lt;&gt;. One thing we discovered empirically is that it’s better to have the range go a little bit over 5, so we use (0, 5.5):\n\n\nShow code\nclass DotProduct(Module):\n    def __init__(self, n_users, n_movies, n_factors, y_range=(0,5.5)):\n        self.user_factors = Embedding(n_users, n_factors)\n        self.movie_factors = Embedding(n_movies, n_factors)\n        self.y_range = y_range\n        \n    def forward(self, x):\n        users = self.user_factors(x[:,0])\n        movies = self.movie_factors(x[:,1])\n        return sigmoid_range((users * movies).sum(dim=1), *self.y_range)\n\n\n\n\nShow code\nmodel = DotProduct(n_users, n_movies, 50)\nlearn = Learner(dls, model, loss_func=MSELossFlat())\nlearn.fit_one_cycle(5, 5e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.973745\n0.993206\n00:12\n\n\n1\n0.869132\n0.914323\n00:12\n\n\n2\n0.676553\n0.870192\n00:12\n\n\n3\n0.485377\n0.873865\n00:12\n\n\n4\n0.377866\n0.877610\n00:11\n\n\n\n\n\nThis is a reasonable start, but we can do better. One obvious missing piece is that some users are just more positive or negative in their recommendations than others, and some movies are just plain better or worse than others. But in our dot product representation we do not have any way to encode either of these things. If all you can say about a movie is, for instance, that it is very sci-fi, very action-oriented, and very not old, then you don’t really have any way to say whether most people like it.\nThat’s because at this point we only have weights; we do not have biases. If we have a single number for each user that we can add to our scores, and ditto for each movie, that will handle this missing piece very nicely. So first of all, let’s adjust our model architecture:\n\n\nShow code\nclass DotProductBias(Module):\n    def __init__(self, n_users, n_movies, n_factors, y_range=(0,5.5)):\n        self.user_factors = Embedding(n_users, n_factors)\n        self.user_bias = Embedding(n_users, 1)\n        self.movie_factors = Embedding(n_movies, n_factors)\n        self.movie_bias = Embedding(n_movies, 1)\n        self.y_range = y_range\n        \n    def forward(self, x):\n        users = self.user_factors(x[:,0])\n        movies = self.movie_factors(x[:,1])\n        res = (users * movies).sum(dim=1, keepdim=True)\n        res += self.user_bias(x[:,0]) + self.movie_bias(x[:,1])\n        return sigmoid_range(res, *self.y_range)\n\n\nLet’s try training this and see how it goes:\n\n\nShow code\nmodel = DotProductBias(n_users, n_movies, 50)\nlearn = Learner(dls, model, loss_func=MSELossFlat())\nlearn.fit_one_cycle(5, 5e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.929161\n0.936303\n00:13\n\n\n1\n0.820444\n0.861306\n00:13\n\n\n2\n0.621612\n0.865306\n00:14\n\n\n3\n0.404648\n0.886448\n00:13\n\n\n4\n0.292948\n0.892580\n00:13\n\n\n\n\n\nInstead of being better, it ends up being worse (at least at the end of training). Why is that? If we look at both trainings carefully, we can see the validation loss stopped improving in the middle and started to get worse. As we’ve seen, this is a clear indication of overfitting. In this case, there is no way to use data augmentation, so we will have to use another regularization technique. One approach that can be helpful is weight decay.\n\nWeight Decay\nWeight decay, or L2 regularization, consists in adding to your loss function the sum of all the weights squared. Why do that? Because when we compute the gradients, it will add a contribution to them that will encourage the weights to be as small as possible.\nWhy would it prevent overfitting? The idea is that the larger the coefficients are, the sharper canyons we will have in the loss function. If we take the basic example of a parabola, y = a * (x**2), the larger a is, the more narrow the parabola is (&lt;&gt;).\n\n\nShow code\n#hide_input\n#id parabolas\nx = np.linspace(-2,2,100)\na_s = [1,2,5,10,50] \nys = [a * x**2 for a in a_s]\n_,ax = plt.subplots(figsize=(8,6))\nfor a,y in zip(a_s,ys): ax.plot(x,y, label=f'a={a}')\nax.set_ylim([0,5])\nax.legend();\n\n\n\n\n\n\n\n\n\nSo, letting our model learn high parameters might cause it to fit all the data points in the training set with an overcomplex function that has very sharp changes, which will lead to overfitting.\nLimiting our weights from growing too much is going to hinder the training of the model, but it will yield a state where it generalizes better. Going back to the theory briefly, weight decay (or just wd) is a parameter that controls that sum of squares we add to our loss (assuming parameters is a tensor of all parameters):\nloss_with_wd = loss + wd * (parameters**2).sum()\nIn practice, though, it would be very inefficient (and maybe numerically unstable) to compute that big sum and add it to the loss. If you remember a little bit of high school math, you might recall that the derivative of p**2 with respect to p is 2*p, so adding that big sum to our loss is exactly the same as doing:\nparameters.grad += wd * 2 * parameters\nIn practice, since wd is a parameter that we choose, we can just make it twice as big, so we don’t even need the *2 in this equation. To use weight decay in fastai, just pass wd in your call to fit or fit_one_cycle:\n\n\nShow code\nmodel = DotProductBias(n_users, n_movies, 50)\nlearn = Learner(dls, model, loss_func=MSELossFlat())\nlearn.fit_one_cycle(5, 5e-3, wd=0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.972090\n0.962366\n00:13\n\n\n1\n0.875591\n0.885106\n00:13\n\n\n2\n0.723798\n0.839880\n00:13\n\n\n3\n0.586002\n0.823225\n00:13\n\n\n4\n0.490980\n0.823060\n00:13\n\n\n\n\n\nMuch better!\n\n\nCreating Our Own Embedding Module\nSo far, we’ve used Embedding without thinking about how it really works. Let’s re-create DotProductBias without using this class. We’ll need a randomly initialized weight matrix for each of the embeddings. We have to be careful, however. Recall from &lt;&gt; that optimizers require that they can get all the parameters of a module from the module’s parameters method. However, this does not happen fully automatically. If we just add a tensor as an attribute to a Module, it will not be included in parameters:\n\n\nShow code\nclass T(Module):\n    def __init__(self): self.a = torch.ones(3)\n\nL(T().parameters())\n\n\n(#0) []\n\n\nTo tell Module that we want to treat a tensor as a parameter, we have to wrap it in the nn.Parameter class. This class doesn’t actually add any functionality (other than automatically calling requires_grad_ for us). It’s only used as a “marker” to show what to include in parameters:\n\n\nShow code\nclass T(Module):\n    def __init__(self): self.a = nn.Parameter(torch.ones(3))\n\nL(T().parameters())\n\n\n(#1) [Parameter containing:\ntensor([1., 1., 1.], requires_grad=True)]\n\n\nAll PyTorch modules use nn.Parameter for any trainable parameters, which is why we haven’t needed to explicitly use this wrapper up until now:\n\n\nShow code\nclass T(Module):\n    def __init__(self): self.a = nn.Linear(1, 3, bias=False)\n\nt = T()\nL(t.parameters())\n\n\n(#1) [Parameter containing:\ntensor([[-0.9595],\n        [-0.8490],\n        [ 0.8159]], requires_grad=True)]\n\n\n\n\nShow code\ntype(t.a.weight)\n\n\ntorch.nn.parameter.Parameter\n\n\nWe can create a tensor as a parameter, with random initialization, like so:\n\n\nShow code\ndef create_params(size):\n    return nn.Parameter(torch.zeros(*size).normal_(0, 0.01))\n\n\nLet’s use this to create DotProductBias again, but without Embedding:\n\n\nShow code\nclass DotProductBias(Module):\n    def __init__(self, n_users, n_movies, n_factors, y_range=(0,5.5)):\n        self.user_factors = create_params([n_users, n_factors])\n        self.user_bias = create_params([n_users])\n        self.movie_factors = create_params([n_movies, n_factors])\n        self.movie_bias = create_params([n_movies])\n        self.y_range = y_range\n        \n    def forward(self, x):\n        users = self.user_factors[x[:,0]]\n        movies = self.movie_factors[x[:,1]]\n        res = (users*movies).sum(dim=1)\n        res += self.user_bias[x[:,0]] + self.movie_bias[x[:,1]]\n        return sigmoid_range(res, *self.y_range)\n\n\nThen let’s train it again to check we get around the same results we saw in the previous section:\n\n\nShow code\nmodel = DotProductBias(n_users, n_movies, 50)\nlearn = Learner(dls, model, loss_func=MSELossFlat())\nlearn.fit_one_cycle(5, 5e-3, wd=0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.962146\n0.936952\n00:14\n\n\n1\n0.858084\n0.884951\n00:14\n\n\n2\n0.740883\n0.838549\n00:14\n\n\n3\n0.592497\n0.823599\n00:14\n\n\n4\n0.473570\n0.824263\n00:14\n\n\n\n\n\nNow, let’s take a look at what our model has learned."
  },
  {
    "objectID": "posts/08_collab.html#interpreting-embeddings-and-biases",
    "href": "posts/08_collab.html#interpreting-embeddings-and-biases",
    "title": "Collaborative Filtering Deep Dive",
    "section": "Interpreting Embeddings and Biases",
    "text": "Interpreting Embeddings and Biases\nOur model is already useful, in that it can provide us with movie recommendations for our users—but it is also interesting to see what parameters it has discovered. The easiest to interpret are the biases. Here are the movies with the lowest values in the bias vector:\n\n\nShow code\nmovie_bias = learn.model.movie_bias.squeeze()\nidxs = movie_bias.argsort()[:5]\n[dls.classes['title'][i] for i in idxs]\n\n\n['Children of the Corn: The Gathering (1996)',\n 'Lawnmower Man 2: Beyond Cyberspace (1996)',\n 'Beautician and the Beast, The (1997)',\n 'Crow: City of Angels, The (1996)',\n 'Home Alone 3 (1997)']\n\n\nThink about what this means. What it’s saying is that for each of these movies, even when a user is very well matched to its latent factors (which, as we will see in a moment, tend to represent things like level of action, age of movie, and so forth), they still generally don’t like it. We could have simply sorted the movies directly by their average rating, but looking at the learned bias tells us something much more interesting. It tells us not just whether a movie is of a kind that people tend not to enjoy watching, but that people tend not to like watching it even if it is of a kind that they would otherwise enjoy! By the same token, here are the movies with the highest bias:\n\n\nShow code\nidxs = movie_bias.argsort(descending=True)[:5]\n[dls.classes['title'][i] for i in idxs]\n\n\n['L.A. Confidential (1997)',\n 'Titanic (1997)',\n 'Silence of the Lambs, The (1991)',\n 'Shawshank Redemption, The (1994)',\n 'Star Wars (1977)']\n\n\nSo, for instance, even if you don’t normally enjoy detective movies, you might enjoy LA Confidential!\nIt is not quite so easy to directly interpret the embedding matrices. There are just too many factors for a human to look at. But there is a technique that can pull out the most important underlying directions in such a matrix, called principal component analysis (PCA). We will not be going into this in detail in this book, because it is not particularly important for you to understand to be a deep learning practitioner, but if you are interested then we suggest you check out the fast.ai course Computational Linear Algebra for Coders. &lt;&gt; shows what our movies look like based on two of the strongest PCA components.\n\n\nShow code\n#hide_input\n#id img_pca_movie\n#caption Representation of movies based on two strongest PCA components\n#alt Representation of movies based on two strongest PCA components\ng = ratings.groupby('title')['rating'].count()\ntop_movies = g.sort_values(ascending=False).index.values[:1000]\ntop_idxs = tensor([learn.dls.classes['title'].o2i[m] for m in top_movies])\nmovie_w = learn.model.movie_factors[top_idxs].cpu().detach()\nmovie_pca = movie_w.pca(3)\nfac0,fac1,fac2 = movie_pca.t()\nidxs = list(range(50))\nX = fac0[idxs]\nY = fac2[idxs]\nplt.figure(figsize=(12,12))\nplt.scatter(X, Y)\nfor i, x, y in zip(top_movies[idxs], X, Y):\n    plt.text(x,y,i, color=np.random.rand(3)*0.7, fontsize=11)\nplt.show()\n\n\n\n\n\n\n\n\n\nWe can see here that the model seems to have discovered a concept of classic versus pop culture movies, or perhaps it is critically acclaimed that is represented here.\n\nj: No matter how many models I train, I never stop getting moved and surprised by how these randomly initialized bunches of numbers, trained with such simple mechanics, manage to discover things about my data all by themselves. It almost seems like cheating, that I can create code that does useful things without ever actually telling it how to do those things!\n\nWe defined our model from scratch to teach you what is inside, but you can directly use the fastai library to build it. We’ll look at how to do that next.\n\nUsing fastai.collab\nWe can create and train a collaborative filtering model using the exact structure shown earlier by using fastai’s collab_learner:\n\n\nShow code\nlearn = collab_learner(dls, n_factors=50, y_range=(0, 5.5))\n\n\n\n\nShow code\nlearn.fit_one_cycle(5, 5e-3, wd=0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.931751\n0.953806\n00:13\n\n\n1\n0.851826\n0.878119\n00:13\n\n\n2\n0.715254\n0.834711\n00:13\n\n\n3\n0.583173\n0.821470\n00:13\n\n\n4\n0.496625\n0.821688\n00:13\n\n\n\n\n\nThe names of the layers can be seen by printing the model:\n\n\nShow code\nlearn.model\n\n\nEmbeddingDotBias(\n  (u_weight): Embedding(944, 50)\n  (i_weight): Embedding(1635, 50)\n  (u_bias): Embedding(944, 1)\n  (i_bias): Embedding(1635, 1)\n)\n\n\nWe can use these to replicate any of the analyses we did in the previous section—for instance:\n\n\nShow code\nmovie_bias = learn.model.i_bias.weight.squeeze()\nidxs = movie_bias.argsort(descending=True)[:5]\n[dls.classes['title'][i] for i in idxs]\n\n\n['Titanic (1997)',\n \"Schindler's List (1993)\",\n 'Shawshank Redemption, The (1994)',\n 'L.A. Confidential (1997)',\n 'Silence of the Lambs, The (1991)']\n\n\nAnother interesting thing we can do with these learned embeddings is to look at distance.\n\n\nEmbedding Distance\nOn a two-dimensional map we can calculate the distance between two coordinates using the formula of Pythagoras: \\(\\sqrt{x^{2}+y^{2}}\\) (assuming that x and y are the distances between the coordinates on each axis). For a 50-dimensional embedding we can do exactly the same thing, except that we add up the squares of all 50 of the coordinate distances.\nIf there were two movies that were nearly identical, then their embedding vectors would also have to be nearly identical, because the users that would like them would be nearly exactly the same. There is a more general idea here: movie similarity can be defined by the similarity of users that like those movies. And that directly means that the distance between two movies’ embedding vectors can define that similarity. We can use this to find the most similar movie to Silence of the Lambs:\n\n\nShow code\nmovie_factors = learn.model.i_weight.weight\nidx = dls.classes['title'].o2i['Silence of the Lambs, The (1991)']\ndistances = nn.CosineSimilarity(dim=1)(movie_factors, movie_factors[idx][None])\nidx = distances.argsort(descending=True)[1]\ndls.classes['title'][idx]\n\n\n'Dial M for Murder (1954)'\n\n\nNow that we have succesfully trained a model, let’s see how to deal with the situation where we have no data for a user. How can we make recommendations to new users?"
  },
  {
    "objectID": "posts/08_collab.html#bootstrapping-a-collaborative-filtering-model",
    "href": "posts/08_collab.html#bootstrapping-a-collaborative-filtering-model",
    "title": "Collaborative Filtering Deep Dive",
    "section": "Bootstrapping a Collaborative Filtering Model",
    "text": "Bootstrapping a Collaborative Filtering Model\nThe biggest challenge with using collaborative filtering models in practice is the bootstrapping problem. The most extreme version of this problem is when you have no users, and therefore no history to learn from. What products do you recommend to your very first user?\nBut even if you are a well-established company with a long history of user transactions, you still have the question: what do you do when a new user signs up? And indeed, what do you do when you add a new product to your portfolio? There is no magic solution to this problem, and really the solutions that we suggest are just variations of use your common sense. You could assign new users the mean of all of the embedding vectors of your other users, but this has the problem that that particular combination of latent factors may be not at all common (for instance, the average for the science-fiction factor may be high, and the average for the action factor may be low, but it is not that common to find people who like science-fiction without action). Better would probably be to pick some particular user to represent average taste.\nBetter still is to use a tabular model based on user meta data to construct your initial embedding vector. When a user signs up, think about what questions you could ask them that could help you to understand their tastes. Then you can create a model where the dependent variable is a user’s embedding vector, and the independent variables are the results of the questions that you ask them, along with their signup metadata. We will see in the next section how to create these kinds of tabular models. (You may have noticed that when you sign up for services such as Pandora and Netflix, they tend to ask you a few questions about what genres of movie or music you like; this is how they come up with your initial collaborative filtering recommendations.)\nOne thing to be careful of is that a small number of extremely enthusiastic users may end up effectively setting the recommendations for your whole user base. This is a very common problem, for instance, in movie recommendation systems. People that watch anime tend to watch a whole lot of it, and don’t watch very much else, and spend a lot of time putting their ratings on websites. As a result, anime tends to be heavily overrepresented in a lot of best ever movies lists. In this particular case, it can be fairly obvious that you have a problem of representation bias, but if the bias is occurring in the latent factors then it may not be obvious at all.\nSuch a problem can change the entire makeup of your user base, and the behavior of your system. This is particularly true because of positive feedback loops. If a small number of your users tend to set the direction of your recommendation system, then they are naturally going to end up attracting more people like them to your system. And that will, of course, amplify the original representation bias. This type of bias has a natural tendency to be amplified exponentially. You may have seen examples of company executives expressing surprise at how their online platforms rapidly deteriorated in such a way that they expressed values at odds with the values of the founders. In the presence of these kinds of feedback loops, it is easy to see how such a divergence can happen both quickly and in a way that is hidden until it is too late.\nIn a self-reinforcing system like this, we should probably expect these kinds of feedback loops to be the norm, not the exception. Therefore, you should assume that you will see them, plan for that, and identify up front how you will deal with these issues. Try to think about all of the ways in which feedback loops may be represented in your system, and how you might be able to identify them in your data. In the end, this is coming back to our original advice about how to avoid disaster when rolling out any kind of machine learning system. It’s all about ensuring that there are humans in the loop; that there is careful monitoring, and a gradual and thoughtful rollout.\nOur dot product model works quite well, and it is the basis of many successful real-world recommendation systems. This approach to collaborative filtering is known as probabilistic matrix factorization (PMF). Another approach, which generally works similarly well given the same data, is deep learning."
  },
  {
    "objectID": "posts/08_collab.html#deep-learning-for-collaborative-filtering",
    "href": "posts/08_collab.html#deep-learning-for-collaborative-filtering",
    "title": "Collaborative Filtering Deep Dive",
    "section": "Deep Learning for Collaborative Filtering",
    "text": "Deep Learning for Collaborative Filtering\nTo turn our architecture into a deep learning model, the first step is to take the results of the embedding lookup and concatenate those activations together. This gives us a matrix which we can then pass through linear layers and nonlinearities in the usual way.\nSince we’ll be concatenating the embeddings, rather than taking their dot product, the two embedding matrices can have different sizes (i.e., different numbers of latent factors). fastai has a function get_emb_sz that returns recommended sizes for embedding matrices for your data, based on a heuristic that fast.ai has found tends to work well in practice:\n\n\nShow code\nembs = get_emb_sz(dls)\nembs\n\n\n[(944, 74), (1635, 101)]\n\n\nLet’s implement this class:\n\n\nShow code\nclass CollabNN(Module):\n    def __init__(self, user_sz, item_sz, y_range=(0,5.5), n_act=100):\n        self.user_factors = Embedding(*user_sz)\n        self.item_factors = Embedding(*item_sz)\n        self.layers = nn.Sequential(\n            nn.Linear(user_sz[1]+item_sz[1], n_act),\n            nn.ReLU(),\n            nn.Linear(n_act, 1))\n        self.y_range = y_range\n        \n    def forward(self, x):\n        embs = self.user_factors(x[:,0]),self.item_factors(x[:,1])\n        x = self.layers(torch.cat(embs, dim=1))\n        return sigmoid_range(x, *self.y_range)\n\n\nAnd use it to create a model:\n\n\nShow code\nmodel = CollabNN(*embs)\n\n\nCollabNN creates our Embedding layers in the same way as previous classes in this chapter, except that we now use the embs sizes. self.layers is identical to the mini-neural net we created in &lt;&gt; for MNIST. Then, in forward, we apply the embeddings, concatenate the results, and pass this through the mini-neural net. Finally, we apply sigmoid_range as we have in previous models.\nLet’s see if it trains:\n\n\nShow code\nlearn = Learner(dls, model, loss_func=MSELossFlat())\nlearn.fit_one_cycle(5, 5e-3, wd=0.01)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n0.940104\n0.959786\n00:15\n\n\n1\n0.893943\n0.905222\n00:14\n\n\n2\n0.865591\n0.875238\n00:14\n\n\n3\n0.800177\n0.867468\n00:14\n\n\n4\n0.760255\n0.867455\n00:14\n\n\n\n\n\nfastai provides this model in fastai.collab if you pass use_nn=True in your call to collab_learner (including calling get_emb_sz for you), and it lets you easily create more layers. For instance, here we’re creating two hidden layers, of size 100 and 50, respectively:\n\n\nShow code\nlearn = collab_learner(dls, use_nn=True, y_range=(0, 5.5), layers=[100,50])\nlearn.fit_one_cycle(5, 5e-3, wd=0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\ntime\n\n\n\n\n0\n1.002747\n0.972392\n00:16\n\n\n1\n0.926903\n0.922348\n00:16\n\n\n2\n0.877160\n0.893401\n00:16\n\n\n3\n0.838334\n0.865040\n00:16\n\n\n4\n0.781666\n0.864936\n00:16\n\n\n\n\n\nlearn.model is an object of type EmbeddingNN. Let’s take a look at fastai’s code for this class:\n\n\nShow code\n@delegates(TabularModel)\nclass EmbeddingNN(TabularModel):\n    def __init__(self, emb_szs, layers, **kwargs):\n        super().__init__(emb_szs, layers=layers, n_cont=0, out_sz=1, **kwargs)\n\n\nWow, that’s not a lot of code! This class inherits from TabularModel, which is where it gets all its functionality from. In __init__ it calls the same method in TabularModel, passing n_cont=0 and out_sz=1; other than that, it only passes along whatever arguments it received.\n\nSidebar: kwargs and Delegates\nEmbeddingNN includes **kwargs as a parameter to __init__. In Python **kwargs in a parameter list means “put any additional keyword arguments into a dict called kwargs. And **kwargs in an argument list means”insert all key/value pairs in the kwargs dict as named arguments here”. This approach is used in many popular libraries, such as matplotlib, in which the main plot function simply has the signature plot(*args, **kwargs). The plot documentation says “The kwargs are Line2D properties” and then lists those properties.\nWe’re using **kwargs in EmbeddingNN to avoid having to write all the arguments to TabularModel a second time, and keep them in sync. However, this makes our API quite difficult to work with, because now Jupyter Notebook doesn’t know what parameters are available. Consequently things like tab completion of parameter names and pop-up lists of signatures won’t work.\nfastai resolves this by providing a special @delegates decorator, which automatically changes the signature of the class or function (EmbeddingNN in this case) to insert all of its keyword arguments into the signature.\n\n\nEnd sidebar\nAlthough the results of EmbeddingNN are a bit worse than the dot product approach (which shows the power of carefully constructing an architecture for a domain), it does allow us to do something very important: we can now directly incorporate other user and movie information, date and time information, or any other information that may be relevant to the recommendation. That’s exactly what TabularModel does. In fact, we’ve now seen that EmbeddingNN is just a TabularModel, with n_cont=0 and out_sz=1. So, we’d better spend some time learning about TabularModel, and how to use it to get great results! We’ll do that in the next chapter."
  },
  {
    "objectID": "posts/08_collab.html#conclusion",
    "href": "posts/08_collab.html#conclusion",
    "title": "Collaborative Filtering Deep Dive",
    "section": "Conclusion",
    "text": "Conclusion\nFor our first non-computer vision application, we looked at recommendation systems and saw how gradient descent can learn intrinsic factors or biases about items from a history of ratings. Those can then give us information about the data.\nWe also built our first model in PyTorch. We will do a lot more of this in the next section of the book, but first, let’s finish our dive into the other general applications of deep learning, continuing with tabular data."
  },
  {
    "objectID": "posts/08_collab.html#questionnaire",
    "href": "posts/08_collab.html#questionnaire",
    "title": "Collaborative Filtering Deep Dive",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhat problem does collaborative filtering solve?\nHow does it solve it?\nWhy might a collaborative filtering predictive model fail to be a very useful recommendation system?\nWhat does a crosstab representation of collaborative filtering data look like?\nWrite the code to create a crosstab representation of the MovieLens data (you might need to do some web searching!).\nWhat is a latent factor? Why is it “latent”?\nWhat is a dot product? Calculate a dot product manually using pure Python with lists.\nWhat does pandas.DataFrame.merge do?\nWhat is an embedding matrix?\nWhat is the relationship between an embedding and a matrix of one-hot-encoded vectors?\nWhy do we need Embedding if we could use one-hot-encoded vectors for the same thing?\nWhat does an embedding contain before we start training (assuming we’re not using a pretained model)?\nCreate a class (without peeking, if possible!) and use it.\nWhat does x[:,0] return?\nRewrite the DotProduct class (without peeking, if possible!) and train a model with it.\nWhat is a good loss function to use for MovieLens? Why?\nWhat would happen if we used cross-entropy loss with MovieLens? How would we need to change the model?\nWhat is the use of bias in a dot product model?\nWhat is another name for weight decay?\nWrite the equation for weight decay (without peeking!).\nWrite the equation for the gradient of weight decay. Why does it help reduce weights?\nWhy does reducing weights lead to better generalization?\nWhat does argsort do in PyTorch?\nDoes sorting the movie biases give the same result as averaging overall movie ratings by movie? Why/why not?\nHow do you print the names and details of the layers in a model?\nWhat is the “bootstrapping problem” in collaborative filtering?\nHow could you deal with the bootstrapping problem for new users? For new movies?\nHow can feedback loops impact collaborative filtering systems?\nWhen using a neural network in collaborative filtering, why can we have different numbers of factors for movies and users?\nWhy is there an nn.Sequential in the CollabNN model?\nWhat kind of model should we use if we want to add metadata about users and items, or information such as date and time, to a collaborative filtering model?\n\n\nFurther Research\n\nTake a look at all the differences between the Embedding version of DotProductBias and the create_params version, and try to understand why each of those changes is required. If you’re not sure, try reverting each change to see what happens. (NB: even the type of brackets used in forward has changed!)\nFind three other areas where collaborative filtering is being used, and find out what the pros and cons of this approach are in those areas.\nComplete this notebook using the full MovieLens dataset, and compare your results to online benchmarks. See if you can improve your accuracy. Look on the book’s website and the fast.ai forum for ideas. Note that there are more columns in the full dataset—see if you can use those too (the next chapter might give you ideas).\nCreate a model for MovieLens that works with cross-entropy loss, and compare it to the model in this chapter."
  },
  {
    "objectID": "posts/10_nlp.html",
    "href": "posts/10_nlp.html",
    "title": "NLP Deep Dive: RNNs",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\nfrom IPython.display import display,HTML\n[[chapter_nlp]]\nIn &lt;&gt; we saw that deep learning can be used to get great results with natural language datasets. Our example relied on using a pretrained language model and fine-tuning it to classify reviews. That example highlighted a difference between transfer learning in NLP and computer vision: in general in NLP the pretrained model is trained on a different task.\nWhat we call a language model is a model that has been trained to guess what the next word in a text is (having read the ones before). This kind of task is called self-supervised learning: we do not need to give labels to our model, just feed it lots and lots of texts. It has a process to automatically get labels from the data, and this task isn’t trivial: to properly guess the next word in a sentence, the model will have to develop an understanding of the English (or other) language. Self-supervised learning can also be used in other domains; for instance, see “Self-Supervised Learning and Computer Vision” for an introduction to vision applications. Self-supervised learning is not usually used for the model that is trained directly, but instead is used for pretraining a model used for transfer learning.\nThe language model we used in &lt;&gt; to classify IMDb reviews was pretrained on Wikipedia. We got great results by directly fine-tuning this language model to a movie review classifier, but with one extra step, we can do even better. The Wikipedia English is slightly different from the IMDb English, so instead of jumping directly to the classifier, we could fine-tune our pretrained language model to the IMDb corpus and then use that as the base for our classifier.\nEven if our language model knows the basics of the language we are using in the task (e.g., our pretrained model is in English), it helps to get used to the style of the corpus we are targeting. It may be more informal language, or more technical, with new words to learn or different ways of composing sentences. In the case of the IMDb dataset, there will be lots of names of movie directors and actors, and often a less formal style of language than that seen in Wikipedia.\nWe already saw that with fastai, we can download a pretrained English language model and use it to get state-of-the-art results for NLP classification. (We expect pretrained models in many more languages to be available soon—they might well be available by the time you are reading this book, in fact.) So, why are we learning how to train a language model in detail?\nOne reason, of course, is that it is helpful to understand the foundations of the models that you are using. But there is another very practical reason, which is that you get even better results if you fine-tune the (sequence-based) language model prior to fine-tuning the classification model. For instance, for the IMDb sentiment analysis task, the dataset includes 50,000 additional movie reviews that do not have any positive or negative labels attached. Since there are 25,000 labeled reviews in the training set and 25,000 in the validation set, that makes 100,000 movie reviews altogether. We can use all of these reviews to fine-tune the pretrained language model, which was trained only on Wikipedia articles; this will result in a language model that is particularly good at predicting the next word of a movie review.\nThis is known as the Universal Language Model Fine-tuning (ULMFit) approach. The paper showed that this extra stage of fine-tuning of the language model, prior to transfer learning to a classification task, resulted in significantly better predictions. Using this approach, we have three stages for transfer learning in NLP, as summarized in &lt;&gt;.\nWe’ll now explore how to apply a neural network to this language modeling problem, using the concepts introduced in the last two chapters. But before reading further, pause and think about how you would approach this."
  },
  {
    "objectID": "posts/10_nlp.html#text-preprocessing",
    "href": "posts/10_nlp.html#text-preprocessing",
    "title": "NLP Deep Dive: RNNs",
    "section": "Text Preprocessing",
    "text": "Text Preprocessing\nIt’s not at all obvious how we’re going to use what we’ve learned so far to build a language model. Sentences can be different lengths, and documents can be very long. So, how can we predict the next word of a sentence using a neural network? Let’s find out!\nWe’ve already seen how categorical variables can be used as independent variables for a neural network. The approach we took for a single categorical variable was to:\n\nMake a list of all possible levels of that categorical variable (we’ll call this list the vocab).\nReplace each level with its index in the vocab.\nCreate an embedding matrix for this containing a row for each level (i.e., for each item of the vocab).\nUse this embedding matrix as the first layer of a neural network. (A dedicated embedding matrix can take as inputs the raw vocab indexes created in step 2; this is equivalent to but faster and more efficient than a matrix that takes as input one-hot-encoded vectors representing the indexes.)\n\nWe can do nearly the same thing with text! What is new is the idea of a sequence. First we concatenate all of the documents in our dataset into one big long string and split it into words, giving us a very long list of words (or “tokens”). Our independent variable will be the sequence of words starting with the first word in our very long list and ending with the second to last, and our dependent variable will be the sequence of words starting with the second word and ending with the last word.\nOur vocab will consist of a mix of common words that are already in the vocabulary of our pretrained model and new words specific to our corpus (cinematographic terms or actors names, for instance). Our embedding matrix will be built accordingly: for words that are in the vocabulary of our pretrained model, we will take the corresponding row in the embedding matrix of the pretrained model; but for new words we won’t have anything, so we will just initialize the corresponding row with a random vector.\nEach of the steps necessary to create a language model has jargon associated with it from the world of natural language processing, and fastai and PyTorch classes available to help. The steps are:\n\nTokenization:: Convert the text into a list of words (or characters, or substrings, depending on the granularity of your model)\nNumericalization:: Make a list of all of the unique words that appear (the vocab), and convert each word into a number, by looking up its index in the vocab\nLanguage model data loader creation:: fastai provides an LMDataLoader class which automatically handles creating a dependent variable that is offset from the independent variable by one token. It also handles some important details, such as how to shuffle the training data in such a way that the dependent and independent variables maintain their structure as required\nLanguage model creation:: We need a special kind of model that does something we haven’t seen before: handles input lists which could be arbitrarily big or small. There are a number of ways to do this; in this chapter we will be using a recurrent neural network (RNN). We will get to the details of these RNNs in the &lt;&gt;, but for now, you can think of it as just another deep neural network.\n\nLet’s take a look at how each step works in detail.\n\nTokenization\nWhen we said “convert the text into a list of words,” we left out a lot of details. For instance, what do we do with punctuation? How do we deal with a word like “don’t”? Is it one word, or two? What about long medical or chemical words? Should they be split into their separate pieces of meaning? How about hyphenated words? What about languages like German and Polish where we can create really long words from many, many pieces? What about languages like Japanese and Chinese that don’t use bases at all, and don’t really have a well-defined idea of word?\nBecause there is no one correct answer to these questions, there is no one approach to tokenization. There are three main approaches:\n\nWord-based:: Split a sentence on spaces, as well as applying language-specific rules to try to separate parts of meaning even when there are no spaces (such as turning “don’t” into “do n’t”). Generally, punctuation marks are also split into separate tokens.\nSubword based:: Split words into smaller parts, based on the most commonly occurring substrings. For instance, “occasion” might be tokenized as “o c ca sion.”\nCharacter-based:: Split a sentence into its individual characters.\n\nWe’ll be looking at word and subword tokenization here, and we’ll leave character-based tokenization for you to implement in the questionnaire at the end of this chapter.\n\njargon: token: One element of a list created by the tokenization process. It could be a word, part of a word (a subword), or a single character.\n\n\n\nWord Tokenization with fastai\nRather than providing its own tokenizers, fastai instead provides a consistent interface to a range of tokenizers in external libraries. Tokenization is an active field of research, and new and improved tokenizers are coming out all the time, so the defaults that fastai uses change too. However, the API and options shouldn’t change too much, since fastai tries to maintain a consistent API even as the underlying technology changes.\nLet’s try it out with the IMDb dataset that we used in &lt;&gt;:\n\n\nShow code\nfrom fastai.text.all import *\npath = untar_data(URLs.IMDB)\n\n\nWe’ll need to grab the text files in order to try out a tokenizer. Just like get_image_files, which we’ve used many times already, gets all the image files in a path, get_text_files gets all the text files in a path. We can also optionally pass folders to restrict the search to a particular list of subfolders:\n\n\nShow code\nfiles = get_text_files(path, folders = ['train', 'test', 'unsup'])\n\n\nHere’s a review that we’ll tokenize (we’ll just print the start of it here to save space):\n\n\nShow code\ntxt = files[0].open().read(); txt[:75]\n\n\n'This movie, which I just discovered at the video store, has apparently sit '\n\n\nAs we write this book, the default English word tokenizer for fastai uses a library called spaCy. It has a sophisticated rules engine with special rules for URLs, individual special English words, and much more. Rather than directly using SpacyTokenizer, however, we’ll use WordTokenizer, since that will always point to fastai’s current default word tokenizer (which may not necessarily be spaCy, depending when you’re reading this).\nLet’s try it out. We’ll use fastai’s coll_repr(collection, n) function to display the results. This displays the first n items of collection, along with the full size—it’s what L uses by default. Note that fastai’s tokenizers take a collection of documents to tokenize, so we have to wrap txt in a list:\n\n\nShow code\nspacy = WordTokenizer()\ntoks = first(spacy([txt]))\nprint(coll_repr(toks, 30))\n\n\n(#201) ['This','movie',',','which','I','just','discovered','at','the','video','store',',','has','apparently','sit','around','for','a','couple','of','years','without','a','distributor','.','It',\"'s\",'easy','to','see'...]\n\n\nAs you see, spaCy has mainly just separated out the words and punctuation. But it does something else here too: it has split “it’s” into “it” and “’s”. That makes intuitive sense; these are separate words, really. Tokenization is a surprisingly subtle task, when you think about all the little details that have to be handled. Fortunately, spaCy handles these pretty well for us—for instance, here we see that “.” is separated when it terminates a sentence, but not in an acronym or number:\n\n\nShow code\nfirst(spacy(['The U.S. dollar $1 is $1.00.']))\n\n\n(#9) ['The','U.S.','dollar','$','1','is','$','1.00','.']\n\n\nfastai then adds some additional functionality to the tokenization process with the Tokenizer class:\n\n\nShow code\ntkn = Tokenizer(spacy)\nprint(coll_repr(tkn(txt), 31))\n\n\n(#228) ['xxbos','xxmaj','this','movie',',','which','i','just','discovered','at','the','video','store',',','has','apparently','sit','around','for','a','couple','of','years','without','a','distributor','.','xxmaj','it',\"'s\",'easy'...]\n\n\nNotice that there are now some tokens that start with the characters “xx”, which is not a common word prefix in English. These are special tokens.\nFor example, the first item in the list, xxbos, is a special token that indicates the start of a new text (“BOS” is a standard NLP acronym that means “beginning of stream”). By recognizing this start token, the model will be able to learn it needs to “forget” what was said previously and focus on upcoming words.\nThese special tokens don’t come from spaCy directly. They are there because fastai adds them by default, by applying a number of rules when processing text. These rules are designed to make it easier for a model to recognize the important parts of a sentence. In a sense, we are translating the original English language sequence into a simplified tokenized language—a language that is designed to be easy for a model to learn.\nFor instance, the rules will replace a sequence of four exclamation points with a special repeated character token, followed by the number four, and then a single exclamation point. In this way, the model’s embedding matrix can encode information about general concepts such as repeated punctuation rather than requiring a separate token for every number of repetitions of every punctuation mark. Similarly, a capitalized word will be replaced with a special capitalization token, followed by the lowercase version of the word. This way, the embedding matrix only needs the lowercase versions of the words, saving compute and memory resources, but can still learn the concept of capitalization.\nHere are some of the main special tokens you’ll see:\n\nxxbos:: Indicates the beginning of a text (here, a review)\nxxmaj:: Indicates the next word begins with a capital (since we lowercased everything)\nxxunk:: Indicates the word is unknown\n\nTo see the rules that were used, you can check the default rules:\n\n\nShow code\ndefaults.text_proc_rules\n\n\n[&lt;function fastai.text.core.fix_html(x)&gt;,\n &lt;function fastai.text.core.replace_rep(t)&gt;,\n &lt;function fastai.text.core.replace_wrep(t)&gt;,\n &lt;function fastai.text.core.spec_add_spaces(t)&gt;,\n &lt;function fastai.text.core.rm_useless_spaces(t)&gt;,\n &lt;function fastai.text.core.replace_all_caps(t)&gt;,\n &lt;function fastai.text.core.replace_maj(t)&gt;,\n &lt;function fastai.text.core.lowercase(t, add_bos=True, add_eos=False)&gt;]\n\n\nAs always, you can look at the source code of each of them in a notebook by typing:\n??replace_rep\nHere is a brief summary of what each does:\n\nfix_html:: Replaces special HTML characters with a readable version (IMDb reviews have quite a few of these)\nreplace_rep:: Replaces any character repeated three times or more with a special token for repetition (xxrep), the number of times it’s repeated, then the character\nreplace_wrep:: Replaces any word repeated three times or more with a special token for word repetition (xxwrep), the number of times it’s repeated, then the word\nspec_add_spaces:: Adds spaces around / and #\nrm_useless_spaces:: Removes all repetitions of the space character\nreplace_all_caps:: Lowercases a word written in all caps and adds a special token for all caps (xxup) in front of it\nreplace_maj:: Lowercases a capitalized word and adds a special token for capitalized (xxmaj) in front of it\nlowercase:: Lowercases all text and adds a special token at the beginning (xxbos) and/or the end (xxeos)\n\nLet’s take a look at a few of them in action:\n\n\nShow code\ncoll_repr(tkn('&copy;   Fast.ai www.fast.ai/INDEX'), 31)\n\n\n\"(#11) ['xxbos','©','xxmaj','fast.ai','xxrep','3','w','.fast.ai','/','xxup','index'...]\"\n\n\nNow let’s take a look at how subword tokenization would work.\n\n\nSubword Tokenization\nIn addition to the word tokenization approach seen in the last section, another popular tokenization method is subword tokenization. Word tokenization relies on an assumption that spaces provide a useful separation of components of meaning in a sentence. However, this assumption is not always appropriate. For instance, consider this sentence: 我的名字是郝杰瑞 (“My name is Jeremy Howard” in Chinese). That’s not going to work very well with a word tokenizer, because there are no spaces in it! Languages like Chinese and Japanese don’t use spaces, and in fact they don’t even have a well-defined concept of a “word.” There are also languages, like Turkish and Hungarian, that can add many subwords together without spaces, creating very long words that include a lot of separate pieces of information.\nTo handle these cases, it’s generally best to use subword tokenization. This proceeds in two steps:\n\nAnalyze a corpus of documents to find the most commonly occurring groups of letters. These become the vocab.\nTokenize the corpus using this vocab of subword units.\n\nLet’s look at an example. For our corpus, we’ll use the first 2,000 movie reviews:\n\n\nShow code\ntxts = L(o.open().read() for o in files[:2000])\n\n\nWe instantiate our tokenizer, passing in the size of the vocab we want to create, and then we need to “train” it. That is, we need to have it read our documents and find the common sequences of characters to create the vocab. This is done with setup. As we’ll see shortly, setup is a special fastai method that is called automatically in our usual data processing pipelines. Since we’re doing everything manually at the moment, however, we have to call it ourselves. Here’s a function that does these steps for a given vocab size, and shows an example output:\n\n\nShow code\ndef subword(sz):\n    sp = SubwordTokenizer(vocab_sz=sz)\n    sp.setup(txts)\n    return ' '.join(first(sp([txt]))[:40])\n\n\nLet’s try it out:\n\n\nShow code\nsubword(1000)\n\n\n\n\n\n'▁This ▁movie , ▁which ▁I ▁just ▁dis c over ed ▁at ▁the ▁video ▁st or e , ▁has ▁a p par ent ly ▁s it ▁around ▁for ▁a ▁couple ▁of ▁years ▁without ▁a ▁dis t ri but or . ▁It'\n\n\nWhen using fastai’s subword tokenizer, the special character ▁ represents a space character in the original text.\nIf we use a smaller vocab, then each token will represent fewer characters, and it will take more tokens to represent a sentence:\n\n\nShow code\nsubword(200)\n\n\n\n\n\n'▁ T h i s ▁movie , ▁w h i ch ▁I ▁ j us t ▁ d i s c o ver ed ▁a t ▁the ▁ v id e o ▁ st or e , ▁h a s'\n\n\nOn the other hand, if we use a larger vocab, then most common English words will end up in the vocab themselves, and we will not need as many to represent a sentence:\n\n\nShow code\nsubword(10000)\n\n\n\n\n\n\"▁This ▁movie , ▁which ▁I ▁just ▁discover ed ▁at ▁the ▁video ▁store , ▁has ▁apparently ▁sit ▁around ▁for ▁a ▁couple ▁of ▁years ▁without ▁a ▁distributor . ▁It ' s ▁easy ▁to ▁see ▁why . ▁The ▁story ▁of ▁two ▁friends ▁living\"\n\n\nPicking a subword vocab size represents a compromise: a larger vocab means fewer tokens per sentence, which means faster training, less memory, and less state for the model to remember; but on the downside, it means larger embedding matrices, which require more data to learn.\nOverall, subword tokenization provides a way to easily scale between character tokenization (i.e., using a small subword vocab) and word tokenization (i.e., using a large subword vocab), and handles every human language without needing language-specific algorithms to be developed. It can even handle other “languages” such as genomic sequences or MIDI music notation! For this reason, in the last year its popularity has soared, and it seems likely to become the most common tokenization approach (it may well already be, by the time you read this!).\nOnce our texts have been split into tokens, we need to convert them to numbers. We’ll look at that next.\n\n\nNumericalization with fastai\nNumericalization is the process of mapping tokens to integers. The steps are basically identical to those necessary to create a Category variable, such as the dependent variable of digits in MNIST:\n\nMake a list of all possible levels of that categorical variable (the vocab).\nReplace each level with its index in the vocab.\n\nLet’s take a look at this in action on the word-tokenized text we saw earlier:\n\n\nShow code\ntoks = tkn(txt)\nprint(coll_repr(tkn(txt), 31))\n\n\n(#228) ['xxbos','xxmaj','this','movie',',','which','i','just','discovered','at','the','video','store',',','has','apparently','sit','around','for','a','couple','of','years','without','a','distributor','.','xxmaj','it',\"'s\",'easy'...]\n\n\nJust like with SubwordTokenizer, we need to call setup on Numericalize; this is how we create the vocab. That means we’ll need our tokenized corpus first. Since tokenization takes a while, it’s done in parallel by fastai; but for this manual walkthrough, we’ll use a small subset:\n\n\nShow code\ntoks200 = txts[:200].map(tkn)\ntoks200[0]\n\n\n(#228) ['xxbos','xxmaj','this','movie',',','which','i','just','discovered','at'...]\n\n\nWe can pass this to setup to create our vocab:\n\n\nShow code\nnum = Numericalize()\nnum.setup(toks200)\ncoll_repr(num.vocab,20)\n\n\n\"(#2000) ['xxunk','xxpad','xxbos','xxeos','xxfld','xxrep','xxwrep','xxup','xxmaj','the','.',',','a','and','of','to','is','in','i','it'...]\"\n\n\nOur special rules tokens appear first, and then every word appears once, in frequency order. The defaults to Numericalize are min_freq=3,max_vocab=60000. max_vocab=60000 results in fastai replacing all words other than the most common 60,000 with a special unknown word token, xxunk. This is useful to avoid having an overly large embedding matrix, since that can slow down training and use up too much memory, and can also mean that there isn’t enough data to train useful representations for rare words. However, this last issue is better handled by setting min_freq; the default min_freq=3 means that any word appearing less than three times is replaced with xxunk.\nfastai can also numericalize your dataset using a vocab that you provide, by passing a list of words as the vocab parameter.\nOnce we’ve created our Numericalize object, we can use it as if it were a function:\n\n\nShow code\nnums = num(toks)[:20]; nums\n\n\ntensor([  2,   8,  21,  28,  11,  90,  18,  59,   0,  45,   9, 351, 499,  11,  72, 533, 584, 146,  29,  12])\n\n\nThis time, our tokens have been converted to a tensor of integers that our model can receive. We can check that they map back to the original text:\n\n\nShow code\n' '.join(num.vocab[o] for o in nums)\n\n\n'xxbos xxmaj this movie , which i just xxunk at the video store , has apparently sit around for a'\n\n\nNow that we have numbers, we need to put them in batches for our model.\n\n\nPutting Our Texts into Batches for a Language Model\nWhen dealing with images, we needed to resize them all to the same height and width before grouping them together in a mini-batch so they could stack together efficiently in a single tensor. Here it’s going to be a little different, because one cannot simply resize text to a desired length. Also, we want our language model to read text in order, so that it can efficiently predict what the next word is. This means that each new batch should begin precisely where the previous one left off.\nSuppose we have the following text:\n\n: In this chapter, we will go back over the example of classifying movie reviews we studied in chapter 1 and dig deeper under the surface. First we will look at the processing steps necessary to convert text into numbers and how to customize it. By doing this, we’ll have another example of the PreProcessor used in the data block API.we will study how we build a language model and train it for a while.\n\nThe tokenization process will add special tokens and deal with punctuation to return this text:\n\n: xxbos xxmaj in this chapter , we will go back over the example of classifying movie reviews we studied in chapter 1 and dig deeper under the surface . xxmaj first we will look at the processing steps necessary to convert text into numbers and how to customize it . xxmaj by doing this , we ’ll have another example of the preprocessor used in the data block xxup api . xxmaj then we will study how we build a language model and train it for a while .\n\nWe now have 90 tokens, separated by spaces. Let’s say we want a batch size of 6. We need to break this text into 6 contiguous parts of length 15:\n\n\nShow code\n#hide_input\nstream = \"In this chapter, we will go back over the example of classifying movie reviews we studied in chapter 1 and dig deeper under the surface. First we will look at the processing steps necessary to convert text into numbers and how to customize it. By doing this, we'll have another example of the PreProcessor used in the data block API.\\nThen we will study how we build a language model and train it for a while.\"\ntokens = tkn(stream)\nbs,seq_len = 6,15\nd_tokens = np.array([tokens[i*seq_len:(i+1)*seq_len] for i in range(bs)])\ndf = pd.DataFrame(d_tokens)\ndisplay(HTML(df.to_html(index=False,header=None)))\n\n\n\n\n\nxxbos\nxxmaj\nin\nthis\nchapter\n,\nwe\nwill\ngo\nback\nover\nthe\nexample\nof\nclassifying\n\n\nmovie\nreviews\nwe\nstudied\nin\nchapter\n1\nand\ndig\ndeeper\nunder\nthe\nsurface\n.\nxxmaj\n\n\nfirst\nwe\nwill\nlook\nat\nthe\nprocessing\nsteps\nnecessary\nto\nconvert\ntext\ninto\nnumbers\nand\n\n\nhow\nto\ncustomize\nit\n.\nxxmaj\nby\ndoing\nthis\n,\nwe\n'll\nhave\nanother\nexample\n\n\nof\nthe\npreprocessor\nused\nin\nthe\ndata\nblock\nxxup\napi\n.\n\\n\nxxmaj\nthen\nwe\n\n\nwill\nstudy\nhow\nwe\nbuild\na\nlanguage\nmodel\nand\ntrain\nit\nfor\na\nwhile\n.\n\n\n\n\n\nIn a perfect world, we could then give this one batch to our model. But that approach doesn’t scale, because outside of this toy example it’s unlikely that a single batch containing all the texts would fit in our GPU memory (here we have 90 tokens, but all the IMDb reviews together give several million).\nSo, we need to divide this array more finely into subarrays of a fixed sequence length. It is important to maintain order within and across these subarrays, because we will use a model that maintains a state so that it remembers what it read previously when predicting what comes next.\nGoing back to our previous example with 6 batches of length 15, if we chose a sequence length of 5, that would mean we first feed the following array:\n\n\nShow code\n#hide_input\nbs,seq_len = 6,5\nd_tokens = np.array([tokens[i*15:i*15+seq_len] for i in range(bs)])\ndf = pd.DataFrame(d_tokens)\ndisplay(HTML(df.to_html(index=False,header=None)))\n\n\n\n\n\nxxbos\nxxmaj\nin\nthis\nchapter\n\n\nmovie\nreviews\nwe\nstudied\nin\n\n\nfirst\nwe\nwill\nlook\nat\n\n\nhow\nto\ncustomize\nit\n.\n\n\nof\nthe\npreprocessor\nused\nin\n\n\nwill\nstudy\nhow\nwe\nbuild\n\n\n\n\n\nThen this one:\n\n\nShow code\n#hide_input\nbs,seq_len = 6,5\nd_tokens = np.array([tokens[i*15+seq_len:i*15+2*seq_len] for i in range(bs)])\ndf = pd.DataFrame(d_tokens)\ndisplay(HTML(df.to_html(index=False,header=None)))\n\n\n\n\n\n,\nwe\nwill\ngo\nback\n\n\nchapter\n1\nand\ndig\ndeeper\n\n\nthe\nprocessing\nsteps\nnecessary\nto\n\n\nxxmaj\nby\ndoing\nthis\n,\n\n\nthe\ndata\nblock\nxxup\napi\n\n\na\nlanguage\nmodel\nand\ntrain\n\n\n\n\n\nAnd finally:\n\n\nShow code\n#hide_input\nbs,seq_len = 6,5\nd_tokens = np.array([tokens[i*15+10:i*15+15] for i in range(bs)])\ndf = pd.DataFrame(d_tokens)\ndisplay(HTML(df.to_html(index=False,header=None)))\n\n\n\n\n\nover\nthe\nexample\nof\nclassifying\n\n\nunder\nthe\nsurface\n.\nxxmaj\n\n\nconvert\ntext\ninto\nnumbers\nand\n\n\nwe\n'll\nhave\nanother\nexample\n\n\n.\n\\n\nxxmaj\nthen\nwe\n\n\nit\nfor\na\nwhile\n.\n\n\n\n\n\nGoing back to our movie reviews dataset, the first step is to transform the individual texts into a stream by concatenating them together. As with images, it’s best to randomize the order of the inputs, so at the beginning of each epoch we will shuffle the entries to make a new stream (we shuffle the order of the documents, not the order of the words inside them, or the texts would not make sense anymore!).\nWe then cut this stream into a certain number of batches (which is our batch size). For instance, if the stream has 50,000 tokens and we set a batch size of 10, this will give us 10 mini-streams of 5,000 tokens. What is important is that we preserve the order of the tokens (so from 1 to 5,000 for the first mini-stream, then from 5,001 to 10,000…), because we want the model to read continuous rows of text (as in the preceding example). An xxbos token is added at the start of each during preprocessing, so that the model knows when it reads the stream when a new entry is beginning.\nSo to recap, at every epoch we shuffle our collection of documents and concatenate them into a stream of tokens. We then cut that stream into a batch of fixed-size consecutive mini-streams. Our model will then read the mini-streams in order, and thanks to an inner state, it will produce the same activation whatever sequence length we picked.\nThis is all done behind the scenes by the fastai library when we create an LMDataLoader. We do this by first applying our Numericalize object to the tokenized texts:\n\n\nShow code\nnums200 = toks200.map(num)\n\n\nand then passing that to LMDataLoader:\n\n\nShow code\ndl = LMDataLoader(nums200)\n\n\nLet’s confirm that this gives the expected results, by grabbing the first batch:\n\n\nShow code\nx,y = first(dl)\nx.shape,y.shape\n\n\n(torch.Size([64, 72]), torch.Size([64, 72]))\n\n\nand then looking at the first row of the independent variable, which should be the start of the first text:\n\n\nShow code\n' '.join(num.vocab[o] for o in x[0][:20])\n\n\n'xxbos xxmaj this movie , which i just xxunk at the video store , has apparently sit around for a'\n\n\nThe dependent variable is the same thing offset by one token:\n\n\nShow code\n' '.join(num.vocab[o] for o in y[0][:20])\n\n\n'xxmaj this movie , which i just xxunk at the video store , has apparently sit around for a couple'\n\n\nThis concludes all the preprocessing steps we need to apply to our data. We are now ready to train our text classifier."
  },
  {
    "objectID": "posts/10_nlp.html#training-a-text-classifier",
    "href": "posts/10_nlp.html#training-a-text-classifier",
    "title": "NLP Deep Dive: RNNs",
    "section": "Training a Text Classifier",
    "text": "Training a Text Classifier\nAs we saw at the beginning of this chapter, there are two steps to training a state-of-the-art text classifier using transfer learning: first we need to fine-tune our language model pretrained on Wikipedia to the corpus of IMDb reviews, and then we can use that model to train a classifier.\nAs usual, let’s start with assembling our data.\n\nLanguage Model Using DataBlock\nfastai handles tokenization and numericalization automatically when TextBlock is passed to DataBlock. All of the arguments that can be passed to Tokenize and Numericalize can also be passed to TextBlock. In the next chapter we’ll discuss the easiest ways to run each of these steps separately, to ease debugging—but you can always just debug by running them manually on a subset of your data as shown in the previous sections. And don’t forget about DataBlock’s handy summary method, which is very useful for debugging data issues.\nHere’s how we use TextBlock to create a language model, using fastai’s defaults:\n\n\nShow code\nget_imdb = partial(get_text_files, folders=['train', 'test', 'unsup'])\n\ndls_lm = DataBlock(\n    blocks=TextBlock.from_folder(path, is_lm=True),\n    get_items=get_imdb, splitter=RandomSplitter(0.1)\n).dataloaders(path, path=path, bs=128, seq_len=80)\n\n\nOne thing that’s different to previous types we’ve used in DataBlock is that we’re not just using the class directly (i.e., TextBlock(...), but instead are calling a class method. A class method is a Python method that, as the name suggests, belongs to a class rather than an object. (Be sure to search online for more information about class methods if you’re not familiar with them, since they’re commonly used in many Python libraries and applications; we’ve used them a few times previously in the book, but haven’t called attention to them.) The reason that TextBlock is special is that setting up the numericalizer’s vocab can take a long time (we have to read and tokenize every document to get the vocab). To be as efficient as possible it performs a few optimizations:\n\nIt saves the tokenized documents in a temporary folder, so it doesn’t have to tokenize them more than once\nIt runs multiple tokenization processes in parallel, to take advantage of your computer’s CPUs\n\nWe need to tell TextBlock how to access the texts, so that it can do this initial preprocessing—that’s what from_folder does.\nshow_batch then works in the usual way:\n\n\nShow code\ndls_lm.show_batch(max_n=2)\n\n\n\n\n\n\ntext\ntext_\n\n\n\n\n0\nxxbos xxmaj it 's awesome ! xxmaj in xxmaj story xxmaj mode , your going from punk to pro . xxmaj you have to complete goals that involve skating , driving , and walking . xxmaj you create your own skater and give it a name , and you can make it look stupid or realistic . xxmaj you are with your friend xxmaj eric throughout the game until he betrays you and gets you kicked off of the skateboard\nxxmaj it 's awesome ! xxmaj in xxmaj story xxmaj mode , your going from punk to pro . xxmaj you have to complete goals that involve skating , driving , and walking . xxmaj you create your own skater and give it a name , and you can make it look stupid or realistic . xxmaj you are with your friend xxmaj eric throughout the game until he betrays you and gets you kicked off of the skateboard xxunk\n\n\n1\nwhat xxmaj i 've read , xxmaj death xxmaj bed is based on an actual dream , xxmaj george xxmaj barry , the director , successfully transferred dream to film , only a genius could accomplish such a task . \\n\\n xxmaj old mansions make for good quality horror , as do portraits , not sure what to make of the killer bed with its killer yellow liquid , quite a bizarre dream , indeed . xxmaj also , this\nxxmaj i 've read , xxmaj death xxmaj bed is based on an actual dream , xxmaj george xxmaj barry , the director , successfully transferred dream to film , only a genius could accomplish such a task . \\n\\n xxmaj old mansions make for good quality horror , as do portraits , not sure what to make of the killer bed with its killer yellow liquid , quite a bizarre dream , indeed . xxmaj also , this is\n\n\n\n\n\nNow that our data is ready, we can fine-tune the pretrained language model.\n\n\nFine-Tuning the Language Model\nTo convert the integer word indices into activations that we can use for our neural network, we will use embeddings, just like we did for collaborative filtering and tabular modeling. Then we’ll feed those embeddings into a recurrent neural network (RNN), using an architecture called AWD-LSTM (we will show you how to write such a model from scratch in &lt;&gt;). As we discussed earlier, the embeddings in the pretrained model are merged with random embeddings added for words that weren’t in the pretraining vocabulary. This is handled automatically inside language_model_learner:\n\n\nShow code\nlearn = language_model_learner(\n    dls_lm, AWD_LSTM, drop_mult=0.3, \n    metrics=[accuracy, Perplexity()]).to_fp16()\n\n\nThe loss function used by default is cross-entropy loss, since we essentially have a classification problem (the different categories being the words in our vocab). The perplexity metric used here is often used in NLP for language models: it is the exponential of the loss (i.e., torch.exp(cross_entropy)). We also include the accuracy metric, to see how many times our model is right when trying to predict the next word, since cross-entropy (as we’ve seen) is both hard to interpret, and tells us more about the model’s confidence than its accuracy.\nLet’s go back to the process diagram from the beginning of this chapter. The first arrow has been completed for us and made available as a pretrained model in fastai, and we’ve just built the DataLoaders and Learner for the second stage. Now we’re ready to fine-tune our language model!\n\nIt takes quite a while to train each epoch, so we’ll be saving the intermediate model results during the training process. Since fine_tune doesn’t do that for us, we’ll use fit_one_cycle. Just like vision_learner, language_model_learner automatically calls freeze when using a pretrained model (which is the default), so this will only train the embeddings (the only part of the model that contains randomly initialized weights—i.e., embeddings for words that are in our IMDb vocab, but aren’t in the pretrained model vocab):\n\n\nShow code\nlearn.fit_one_cycle(1, 2e-2)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\nperplexity\ntime\n\n\n\n\n0\n4.120048\n3.912788\n0.299565\n50.038246\n11:39\n\n\n\n\n\nThis model takes a while to train, so it’s a good opportunity to talk about saving intermediary results.\n\n\nSaving and Loading Models\nYou can easily save the state of your model like so:\n\n\nShow code\nlearn.save('1epoch')\n\n\nThis will create a file in learn.path/models/ named 1epoch.pth. If you want to load your model in another machine after creating your Learner the same way, or resume training later, you can load the content of this file with:\n\n\nShow code\nlearn = learn.load('1epoch')\n\n\nOnce the initial training has completed, we can continue fine-tuning the model after unfreezing:\n\n\nShow code\nlearn.unfreeze()\nlearn.fit_one_cycle(10, 2e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\nperplexity\ntime\n\n\n\n\n0\n3.893486\n3.772820\n0.317104\n43.502548\n12:37\n\n\n1\n3.820479\n3.717197\n0.323790\n41.148880\n12:30\n\n\n2\n3.735622\n3.659760\n0.330321\n38.851997\n12:09\n\n\n3\n3.677086\n3.624794\n0.333960\n37.516987\n12:12\n\n\n4\n3.636646\n3.601300\n0.337017\n36.645859\n12:05\n\n\n5\n3.553636\n3.584241\n0.339355\n36.026001\n12:04\n\n\n6\n3.507634\n3.571892\n0.341353\n35.583862\n12:08\n\n\n7\n3.444101\n3.565988\n0.342194\n35.374371\n12:08\n\n\n8\n3.398597\n3.566283\n0.342647\n35.384815\n12:11\n\n\n9\n3.375563\n3.568166\n0.342528\n35.451500\n12:05\n\n\n\n\n\nOnce this is done, we save all of our model except the final layer that converts activations to probabilities of picking each token in our vocabulary. The model not including the final layer is called the encoder. We can save it with save_encoder:\n\n\nShow code\nlearn.save_encoder('finetuned')\n\n\n\njargon: Encoder: The model not including the task-specific final layer(s). This term means much the same thing as body when applied to vision CNNs, but “encoder” tends to be more used for NLP and generative models.\n\nThis completes the second stage of the text classification process: fine-tuning the language model. We can now use it to fine-tune a classifier using the IMDb sentiment labels.\n\n\nText Generation\nBefore we move on to fine-tuning the classifier, let’s quickly try something different: using our model to generate random reviews. Since it’s trained to guess what the next word of the sentence is, we can use the model to write new reviews:\n\n\nShow code\nTEXT = \"I liked this movie because\"\nN_WORDS = 40\nN_SENTENCES = 2\npreds = [learn.predict(TEXT, N_WORDS, temperature=0.75) \n         for _ in range(N_SENTENCES)]\n\n\n\n\n\n\n\n\n\n\nShow code\nprint(\"\\n\".join(preds))\n\n\ni liked this movie because of its story and characters . The story line was very strong , very good for a sci - fi film . The main character , Alucard , was very well developed and brought the whole story\ni liked this movie because i like the idea of the premise of the movie , the ( very ) convenient virus ( which , when you have to kill a few people , the \" evil \" machine has to be used to protect\n\n\nAs you can see, we add some randomness (we pick a random word based on the probabilities returned by the model) so we don’t get exactly the same review twice. Our model doesn’t have any programmed knowledge of the structure of a sentence or grammar rules, yet it has clearly learned a lot about English sentences: we can see it capitalizes properly (I is just transformed to i because our rules require two characters or more to consider a word as capitalized, so it’s normal to see it lowercased) and is using consistent tense. The general review makes sense at first glance, and it’s only if you read carefully that you can notice something is a bit off. Not bad for a model trained in a couple of hours!\nBut our end goal wasn’t to train a model to generate reviews, but to classify them… so let’s use this model to do just that.\n\n\nCreating the Classifier DataLoaders\nWe’re now moving from language model fine-tuning to classifier fine-tuning. To recap, a language model predicts the next word of a document, so it doesn’t need any external labels. A classifier, however, predicts some external label—in the case of IMDb, it’s the sentiment of a document.\nThis means that the structure of our DataBlock for NLP classification will look very familiar. It’s actually nearly the same as we’ve seen for the many image classification datasets we’ve worked with:\n\n\nShow code\ndls_clas = DataBlock(\n    blocks=(TextBlock.from_folder(path, vocab=dls_lm.vocab),CategoryBlock),\n    get_y = parent_label,\n    get_items=partial(get_text_files, folders=['train', 'test']),\n    splitter=GrandparentSplitter(valid_name='test')\n).dataloaders(path, path=path, bs=128, seq_len=72)\n\n\nJust like with image classification, show_batch shows the dependent variable (sentiment, in this case) with each independent variable (movie review text):\n\n\nShow code\ndls_clas.show_batch(max_n=3)\n\n\n\n\n\n\ntext\ncategory\n\n\n\n\n0\nxxbos i rate this movie with 3 skulls , only coz the girls knew how to scream , this could 've been a better movie , if actors were better , the twins were xxup ok , i believed they were evil , but the eldest and youngest brother , they sucked really bad , it seemed like they were reading the scripts instead of acting them … . spoiler : if they 're vampire 's why do they freeze the blood ? vampires ca n't drink frozen blood , the sister in the movie says let 's drink her while she is alive … .but then when they 're moving to another house , they take on a cooler they 're frozen blood . end of spoiler \\n\\n it was a huge waste of time , and that made me mad coz i read all the reviews of how\nneg\n\n\n1\nxxbos i have read all of the xxmaj love xxmaj come xxmaj softly books . xxmaj knowing full well that movies can not use all aspects of the book , but generally they at least have the main point of the book . i was highly disappointed in this movie . xxmaj the only thing that they have in this movie that is in the book is that xxmaj missy 's father comes to xxunk in the book both parents come ) . xxmaj that is all . xxmaj the story line was so twisted and far fetch and yes , sad , from the book , that i just could n't enjoy it . xxmaj even if i did n't read the book it was too sad . i do know that xxmaj pioneer life was rough , but the whole movie was a downer . xxmaj the rating\nneg\n\n\n2\nxxbos xxmaj this , for lack of a better term , movie is lousy . xxmaj where do i start … … \\n\\n xxmaj cinemaphotography - xxmaj this was , perhaps , the worst xxmaj i 've seen this year . xxmaj it looked like the camera was being tossed from camera man to camera man . xxmaj maybe they only had one camera . xxmaj it gives you the sensation of being a volleyball . \\n\\n xxmaj there are a bunch of scenes , haphazardly , thrown in with no continuity at all . xxmaj when they did the ' split screen ' , it was absurd . xxmaj everything was squished flat , it looked ridiculous . \\n\\n xxmaj the color tones were way off . xxmaj these people need to learn how to balance a camera . xxmaj this ' movie ' is poorly made , and\nneg\n\n\n\n\n\nLooking at the DataBlock definition, every piece is familiar from previous data blocks we’ve built, with two important exceptions:\n\nTextBlock.from_folder no longer has the is_lm=True parameter.\nWe pass the vocab we created for the language model fine-tuning.\n\nThe reason that we pass the vocab of the language model is to make sure we use the same correspondence of token to index. Otherwise the embeddings we learned in our fine-tuned language model won’t make any sense to this model, and the fine-tuning step won’t be of any use.\nBy passing is_lm=False (or not passing is_lm at all, since it defaults to False) we tell TextBlock that we have regular labeled data, rather than using the next tokens as labels. There is one challenge we have to deal with, however, which is to do with collating multiple documents into a mini-batch. Let’s see with an example, by trying to create a mini-batch containing the first 10 documents. First we’ll numericalize them:\n\n\nShow code\nnums_samp = toks200[:10].map(num)\n\n\nLet’s now look at how many tokens each of these 10 movie reviews have:\n\n\nShow code\nnums_samp.map(len)\n\n\n(#10) [228,238,121,290,196,194,533,124,581,155]\n\n\nRemember, PyTorch DataLoaders need to collate all the items in a batch into a single tensor, and a single tensor has a fixed shape (i.e., it has some particular length on every axis, and all items must be consistent). This should sound familiar: we had the same issue with images. In that case, we used cropping, padding, and/or squishing to make all the inputs the same size. Cropping might not be a good idea for documents, because it seems likely we’d remove some key information (having said that, the same issue is true for images, and we use cropping there; data augmentation hasn’t been well explored for NLP yet, so perhaps there are actually opportunities to use cropping in NLP too!). You can’t really “squish” a document. So that leaves padding!\nWe will expand the shortest texts to make them all the same size. To do this, we use a special padding token that will be ignored by our model. Additionally, to avoid memory issues and improve performance, we will batch together texts that are roughly the same lengths (with some shuffling for the training set). We do this by (approximately, for the training set) sorting the documents by length prior to each epoch. The result of this is that the documents collated into a single batch will tend to be of similar lengths. We won’t pad every batch to the same size, but will instead use the size of the largest document in each batch as the target size. (It is possible to do something similar with images, which is especially useful for irregularly sized rectangular images, but at the time of writing no library provides good support for this yet, and there aren’t any papers covering it. It’s something we’re planning to add to fastai soon, however, so keep an eye on the book’s website; we’ll add information about this as soon as we have it working well.)\nThe sorting and padding are automatically done by the data block API for us when using a TextBlock, with is_lm=False. (We don’t have this same issue for language model data, since we concatenate all the documents together first, and then split them into equally sized sections.)\nWe can now create a model to classify our texts:\n\n\nShow code\nlearn = text_classifier_learner(dls_clas, AWD_LSTM, drop_mult=0.5, \n                                metrics=accuracy).to_fp16()\n\n\nThe final step prior to training the classifier is to load the encoder from our fine-tuned language model. We use load_encoder instead of load because we only have pretrained weights available for the encoder; load by default raises an exception if an incomplete model is loaded:\n\n\nShow code\nlearn = learn.load_encoder('finetuned')\n\n\n\n\nFine-Tuning the Classifier\nThe last step is to train with discriminative learning rates and gradual unfreezing. In computer vision we often unfreeze the model all at once, but for NLP classifiers, we find that unfreezing a few layers at a time makes a real difference:\n\n\nShow code\nlearn.fit_one_cycle(1, 2e-2)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.347427\n0.184480\n0.929320\n00:33\n\n\n\n\n\nIn just one epoch we get the same result as our training in &lt;&gt;: not too bad! We can pass -2 to freeze_to to freeze all except the last two parameter groups:\n\n\nShow code\nlearn.freeze_to(-2)\nlearn.fit_one_cycle(1, slice(1e-2/(2.6**4),1e-2))\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.247763\n0.171683\n0.934640\n00:37\n\n\n\n\n\nThen we can unfreeze a bit more, and continue training:\n\n\nShow code\nlearn.freeze_to(-3)\nlearn.fit_one_cycle(1, slice(5e-3/(2.6**4),5e-3))\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.193377\n0.156696\n0.941200\n00:45\n\n\n\n\n\nAnd finally, the whole model!\n\n\nShow code\nlearn.unfreeze()\nlearn.fit_one_cycle(2, slice(1e-3/(2.6**4),1e-3))\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n0.172888\n0.153770\n0.943120\n01:01\n\n\n1\n0.161492\n0.155567\n0.942640\n00:57\n\n\n\n\n\nWe reached 94.3% accuracy, which was state-of-the-art performance just three years ago. By training another model on all the texts read backwards and averaging the predictions of those two models, we can even get to 95.1% accuracy, which was the state of the art introduced by the ULMFiT paper. It was only beaten a few months ago, by fine-tuning a much bigger model and using expensive data augmentation techniques (translating sentences in another language and back, using another model for translation).\nUsing a pretrained model let us build a fine-tuned language model that was pretty powerful, to either generate fake reviews or help classify them. This is exciting stuff, but it’s good to remember that this technology can also be used for malign purposes."
  },
  {
    "objectID": "posts/10_nlp.html#disinformation-and-language-models",
    "href": "posts/10_nlp.html#disinformation-and-language-models",
    "title": "NLP Deep Dive: RNNs",
    "section": "Disinformation and Language Models",
    "text": "Disinformation and Language Models\nEven simple algorithms based on rules, before the days of widely available deep learning language models, could be used to create fraudulent accounts and try to influence policymakers. Jeff Kao, now a computational journalist at ProPublica, analyzed the comments that were sent to the US Federal Communications Commission (FCC) regarding a 2017 proposal to repeal net neutrality. In his article “More than a Million Pro-Repeal Net Neutrality Comments Were Likely Faked”, he reports how he discovered a large cluster of comments opposing net neutrality that seemed to have been generated by some sort of Mad Libs-style mail merge. In &lt;&gt;, the fake comments have been helpfully color-coded by Kao to highlight their formulaic nature.\n\nKao estimated that “less than 800,000 of the 22M+ comments… could be considered truly unique” and that “more than 99% of the truly unique comments were in favor of keeping net neutrality.”\nGiven advances in language modeling that have occurred since 2017, such fraudulent campaigns could be nearly impossible to catch now. You now have all the necessary tools at your disposal to create a compelling language model—that is, something that can generate context-appropriate, believable text. It won’t necessarily be perfectly accurate or correct, but it will be plausible. Think about what this technology would mean when put together with the kinds of disinformation campaigns we have learned about in recent years. Take a look at the Reddit dialogue shown in &lt;&gt;, where a language model based on OpenAI’s GPT-2 algorithm is having a conversation with itself about whether the US government should cut defense spending.\n\nIn this case, it was explicitly said that an algorithm was used, but imagine what would happen if a bad actor decided to release such an algorithm across social networks. They could do it slowly and carefully, allowing the algorithm to gradually develop followers and trust over time. It would not take many resources to have literally millions of accounts doing this. In such a situation we could easily imagine getting to a point where the vast majority of discourse online was from bots, and nobody would have any idea that it was happening.\nWe are already starting to see examples of machine learning being used to generate identities. For example, &lt;&gt; shows a LinkedIn profile for Katie Jones.\n\nKatie Jones was connected on LinkedIn to several members of mainstream Washington think tanks. But she didn’t exist. That image you see was auto-generated by a generative adversarial network, and somebody named Katie Jones has not, in fact, graduated from the Center for Strategic and International Studies.\nMany people assume or hope that algorithms will come to our defense here—that we will develop classification algorithms that can automatically recognise autogenerated content. The problem, however, is that this will always be an arms race, in which better classification (or discriminator) algorithms can be used to create better generation algorithms."
  },
  {
    "objectID": "posts/10_nlp.html#conclusion",
    "href": "posts/10_nlp.html#conclusion",
    "title": "NLP Deep Dive: RNNs",
    "section": "Conclusion",
    "text": "Conclusion\nIn this chapter we explored the last application covered out of the box by the fastai library: text. We saw two types of models: language models that can generate texts, and a classifier that determines if a review is positive or negative. To build a state-of-the art classifier, we used a pretrained language model, fine-tuned it to the corpus of our task, then used its body (the encoder) with a new head to do the classification.\nBefore we end this section, we’ll take a look at how the fastai library can help you assemble your data for your specific problems."
  },
  {
    "objectID": "posts/10_nlp.html#questionnaire",
    "href": "posts/10_nlp.html#questionnaire",
    "title": "NLP Deep Dive: RNNs",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhat is “self-supervised learning”?\nWhat is a “language model”?\nWhy is a language model considered self-supervised?\nWhat are self-supervised models usually used for?\nWhy do we fine-tune language models?\nWhat are the three steps to create a state-of-the-art text classifier?\nHow do the 50,000 unlabeled movie reviews help us create a better text classifier for the IMDb dataset?\nWhat are the three steps to prepare your data for a language model?\nWhat is “tokenization”? Why do we need it?\nName three different approaches to tokenization.\nWhat is xxbos?\nList four rules that fastai applies to text during tokenization.\nWhy are repeated characters replaced with a token showing the number of repetitions and the character that’s repeated?\nWhat is “numericalization”?\nWhy might there be words that are replaced with the “unknown word” token?\nWith a batch size of 64, the first row of the tensor representing the first batch contains the first 64 tokens for the dataset. What does the second row of that tensor contain? What does the first row of the second batch contain? (Careful—students often get this one wrong! Be sure to check your answer on the book’s website.)\nWhy do we need padding for text classification? Why don’t we need it for language modeling?\nWhat does an embedding matrix for NLP contain? What is its shape?\nWhat is “perplexity”?\nWhy do we have to pass the vocabulary of the language model to the classifier data block?\nWhat is “gradual unfreezing”?\nWhy is text generation always likely to be ahead of automatic identification of machine-generated texts?\n\n\nFurther Research\n\nSee what you can learn about language models and disinformation. What are the best language models today? Take a look at some of their outputs. Do you find them convincing? How could a bad actor best use such a model to create conflict and uncertainty?\nGiven the limitation that models are unlikely to be able to consistently recognize machine-generated texts, what other approaches may be needed to handle large-scale disinformation campaigns that leverage deep learning?"
  },
  {
    "objectID": "posts/12_nlp_dive.html",
    "href": "posts/12_nlp_dive.html",
    "title": "A Language Model from Scratch",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_nlp_dive]]\nWe’re now ready to go deep… deep into deep learning! You already learned how to train a basic neural network, but how do you go from there to creating state-of-the-art models? In this part of the book we’re going to uncover all of the mysteries, starting with language models.\nYou saw in &lt;&gt; how to fine-tune a pretrained language model to build a text classifier. In this chapter, we will explain to you what exactly is inside that model, and what an RNN is. First, let’s gather some data that will allow us to quickly prototype our various models."
  },
  {
    "objectID": "posts/12_nlp_dive.html#the-data",
    "href": "posts/12_nlp_dive.html#the-data",
    "title": "A Language Model from Scratch",
    "section": "The Data",
    "text": "The Data\nWhenever we start working on a new problem, we always first try to think of the simplest dataset we can that will allow us to try out methods quickly and easily, and interpret the results. When we started working on language modeling a few years ago we didn’t find any datasets that would allow for quick prototyping, so we made one. We call it Human Numbers, and it simply contains the first 10,000 numbers written out in English.\n\nj: One of the most common practical mistakes I see even amongst highly experienced practitioners is failing to use appropriate datasets at appropriate times during the analysis process. In particular, most people tend to start with datasets that are too big and too complicated.\n\nWe can download, extract, and take a look at our dataset in the usual way:\n\n\nShow code\nfrom fastai.text.all import *\npath = untar_data(URLs.HUMAN_NUMBERS)\n\n\n\n\nShow code\n#hide\nPath.BASE_PATH = path\n\n\n\n\nShow code\npath.ls()\n\n\n(#2) [Path('train.txt'),Path('valid.txt')]\n\n\nLet’s open those two files and see what’s inside. At first we’ll join all of the texts together and ignore the train/valid split given by the dataset (we’ll come back to that later):\n\n\nShow code\nlines = L()\nwith open(path/'train.txt') as f: lines += L(*f.readlines())\nwith open(path/'valid.txt') as f: lines += L(*f.readlines())\nlines\n\n\n(#9998) ['one \\n','two \\n','three \\n','four \\n','five \\n','six \\n','seven \\n','eight \\n','nine \\n','ten \\n'...]\n\n\nWe take all those lines and concatenate them in one big stream. To mark when we go from one number to the next, we use a . as a separator:\n\n\nShow code\ntext = ' . '.join([l.strip() for l in lines])\ntext[:100]\n\n\n'one . two . three . four . five . six . seven . eight . nine . ten . eleven . twelve . thirteen . fo'\n\n\nWe can tokenize this dataset by splitting on spaces:\n\n\nShow code\ntokens = text.split(' ')\ntokens[:10]\n\n\n['one', '.', 'two', '.', 'three', '.', 'four', '.', 'five', '.']\n\n\nTo numericalize, we have to create a list of all the unique tokens (our vocab):\n\n\nShow code\nvocab = L(*tokens).unique()\nvocab\n\n\n(#30) ['one','.','two','three','four','five','six','seven','eight','nine'...]\n\n\nThen we can convert our tokens into numbers by looking up the index of each in the vocab:\n\n\nShow code\nword2idx = {w:i for i,w in enumerate(vocab)}\nnums = L(word2idx[i] for i in tokens)\nnums\n\n\n(#63095) [0,1,2,1,3,1,4,1,5,1...]\n\n\nNow that we have a small dataset on which language modeling should be an easy task, we can build our first model."
  },
  {
    "objectID": "posts/12_nlp_dive.html#our-first-language-model-from-scratch",
    "href": "posts/12_nlp_dive.html#our-first-language-model-from-scratch",
    "title": "A Language Model from Scratch",
    "section": "Our First Language Model from Scratch",
    "text": "Our First Language Model from Scratch\nOne simple way to turn this into a neural network would be to specify that we are going to predict each word based on the previous three words. We could create a list of every sequence of three words as our independent variables, and the next word after each sequence as the dependent variable.\nWe can do that with plain Python. Let’s do it first with tokens just to confirm what it looks like:\n\n\nShow code\nL((tokens[i:i+3], tokens[i+3]) for i in range(0,len(tokens)-4,3))\n\n\n(#21031) [(['one', '.', 'two'], '.'),(['.', 'three', '.'], 'four'),(['four', '.', 'five'], '.'),(['.', 'six', '.'], 'seven'),(['seven', '.', 'eight'], '.'),(['.', 'nine', '.'], 'ten'),(['ten', '.', 'eleven'], '.'),(['.', 'twelve', '.'], 'thirteen'),(['thirteen', '.', 'fourteen'], '.'),(['.', 'fifteen', '.'], 'sixteen')...]\n\n\nNow we will do it with tensors of the numericalized values, which is what the model will actually use:\n\n\nShow code\nseqs = L((tensor(nums[i:i+3]), nums[i+3]) for i in range(0,len(nums)-4,3))\nseqs\n\n\n(#21031) [(tensor([0, 1, 2]), 1),(tensor([1, 3, 1]), 4),(tensor([4, 1, 5]), 1),(tensor([1, 6, 1]), 7),(tensor([7, 1, 8]), 1),(tensor([1, 9, 1]), 10),(tensor([10,  1, 11]), 1),(tensor([ 1, 12,  1]), 13),(tensor([13,  1, 14]), 1),(tensor([ 1, 15,  1]), 16)...]\n\n\nWe can batch those easily using the DataLoader class. For now we will split the sequences randomly:\n\n\nShow code\nbs = 64\ncut = int(len(seqs) * 0.8)\ndls = DataLoaders.from_dsets(seqs[:cut], seqs[cut:], bs=64, shuffle=False)\n\n\nWe can now create a neural network architecture that takes three words as input, and returns a prediction of the probability of each possible next word in the vocab. We will use three standard linear layers, but with two tweaks.\nThe first tweak is that the first linear layer will use only the first word’s embedding as activations, the second layer will use the second word’s embedding plus the first layer’s output activations, and the third layer will use the third word’s embedding plus the second layer’s output activations. The key effect of this is that every word is interpreted in the information context of any words preceding it.\nThe second tweak is that each of these three layers will use the same weight matrix. The way that one word impacts the activations from previous words should not change depending on the position of a word. In other words, activation values will change as data moves through the layers, but the layer weights themselves will not change from layer to layer. So, a layer does not learn one sequence position; it must learn to handle all positions.\nSince layer weights do not change, you might think of the sequential layers as “the same layer” repeated. In fact, PyTorch makes this concrete; we can just create one layer, and use it multiple times.\n\nOur Language Model in PyTorch\nWe can now create the language model module that we described earlier:\n\n\nShow code\nclass LMModel1(Module):\n    def __init__(self, vocab_sz, n_hidden):\n        self.i_h = nn.Embedding(vocab_sz, n_hidden)  \n        self.h_h = nn.Linear(n_hidden, n_hidden)     \n        self.h_o = nn.Linear(n_hidden,vocab_sz)\n        \n    def forward(self, x):\n        h = F.relu(self.h_h(self.i_h(x[:,0])))\n        h = h + self.i_h(x[:,1])\n        h = F.relu(self.h_h(h))\n        h = h + self.i_h(x[:,2])\n        h = F.relu(self.h_h(h))\n        return self.h_o(h)\n\n\nAs you see, we have created three layers:\n\nThe embedding layer (i_h, for input to hidden)\nThe linear layer to create the activations for the next word (h_h, for hidden to hidden)\nA final linear layer to predict the fourth word (h_o, for hidden to output)\n\nThis might be easier to represent in pictorial form, so let’s define a simple pictorial representation of basic neural networks. &lt;&gt; shows how we’re going to represent a neural net with one hidden layer.\n\nEach shape represents activations: rectangle for input, circle for hidden (inner) layer activations, and triangle for output activations. We will use those shapes (summarized in &lt;&gt;) in all the diagrams in this chapter.\n\nAn arrow represents the actual layer computation—i.e., the linear layer followed by the activation function. Using this notation, &lt;&gt; shows what our simple language model looks like.\n\nTo simplify things, we’ve removed the details of the layer computation from each arrow. We’ve also color-coded the arrows, such that all arrows with the same color have the same weight matrix. For instance, all the input layers use the same embedding matrix, so they all have the same color (green).\nLet’s try training this model and see how it goes:\n\n\nShow code\nlearn = Learner(dls, LMModel1(len(vocab), 64), loss_func=F.cross_entropy, \n                metrics=accuracy)\nlearn.fit_one_cycle(4, 1e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.824297\n1.970941\n0.467554\n00:02\n\n\n1\n1.386973\n1.823242\n0.467554\n00:02\n\n\n2\n1.417556\n1.654497\n0.494414\n00:02\n\n\n3\n1.376440\n1.650849\n0.494414\n00:02\n\n\n\n\n\nTo see if this is any good, let’s check what a very simple model would give us. In this case we could always predict the most common token, so let’s find out which token is most often the target in our validation set:\n\n\nShow code\nn,counts = 0,torch.zeros(len(vocab))\nfor x,y in dls.valid:\n    n += y.shape[0]\n    for i in range_of(vocab): counts[i] += (y==i).long().sum()\nidx = torch.argmax(counts)\nidx, vocab[idx.item()], counts[idx].item()/n\n\n\n(tensor(29), 'thousand', 0.15165200855716662)\n\n\nThe most common token has the index 29, which corresponds to the token thousand. Always predicting this token would give us an accuracy of roughly 15%, so we are faring way better!\n\nA: My first guess was that the separator would be the most common token, since there is one for every number. But looking at tokens reminded me that large numbers are written with many words, so on the way to 10,000 you write “thousand” a lot: five thousand, five thousand and one, five thousand and two, etc. Oops! Looking at your data is great for noticing subtle features and also embarrassingly obvious ones.\n\nThis is a nice first baseline. Let’s see how we can refactor it with a loop.\n\n\nOur First Recurrent Neural Network\nLooking at the code for our module, we could simplify it by replacing the duplicated code that calls the layers with a for loop. As well as making our code simpler, this will also have the benefit that we will be able to apply our module equally well to token sequences of different lengths—we won’t be restricted to token lists of length three:\n\n\nShow code\nclass LMModel2(Module):\n    def __init__(self, vocab_sz, n_hidden):\n        self.i_h = nn.Embedding(vocab_sz, n_hidden)  \n        self.h_h = nn.Linear(n_hidden, n_hidden)     \n        self.h_o = nn.Linear(n_hidden,vocab_sz)\n        \n    def forward(self, x):\n        h = 0\n        for i in range(3):\n            h = h + self.i_h(x[:,i])\n            h = F.relu(self.h_h(h))\n        return self.h_o(h)\n\n\nLet’s check that we get the same results using this refactoring:\n\n\nShow code\nlearn = Learner(dls, LMModel2(len(vocab), 64), loss_func=F.cross_entropy, \n                metrics=accuracy)\nlearn.fit_one_cycle(4, 1e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.816274\n1.964143\n0.460185\n00:02\n\n\n1\n1.423805\n1.739964\n0.473259\n00:02\n\n\n2\n1.430327\n1.685172\n0.485382\n00:02\n\n\n3\n1.388390\n1.657033\n0.470406\n00:02\n\n\n\n\n\nWe can also refactor our pictorial representation in exactly the same way, as shown in &lt;&gt; (we’re also removing the details of activation sizes here, and using the same arrow colors as in &lt;&gt;).\n\nYou will see that there is a set of activations that are being updated each time through the loop, stored in the variable h—this is called the hidden state.\n\nJargon: hidden state: The activations that are updated at each step of a recurrent neural network.\n\nA neural network that is defined using a loop like this is called a recurrent neural network (RNN). It is important to realize that an RNN is not a complicated new architecture, but simply a refactoring of a multilayer neural network using a for loop.\n\nA: My true opinion: if they were called “looping neural networks,” or LNNs, they would seem 50% less daunting!\n\nNow that we know what an RNN is, let’s try to make it a little bit better."
  },
  {
    "objectID": "posts/12_nlp_dive.html#improving-the-rnn",
    "href": "posts/12_nlp_dive.html#improving-the-rnn",
    "title": "A Language Model from Scratch",
    "section": "Improving the RNN",
    "text": "Improving the RNN\nLooking at the code for our RNN, one thing that seems problematic is that we are initializing our hidden state to zero for every new input sequence. Why is that a problem? We made our sample sequences short so they would fit easily into batches. But if we order the samples correctly, those sample sequences will be read in order by the model, exposing the model to long stretches of the original sequence.\nAnother thing we can look at is having more signal: why only predict the fourth word when we could use the intermediate predictions to also predict the second and third words?\nLet’s see how we can implement those changes, starting with adding some state.\n\nMaintaining the State of an RNN\nBecause we initialize the model’s hidden state to zero for each new sample, we are throwing away all the information we have about the sentences we have seen so far, which means that our model doesn’t actually know where we are up to in the overall counting sequence. This is easily fixed; we can simply move the initialization of the hidden state to __init__.\nBut this fix will create its own subtle, but important, problem. It effectively makes our neural network as deep as the entire number of tokens in our document. For instance, if there were 10,000 tokens in our dataset, we would be creating a 10,000-layer neural network.\nTo see why this is the case, consider the original pictorial representation of our recurrent neural network in &lt;&gt;, before refactoring it with a for loop. You can see each layer corresponds with one token input. When we talk about the representation of a recurrent neural network before refactoring with the for loop, we call this the unrolled representation. It is often helpful to consider the unrolled representation when trying to understand an RNN.\nThe problem with a 10,000-layer neural network is that if and when you get to the 10,000th word of the dataset, you will still need to calculate the derivatives all the way back to the first layer. This is going to be very slow indeed, and very memory-intensive. It is unlikely that you’ll be able to store even one mini-batch on your GPU.\nThe solution to this problem is to tell PyTorch that we do not want to back propagate the derivatives through the entire implicit neural network. Instead, we will just keep the last three layers of gradients. To remove all of the gradient history in PyTorch, we use the detach method.\nHere is the new version of our RNN. It is now stateful, because it remembers its activations between different calls to forward, which represent its use for different samples in the batch:\n\n\nShow code\nclass LMModel3(Module):\n    def __init__(self, vocab_sz, n_hidden):\n        self.i_h = nn.Embedding(vocab_sz, n_hidden)  \n        self.h_h = nn.Linear(n_hidden, n_hidden)     \n        self.h_o = nn.Linear(n_hidden,vocab_sz)\n        self.h = 0\n        \n    def forward(self, x):\n        for i in range(3):\n            self.h = self.h + self.i_h(x[:,i])\n            self.h = F.relu(self.h_h(self.h))\n        out = self.h_o(self.h)\n        self.h = self.h.detach()\n        return out\n    \n    def reset(self): self.h = 0\n\n\nThis model will have the same activations whatever sequence length we pick, because the hidden state will remember the last activation from the previous batch. The only thing that will be different is the gradients computed at each step: they will only be calculated on sequence length tokens in the past, instead of the whole stream. This approach is called backpropagation through time (BPTT).\n\njargon: Back propagation through time (BPTT): Treating a neural net with effectively one layer per time step (usually refactored using a loop) as one big model, and calculating gradients on it in the usual way. To avoid running out of memory and time, we usually use truncated BPTT, which “detaches” the history of computation steps in the hidden state every few time steps.\n\nTo use LMModel3, we need to make sure the samples are going to be seen in a certain order. As we saw in &lt;&gt;, if the first line of the first batch is our dset[0] then the second batch should have dset[1] as the first line, so that the model sees the text flowing.\nLMDataLoader was doing this for us in &lt;&gt;. This time we’re going to do it ourselves.\nTo do this, we are going to rearrange our dataset. First we divide the samples into m = len(dset) // bs groups (this is the equivalent of splitting the whole concatenated dataset into, for example, 64 equally sized pieces, since we’re using bs=64 here). m is the length of each of these pieces. For instance, if we’re using our whole dataset (although we’ll actually split it into train versus valid in a moment), that will be:\n\n\nShow code\nm = len(seqs)//bs\nm,bs,len(seqs)\n\n\n(328, 64, 21031)\n\n\nThe first batch will be composed of the samples:\n(0, m, 2*m, ..., (bs-1)*m)\nthe second batch of the samples:\n(1, m+1, 2*m+1, ..., (bs-1)*m+1)\nand so forth. This way, at each epoch, the model will see a chunk of contiguous text of size 3*m (since each text is of size 3) on each line of the batch.\nThe following function does that reindexing:\n\n\nShow code\ndef group_chunks(ds, bs):\n    m = len(ds) // bs\n    new_ds = L()\n    for i in range(m): new_ds += L(ds[i + m*j] for j in range(bs))\n    return new_ds\n\n\nThen we just pass drop_last=True when building our DataLoaders to drop the last batch that does not have a shape of bs. We also pass shuffle=False to make sure the texts are read in order:\n\n\nShow code\ncut = int(len(seqs) * 0.8)\ndls = DataLoaders.from_dsets(\n    group_chunks(seqs[:cut], bs), \n    group_chunks(seqs[cut:], bs), \n    bs=bs, drop_last=True, shuffle=False)\n\n\nThe last thing we add is a little tweak of the training loop via a Callback. We will talk more about callbacks in &lt;&gt;; this one will call the reset method of our model at the beginning of each epoch and before each validation phase. Since we implemented that method to zero the hidden state of the model, this will make sure we start with a clean state before reading those continuous chunks of text. We can also start training a bit longer:\n\n\nShow code\nlearn = Learner(dls, LMModel3(len(vocab), 64), loss_func=F.cross_entropy,\n                metrics=accuracy, cbs=ModelResetter)\nlearn.fit_one_cycle(10, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.677074\n1.827367\n0.467548\n00:02\n\n\n1\n1.282722\n1.870913\n0.388942\n00:02\n\n\n2\n1.090705\n1.651793\n0.462500\n00:02\n\n\n3\n1.005092\n1.613794\n0.516587\n00:02\n\n\n4\n0.965975\n1.560775\n0.551202\n00:02\n\n\n5\n0.916182\n1.595857\n0.560577\n00:02\n\n\n6\n0.897657\n1.539733\n0.574279\n00:02\n\n\n7\n0.836274\n1.585141\n0.583173\n00:02\n\n\n8\n0.805877\n1.629808\n0.586779\n00:02\n\n\n9\n0.795096\n1.651267\n0.588942\n00:02\n\n\n\n\n\nThis is already better! The next step is to use more targets and compare them to the intermediate predictions.\n\n\nCreating More Signal\nAnother problem with our current approach is that we only predict one output word for each three input words. That means that the amount of signal that we are feeding back to update weights with is not as large as it could be. It would be better if we predicted the next word after every single word, rather than every three words, as shown in &lt;&gt;.\n\nThis is easy enough to add. We need to first change our data so that the dependent variable has each of the three next words after each of our three input words. Instead of 3, we use an attribute, sl (for sequence length), and make it a bit bigger:\n\n\nShow code\nsl = 16\nseqs = L((tensor(nums[i:i+sl]), tensor(nums[i+1:i+sl+1]))\n         for i in range(0,len(nums)-sl-1,sl))\ncut = int(len(seqs) * 0.8)\ndls = DataLoaders.from_dsets(group_chunks(seqs[:cut], bs),\n                             group_chunks(seqs[cut:], bs),\n                             bs=bs, drop_last=True, shuffle=False)\n\n\nLooking at the first element of seqs, we can see that it contains two lists of the same size. The second list is the same as the first, but offset by one element:\n\n\nShow code\n[L(vocab[o] for o in s) for s in seqs[0]]\n\n\n[(#16) ['one','.','two','.','three','.','four','.','five','.'...],\n (#16) ['.','two','.','three','.','four','.','five','.','six'...]]\n\n\nNow we need to modify our model so that it outputs a prediction after every word, rather than just at the end of a three-word sequence:\n\n\nShow code\nclass LMModel4(Module):\n    def __init__(self, vocab_sz, n_hidden):\n        self.i_h = nn.Embedding(vocab_sz, n_hidden)  \n        self.h_h = nn.Linear(n_hidden, n_hidden)     \n        self.h_o = nn.Linear(n_hidden,vocab_sz)\n        self.h = 0\n        \n    def forward(self, x):\n        outs = []\n        for i in range(sl):\n            self.h = self.h + self.i_h(x[:,i])\n            self.h = F.relu(self.h_h(self.h))\n            outs.append(self.h_o(self.h))\n        self.h = self.h.detach()\n        return torch.stack(outs, dim=1)\n    \n    def reset(self): self.h = 0\n\n\nThis model will return outputs of shape bs x sl x vocab_sz (since we stacked on dim=1). Our targets are of shape bs x sl, so we need to flatten those before using them in F.cross_entropy:\n\n\nShow code\ndef loss_func(inp, targ):\n    return F.cross_entropy(inp.view(-1, len(vocab)), targ.view(-1))\n\n\nWe can now use this loss function to train the model:\n\n\nShow code\nlearn = Learner(dls, LMModel4(len(vocab), 64), loss_func=loss_func,\n                metrics=accuracy, cbs=ModelResetter)\nlearn.fit_one_cycle(15, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n3.103298\n2.874341\n0.212565\n00:01\n\n\n1\n2.231964\n1.971280\n0.462158\n00:01\n\n\n2\n1.711358\n1.813547\n0.461182\n00:01\n\n\n3\n1.448516\n1.828176\n0.483236\n00:01\n\n\n4\n1.288630\n1.659564\n0.520671\n00:01\n\n\n5\n1.161470\n1.714023\n0.554932\n00:01\n\n\n6\n1.055568\n1.660916\n0.575033\n00:01\n\n\n7\n0.960765\n1.719624\n0.591064\n00:01\n\n\n8\n0.870153\n1.839560\n0.614665\n00:01\n\n\n9\n0.808545\n1.770278\n0.624349\n00:01\n\n\n10\n0.758084\n1.842931\n0.610758\n00:01\n\n\n11\n0.719320\n1.799527\n0.646566\n00:01\n\n\n12\n0.683439\n1.917928\n0.649821\n00:01\n\n\n13\n0.660283\n1.874712\n0.628581\n00:01\n\n\n14\n0.646154\n1.877519\n0.640055\n00:01\n\n\n\n\n\nWe need to train for longer, since the task has changed a bit and is more complicated now. But we end up with a good result… At least, sometimes. If you run it a few times, you’ll see that you can get quite different results on different runs. That’s because effectively we have a very deep network here, which can result in very large or very small gradients. We’ll see in the next part of this chapter how to deal with this.\nNow, the obvious way to get a better model is to go deeper: we only have one linear layer between the hidden state and the output activations in our basic RNN, so maybe we’ll get better results with more."
  },
  {
    "objectID": "posts/12_nlp_dive.html#multilayer-rnns",
    "href": "posts/12_nlp_dive.html#multilayer-rnns",
    "title": "A Language Model from Scratch",
    "section": "Multilayer RNNs",
    "text": "Multilayer RNNs\nIn a multilayer RNN, we pass the activations from our recurrent neural network into a second recurrent neural network, like in &lt;&gt;.\n\nThe unrolled representation is shown in &lt;&gt; (similar to &lt;&gt;).\n\nLet’s see how to implement this in practice.\n\nThe Model\nWe can save some time by using PyTorch’s RNN class, which implements exactly what we created earlier, but also gives us the option to stack multiple RNNs, as we have discussed:\n\n\nShow code\nclass LMModel5(Module):\n    def __init__(self, vocab_sz, n_hidden, n_layers):\n        self.i_h = nn.Embedding(vocab_sz, n_hidden)\n        self.rnn = nn.RNN(n_hidden, n_hidden, n_layers, batch_first=True)\n        self.h_o = nn.Linear(n_hidden, vocab_sz)\n        self.h = torch.zeros(n_layers, bs, n_hidden)\n        \n    def forward(self, x):\n        res,h = self.rnn(self.i_h(x), self.h)\n        self.h = h.detach()\n        return self.h_o(res)\n    \n    def reset(self): self.h.zero_()\n\n\n\n\nShow code\nlearn = Learner(dls, LMModel5(len(vocab), 64, 2), \n                loss_func=CrossEntropyLossFlat(), \n                metrics=accuracy, cbs=ModelResetter)\nlearn.fit_one_cycle(15, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n3.055853\n2.591640\n0.437907\n00:01\n\n\n1\n2.162359\n1.787310\n0.471598\n00:01\n\n\n2\n1.710663\n1.941807\n0.321777\n00:01\n\n\n3\n1.520783\n1.999726\n0.312012\n00:01\n\n\n4\n1.330846\n2.012902\n0.413249\n00:01\n\n\n5\n1.163297\n1.896192\n0.450684\n00:01\n\n\n6\n1.033813\n2.005209\n0.434814\n00:01\n\n\n7\n0.919090\n2.047083\n0.456706\n00:01\n\n\n8\n0.822939\n2.068031\n0.468831\n00:01\n\n\n9\n0.750180\n2.136064\n0.475098\n00:01\n\n\n10\n0.695120\n2.139140\n0.485433\n00:01\n\n\n11\n0.655752\n2.155081\n0.493652\n00:01\n\n\n12\n0.629650\n2.162583\n0.498535\n00:01\n\n\n13\n0.613583\n2.171649\n0.491048\n00:01\n\n\n14\n0.604309\n2.180355\n0.487874\n00:01\n\n\n\n\n\nNow that’s disappointing… our previous single-layer RNN performed better. Why? The reason is that we have a deeper model, leading to exploding or vanishing activations.\n\n\nExploding or Disappearing Activations\nIn practice, creating accurate models from this kind of RNN is difficult. We will get better results if we call detach less often, and have more layers—this gives our RNN a longer time horizon to learn from, and richer features to create. But it also means we have a deeper model to train. The key challenge in the development of deep learning has been figuring out how to train these kinds of models.\nThe reason this is challenging is because of what happens when you multiply by a matrix many times. Think about what happens when you multiply by a number many times. For example, if you multiply by 2, starting at 1, you get the sequence 1, 2, 4, 8,… after 32 steps you are already at 4,294,967,296. A similar issue happens if you multiply by 0.5: you get 0.5, 0.25, 0.125… and after 32 steps it’s 0.00000000023. As you can see, multiplying by a number even slightly higher or lower than 1 results in an explosion or disappearance of our starting number, after just a few repeated multiplications.\nBecause matrix multiplication is just multiplying numbers and adding them up, exactly the same thing happens with repeated matrix multiplications. And that’s all a deep neural network is —each extra layer is another matrix multiplication. This means that it is very easy for a deep neural network to end up with extremely large or extremely small numbers.\nThis is a problem, because the way computers store numbers (known as “floating point”) means that they become less and less accurate the further away the numbers get from zero. The diagram in &lt;&gt;, from the excellent article “What You Never Wanted to Know About Floating Point but Will Be Forced to Find Out”, shows how the precision of floating-point numbers varies over the number line.\n\nThis inaccuracy means that often the gradients calculated for updating the weights end up as zero or infinity for deep networks. This is commonly referred to as the vanishing gradients or exploding gradients problem. It means that in SGD, the weights are either not updated at all or jump to infinity. Either way, they won’t improve with training.\nResearchers have developed a number of ways to tackle this problem, which we will be discussing later in the book. One option is to change the definition of a layer in a way that makes it less likely to have exploding activations. We’ll look at the details of how this is done in &lt;&gt;, when we discuss batch normalization, and &lt;&gt;, when we discuss ResNets, although these details don’t generally matter in practice (unless you are a researcher that is creating new approaches to solving this problem). Another strategy for dealing with this is by being careful about initialization, which is a topic we’ll investigate in &lt;&gt;.\nFor RNNs, there are two types of layers that are frequently used to avoid exploding activations: gated recurrent units (GRUs) and long short-term memory (LSTM) layers. Both of these are available in PyTorch, and are drop-in replacements for the RNN layer. We will only cover LSTMs in this book; there are plenty of good tutorials online explaining GRUs, which are a minor variant on the LSTM design."
  },
  {
    "objectID": "posts/12_nlp_dive.html#lstm",
    "href": "posts/12_nlp_dive.html#lstm",
    "title": "A Language Model from Scratch",
    "section": "LSTM",
    "text": "LSTM\nLSTM is an architecture that was introduced back in 1997 by Jürgen Schmidhuber and Sepp Hochreiter. In this architecture, there are not one but two hidden states. In our base RNN, the hidden state is the output of the RNN at the previous time step. That hidden state is then responsible for two things:\n\nHaving the right information for the output layer to predict the correct next token\nRetaining memory of everything that happened in the sentence\n\nConsider, for example, the sentences “Henry has a dog and he likes his dog very much” and “Sophie has a dog and she likes her dog very much.” It’s very clear that the RNN needs to remember the name at the beginning of the sentence to be able to predict he/she or his/her.\nIn practice, RNNs are really bad at retaining memory of what happened much earlier in the sentence, which is the motivation to have another hidden state (called cell state) in the LSTM. The cell state will be responsible for keeping long short-term memory, while the hidden state will focus on the next token to predict. Let’s take a closer look at how this is achieved and build an LSTM from scratch.\n\nBuilding an LSTM from Scratch\nIn order to build an LSTM, we first have to understand its architecture. &lt;&gt; shows its inner structure.\n\nIn this picture, our input \\(x_{t}\\) enters on the left with the previous hidden state (\\(h_{t-1}\\)) and cell state (\\(c_{t-1}\\)). The four orange boxes represent four layers (our neural nets) with the activation being either sigmoid (\\(\\sigma\\)) or tanh. tanh is just a sigmoid function rescaled to the range -1 to 1. Its mathematical expression can be written like this:\n\\[\\tanh(x) = \\frac{e^{x} - e^{-x}}{e^{x}+e^{-x}} = 2 \\sigma(2x) - 1\\]\nwhere \\(\\sigma\\) is the sigmoid function. The green circles are elementwise operations. What goes out on the right is the new hidden state (\\(h_{t}\\)) and new cell state (\\(c_{t}\\)), ready for our next input. The new hidden state is also used as output, which is why the arrow splits to go up.\nLet’s go over the four neural nets (called gates) one by one and explain the diagram—but before this, notice how very little the cell state (at the top) is changed. It doesn’t even go directly through a neural net! This is exactly why it will carry on a longer-term state.\nFirst, the arrows for input and old hidden state are joined together. In the RNN we wrote earlier in this chapter, we were adding them together. In the LSTM, we stack them in one big tensor. This means the dimension of our embeddings (which is the dimension of \\(x_{t}\\)) can be different than the dimension of our hidden state. If we call those n_in and n_hid, the arrow at the bottom is of size n_in + n_hid; thus all the neural nets (orange boxes) are linear layers with n_in + n_hid inputs and n_hid outputs.\nThe first gate (looking from left to right) is called the forget gate. Since it’s a linear layer followed by a sigmoid, its output will consist of scalars between 0 and 1. We multiply this result by the cell state to determine which information to keep and which to throw away: values closer to 0 are discarded and values closer to 1 are kept. This gives the LSTM the ability to forget things about its long-term state. For instance, when crossing a period or an xxbos token, we would expect to it to (have learned to) reset its cell state.\nThe second gate is called the input gate. It works with the third gate (which doesn’t really have a name but is sometimes called the cell gate) to update the cell state. For instance, we may see a new gender pronoun, in which case we’ll need to replace the information about gender that the forget gate removed. Similar to the forget gate, the input gate decides which elements of the cell state to update (values close to 1) or not (values close to 0). The third gate determines what those updated values are, in the range of –1 to 1 (thanks to the tanh function). The result is then added to the cell state.\nThe last gate is the output gate. It determines which information from the cell state to use to generate the output. The cell state goes through a tanh before being combined with the sigmoid output from the output gate, and the result is the new hidden state.\nIn terms of code, we can write the same steps like this:\n\n\nShow code\nclass LSTMCell(Module):\n    def __init__(self, ni, nh):\n        self.forget_gate = nn.Linear(ni + nh, nh)\n        self.input_gate  = nn.Linear(ni + nh, nh)\n        self.cell_gate   = nn.Linear(ni + nh, nh)\n        self.output_gate = nn.Linear(ni + nh, nh)\n\n    def forward(self, input, state):\n        h,c = state\n        h = torch.cat([h, input], dim=1)\n        forget = torch.sigmoid(self.forget_gate(h))\n        c = c * forget\n        inp = torch.sigmoid(self.input_gate(h))\n        cell = torch.tanh(self.cell_gate(h))\n        c = c + inp * cell\n        out = torch.sigmoid(self.output_gate(h))\n        h = out * torch.tanh(c)\n        return h, (h,c)\n\n\nIn practice, we can then refactor the code. Also, in terms of performance, it’s better to do one big matrix multiplication than four smaller ones (that’s because we only launch the special fast kernel on the GPU once, and it gives the GPU more work to do in parallel). The stacking takes a bit of time (since we have to move one of the tensors around on the GPU to have it all in a contiguous array), so we use two separate layers for the input and the hidden state. The optimized and refactored code then looks like this:\n\n\nShow code\nclass LSTMCell(Module):\n    def __init__(self, ni, nh):\n        self.ih = nn.Linear(ni,4*nh)\n        self.hh = nn.Linear(nh,4*nh)\n\n    def forward(self, input, state):\n        h,c = state\n        # One big multiplication for all the gates is better than 4 smaller ones\n        gates = (self.ih(input) + self.hh(h)).chunk(4, 1)\n        ingate,forgetgate,outgate = map(torch.sigmoid, gates[:3])\n        cellgate = gates[3].tanh()\n\n        c = (forgetgate*c) + (ingate*cellgate)\n        h = outgate * c.tanh()\n        return h, (h,c)\n\n\nHere we use the PyTorch chunk method to split our tensor into four pieces. It works like this:\n\n\nShow code\nt = torch.arange(0,10); t\n\n\ntensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\n\nShow code\nt.chunk(2)\n\n\n(tensor([0, 1, 2, 3, 4]), tensor([5, 6, 7, 8, 9]))\n\n\nLet’s now use this architecture to train a language model!\n\n\nTraining a Language Model Using LSTMs\nHere is the same network as LMModel5, using a two-layer LSTM. We can train it at a higher learning rate, for a shorter time, and get better accuracy:\n\n\nShow code\nclass LMModel6(Module):\n    def __init__(self, vocab_sz, n_hidden, n_layers):\n        self.i_h = nn.Embedding(vocab_sz, n_hidden)\n        self.rnn = nn.LSTM(n_hidden, n_hidden, n_layers, batch_first=True)\n        self.h_o = nn.Linear(n_hidden, vocab_sz)\n        self.h = [torch.zeros(n_layers, bs, n_hidden) for _ in range(2)]\n        \n    def forward(self, x):\n        res,h = self.rnn(self.i_h(x), self.h)\n        self.h = [h_.detach() for h_ in h]\n        return self.h_o(res)\n    \n    def reset(self): \n        for h in self.h: h.zero_()\n\n\n\n\nShow code\nlearn = Learner(dls, LMModel6(len(vocab), 64, 2), \n                loss_func=CrossEntropyLossFlat(), \n                metrics=accuracy, cbs=ModelResetter)\nlearn.fit_one_cycle(15, 1e-2)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n3.000821\n2.663942\n0.438314\n00:02\n\n\n1\n2.139642\n2.184780\n0.240479\n00:02\n\n\n2\n1.607275\n1.812682\n0.439779\n00:02\n\n\n3\n1.347711\n1.830982\n0.497477\n00:02\n\n\n4\n1.123113\n1.937766\n0.594401\n00:02\n\n\n5\n0.852042\n2.012127\n0.631592\n00:02\n\n\n6\n0.565494\n1.312742\n0.725749\n00:02\n\n\n7\n0.347445\n1.297934\n0.711263\n00:02\n\n\n8\n0.208191\n1.441269\n0.731201\n00:02\n\n\n9\n0.126335\n1.569952\n0.737305\n00:02\n\n\n10\n0.079761\n1.427187\n0.754150\n00:02\n\n\n11\n0.052990\n1.494990\n0.745117\n00:02\n\n\n12\n0.039008\n1.393731\n0.757894\n00:02\n\n\n13\n0.031502\n1.373210\n0.758464\n00:02\n\n\n14\n0.028068\n1.368083\n0.758464\n00:02\n\n\n\n\n\nNow that’s better than a multilayer RNN! We can still see there is a bit of overfitting, however, which is a sign that a bit of regularization might help."
  },
  {
    "objectID": "posts/12_nlp_dive.html#regularizing-an-lstm",
    "href": "posts/12_nlp_dive.html#regularizing-an-lstm",
    "title": "A Language Model from Scratch",
    "section": "Regularizing an LSTM",
    "text": "Regularizing an LSTM\nRecurrent neural networks, in general, are hard to train, because of the problem of vanishing activations and gradients we saw before. Using LSTM (or GRU) cells makes training easier than with vanilla RNNs, but they are still very prone to overfitting. Data augmentation, while a possibility, is less often used for text data than for images because in most cases it requires another model to generate random augmentations (e.g., by translating the text into another language and then back into the original language). Overall, data augmentation for text data is currently not a well-explored space.\nHowever, there are other regularization techniques we can use instead to reduce overfitting, which were thoroughly studied for use with LSTMs in the paper “Regularizing and Optimizing LSTM Language Models” by Stephen Merity, Nitish Shirish Keskar, and Richard Socher. This paper showed how effective use of dropout, activation regularization, and temporal activation regularization could allow an LSTM to beat state-of-the-art results that previously required much more complicated models. The authors called an LSTM using these techniques an AWD-LSTM. We’ll look at each of these techniques in turn.\n\nDropout\nDropout is a regularization technique that was introduced by Geoffrey Hinton et al. in Improving neural networks by preventing co-adaptation of feature detectors. The basic idea is to randomly change some activations to zero at training time. This makes sure all neurons actively work toward the output, as seen in &lt;&gt; (from “Dropout: A Simple Way to Prevent Neural Networks from Overfitting” by Nitish Srivastava et al.).\n\nHinton used a nice metaphor when he explained, in an interview, the inspiration for dropout:\n\n: I went to my bank. The tellers kept changing and I asked one of them why. He said he didn’t know but they got moved around a lot. I figured it must be because it would require cooperation between employees to successfully defraud the bank. This made me realize that randomly removing a different subset of neurons on each example would prevent conspiracies and thus reduce overfitting.\n\nIn the same interview, he also explained that neuroscience provided additional inspiration:\n\n: We don’t really know why neurons spike. One theory is that they want to be noisy so as to regularize, because we have many more parameters than we have data points. The idea of dropout is that if you have noisy activations, you can afford to use a much bigger model.\n\nThis explains the idea behind why dropout helps to generalize: first it helps the neurons to cooperate better together, then it makes the activations more noisy, thus making the model more robust.\nWe can see, however, that if we were to just zero those activations without doing anything else, our model would have problems training: if we go from the sum of five activations (that are all positive numbers since we apply a ReLU) to just two, this won’t have the same scale. Therefore, if we apply dropout with a probability p, we rescale all activations by dividing them by 1-p (on average p will be zeroed, so it leaves 1-p), as shown in &lt;&gt;.\n\nThis is a full implementation of the dropout layer in PyTorch (although PyTorch’s native layer is actually written in C, not Python):\n\n\nShow code\nclass Dropout(Module):\n    def __init__(self, p): self.p = p\n    def forward(self, x):\n        if not self.training: return x\n        mask = x.new(*x.shape).bernoulli_(1-p)\n        return x * mask.div_(1-p)\n\n\nThe bernoulli_ method is creating a tensor of random zeros (with probability p) and ones (with probability 1-p), which is then multiplied with our input before dividing by 1-p. Note the use of the training attribute, which is available in any PyTorch nn.Module, and tells us if we are doing training or inference.\n\nnote: Do Your Own Experiments: In previous chapters of the book we’d be adding a code example for bernoulli_ here, so you can see exactly how it works. But now that you know enough to do this yourself, we’re going to be doing fewer and fewer examples for you, and instead expecting you to do your own experiments to see how things work. In this case, you’ll see in the end-of-chapter questionnaire that we’re asking you to experiment with bernoulli_—but don’t wait for us to ask you to experiment to develop your understanding of the code we’re studying; go ahead and do it anyway!\n\nUsing dropout before passing the output of our LSTM to the final layer will help reduce overfitting. Dropout is also used in many other models, including the default CNN head used in fastai.vision, and is available in fastai.tabular by passing the ps parameter (where each “p” is passed to each added Dropout layer), as we’ll see in &lt;&gt;.\nDropout has different behavior in training and validation mode, which we specified using the training attribute in Dropout. Calling the train method on a Module sets training to True (both for the module you call the method on and for every module it recursively contains), and eval sets it to False. This is done automatically when calling the methods of Learner, but if you are not using that class, remember to switch from one to the other as needed.\n\n\nActivation Regularization and Temporal Activation Regularization\nActivation regularization (AR) and temporal activation regularization (TAR) are two regularization methods very similar to weight decay, discussed in &lt;&gt;. When applying weight decay, we add a small penalty to the loss that aims at making the weights as small as possible. For activation regularization, it’s the final activations produced by the LSTM that we will try to make as small as possible, instead of the weights.\nTo regularize the final activations, we have to store those somewhere, then add the means of the squares of them to the loss (along with a multiplier alpha, which is just like wd for weight decay):\nloss += alpha * activations.pow(2).mean()\nTemporal activation regularization is linked to the fact we are predicting tokens in a sentence. That means it’s likely that the outputs of our LSTMs should somewhat make sense when we read them in order. TAR is there to encourage that behavior by adding a penalty to the loss to make the difference between two consecutive activations as small as possible: our activations tensor has a shape bs x sl x n_hid, and we read consecutive activations on the sequence length axis (the dimension in the middle). With this, TAR can be expressed as:\nloss += beta * (activations[:,1:] - activations[:,:-1]).pow(2).mean()\nalpha and beta are then two hyperparameters to tune. To make this work, we need our model with dropout to return three things: the proper output, the activations of the LSTM pre-dropout, and the activations of the LSTM post-dropout. AR is often applied on the dropped-out activations (to not penalize the activations we turned into zeros afterward) while TAR is applied on the non-dropped-out activations (because those zeros create big differences between two consecutive time steps). There is then a callback called RNNRegularizer that will apply this regularization for us.\n\n\nTraining a Weight-Tied Regularized LSTM\nWe can combine dropout (applied before we go into our output layer) with AR and TAR to train our previous LSTM. We just need to return three things instead of one: the normal output of our LSTM, the dropped-out activations, and the activations from our LSTMs. The last two will be picked up by the callback RNNRegularization for the contributions it has to make to the loss.\nAnother useful trick we can add from the AWD LSTM paper is weight tying. In a language model, the input embeddings represent a mapping from English words to activations, and the output hidden layer represents a mapping from activations to English words. We might expect, intuitively, that these mappings could be the same. We can represent this in PyTorch by assigning the same weight matrix to each of these layers:\nself.h_o.weight = self.i_h.weight\nIn LMModel7, we include these final tweaks:\n\n\nShow code\nclass LMModel7(Module):\n    def __init__(self, vocab_sz, n_hidden, n_layers, p):\n        self.i_h = nn.Embedding(vocab_sz, n_hidden)\n        self.rnn = nn.LSTM(n_hidden, n_hidden, n_layers, batch_first=True)\n        self.drop = nn.Dropout(p)\n        self.h_o = nn.Linear(n_hidden, vocab_sz)\n        self.h_o.weight = self.i_h.weight\n        self.h = [torch.zeros(n_layers, bs, n_hidden) for _ in range(2)]\n        \n    def forward(self, x):\n        raw,h = self.rnn(self.i_h(x), self.h)\n        out = self.drop(raw)\n        self.h = [h_.detach() for h_ in h]\n        return self.h_o(out),raw,out\n    \n    def reset(self): \n        for h in self.h: h.zero_()\n\n\nWe can create a regularized Learner using the RNNRegularizer callback:\n\n\nShow code\nlearn = Learner(dls, LMModel7(len(vocab), 64, 2, 0.5),\n                loss_func=CrossEntropyLossFlat(), metrics=accuracy,\n                cbs=[ModelResetter, RNNRegularizer(alpha=2, beta=1)])\n\n\nA TextLearner automatically adds those two callbacks for us (with those values for alpha and beta as defaults), so we can simplify the preceding line to:\n\n\nShow code\nlearn = TextLearner(dls, LMModel7(len(vocab), 64, 2, 0.4),\n                    loss_func=CrossEntropyLossFlat(), metrics=accuracy)\n\n\nWe can then train the model, and add additional regularization by increasing the weight decay to 0.1:\n\n\nShow code\nlearn.fit_one_cycle(15, 1e-2, wd=0.1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n2.693885\n2.013484\n0.466634\n00:02\n\n\n1\n1.685549\n1.187310\n0.629313\n00:02\n\n\n2\n0.973307\n0.791398\n0.745605\n00:02\n\n\n3\n0.555823\n0.640412\n0.794108\n00:02\n\n\n4\n0.351802\n0.557247\n0.836100\n00:02\n\n\n5\n0.244986\n0.594977\n0.807292\n00:02\n\n\n6\n0.192231\n0.511690\n0.846761\n00:02\n\n\n7\n0.162456\n0.520370\n0.858073\n00:02\n\n\n8\n0.142664\n0.525918\n0.842285\n00:02\n\n\n9\n0.128493\n0.495029\n0.858073\n00:02\n\n\n10\n0.117589\n0.464236\n0.867188\n00:02\n\n\n11\n0.109808\n0.466550\n0.869303\n00:02\n\n\n12\n0.104216\n0.455151\n0.871826\n00:02\n\n\n13\n0.100271\n0.452659\n0.873617\n00:02\n\n\n14\n0.098121\n0.458372\n0.869385\n00:02\n\n\n\n\n\nNow this is far better than our previous model!"
  },
  {
    "objectID": "posts/12_nlp_dive.html#conclusion",
    "href": "posts/12_nlp_dive.html#conclusion",
    "title": "A Language Model from Scratch",
    "section": "Conclusion",
    "text": "Conclusion\nYou have now seen everything that is inside the AWD-LSTM architecture we used in text classification in &lt;&gt;. It uses dropout in a lot more places:\n\nEmbedding dropout (inside the embedding layer, drops some random lines of embeddings)\nInput dropout (applied after the embedding layer)\nWeight dropout (applied to the weights of the LSTM at each training step)\nHidden dropout (applied to the hidden state between two layers)\n\nThis makes it even more regularized. Since fine-tuning those five dropout values (including the dropout before the output layer) is complicated, we have determined good defaults and allow the magnitude of dropout to be tuned overall with the drop_mult parameter you saw in that chapter (which is multiplied by each dropout).\nAnother architecture that is very powerful, especially in “sequence-to-sequence” problems (that is, problems where the dependent variable is itself a variable-length sequence, such as language translation), is the Transformers architecture. You can find it in a bonus chapter on the book’s website."
  },
  {
    "objectID": "posts/12_nlp_dive.html#questionnaire",
    "href": "posts/12_nlp_dive.html#questionnaire",
    "title": "A Language Model from Scratch",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nIf the dataset for your project is so big and complicated that working with it takes a significant amount of time, what should you do?\nWhy do we concatenate the documents in our dataset before creating a language model?\nTo use a standard fully connected network to predict the fourth word given the previous three words, what two tweaks do we need to make to our model?\nHow can we share a weight matrix across multiple layers in PyTorch?\nWrite a module that predicts the third word given the previous two words of a sentence, without peeking.\nWhat is a recurrent neural network?\nWhat is “hidden state”?\nWhat is the equivalent of hidden state in LMModel1?\nTo maintain the state in an RNN, why is it important to pass the text to the model in order?\nWhat is an “unrolled” representation of an RNN?\nWhy can maintaining the hidden state in an RNN lead to memory and performance problems? How do we fix this problem?\nWhat is “BPTT”?\nWrite code to print out the first few batches of the validation set, including converting the token IDs back into English strings, as we showed for batches of IMDb data in &lt;&gt;.\nWhat does the ModelResetter callback do? Why do we need it?\nWhat are the downsides of predicting just one output word for each three input words?\nWhy do we need a custom loss function for LMModel4?\nWhy is the training of LMModel4 unstable?\nIn the unrolled representation, we can see that a recurrent neural network actually has many layers. So why do we need to stack RNNs to get better results?\nDraw a representation of a stacked (multilayer) RNN.\nWhy should we get better results in an RNN if we call detach less often? Why might this not happen in practice with a simple RNN?\nWhy can a deep network result in very large or very small activations? Why does this matter?\nIn a computer’s floating-point representation of numbers, which numbers are the most precise?\nWhy do vanishing gradients prevent training?\nWhy does it help to have two hidden states in the LSTM architecture? What is the purpose of each one?\nWhat are these two states called in an LSTM?\nWhat is tanh, and how is it related to sigmoid?\nWhat is the purpose of this code in LSTMCell: h = torch.cat([h, input], dim=1)\nWhat does chunk do in PyTorch?\nStudy the refactored version of LSTMCell carefully to ensure you understand how and why it does the same thing as the non-refactored version.\nWhy can we use a higher learning rate for LMModel6?\nWhat are the three regularization techniques used in an AWD-LSTM model?\nWhat is “dropout”?\nWhy do we scale the acitvations with dropout? Is this applied during training, inference, or both?\nWhat is the purpose of this line from Dropout: if not self.training: return x\nExperiment with bernoulli_ to understand how it works.\nHow do you set your model in training mode in PyTorch? In evaluation mode?\nWrite the equation for activation regularization (in math or code, as you prefer). How is it different from weight decay?\nWrite the equation for temporal activation regularization (in math or code, as you prefer). Why wouldn’t we use this for computer vision problems?\nWhat is “weight tying” in a language model?\n\n\nFurther Research\n\nIn LMModel2, why can forward start with h=0? Why don’t we need to say h=torch.zeros(...)?\nWrite the code for an LSTM from scratch (you may refer to &lt;&gt;).\nSearch the internet for the GRU architecture and implement it from scratch, and try training a model. See if you can get results similar to those we saw in this chapter. Compare your results to the results of PyTorch’s built in GRU module.\nTake a look at the source code for AWD-LSTM in fastai, and try to map each of the lines of code to the concepts shown in this chapter."
  },
  {
    "objectID": "posts/14_resnet.html",
    "href": "posts/14_resnet.html",
    "title": "ResNets",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_resnet]]\nIn this chapter, we will build on top of the CNNs introduced in the previous chapter and explain to you the ResNet (residual network) architecture. It was introduced in 2015 by Kaiming He et al. in the article “Deep Residual Learning for Image Recognition” and is by far the most used model architecture nowadays. More recent developments in image models almost always use the same trick of residual connections, and most of the time, they are just a tweak of the original ResNet.\nWe will first show you the basic ResNet as it was first designed, then explain to you what modern tweaks make it more performant. But first, we will need a problem a little bit more difficult than the MNIST dataset, since we are already close to 100% accuracy with a regular CNN on it."
  },
  {
    "objectID": "posts/14_resnet.html#going-back-to-imagenette",
    "href": "posts/14_resnet.html#going-back-to-imagenette",
    "title": "ResNets",
    "section": "Going Back to Imagenette",
    "text": "Going Back to Imagenette\nIt’s going to be tough to judge any improvements we make to our models when we are already at an accuracy that is as high as we saw on MNIST in the previous chapter, so we will tackle a tougher image classification problem by going back to Imagenette. We’ll stick with small images to keep things reasonably fast.\nLet’s grab the data—we’ll use the already-resized 160 px version to make things faster still, and will random crop to 128 px:\n\n\nShow code\ndef get_data(url, presize, resize):\n    path = untar_data(url)\n    return DataBlock(\n        blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, \n        splitter=GrandparentSplitter(valid_name='val'),\n        get_y=parent_label, item_tfms=Resize(presize),\n        batch_tfms=[*aug_transforms(min_scale=0.5, size=resize),\n                    Normalize.from_stats(*imagenet_stats)],\n    ).dataloaders(path, bs=128)\n\n\n\n\nShow code\ndls = get_data(URLs.IMAGENETTE_160, 160, 128)\n\n\n\n\nShow code\ndls.show_batch(max_n=4)\n\n\n\n\n\n\n\n\n\nWhen we looked at MNIST we were dealing with 28×28-pixel images. For Imagenette we are going to be training with 128×128-pixel images. Later, we would like to be able to use larger images as well—at least as big as 224×224 pixels, the ImageNet standard. Do you recall how we managed to get a single vector of activations for each image out of the MNIST convolutional neural network?\nThe approach we used was to ensure that there were enough stride-2 convolutions such that the final layer would have a grid size of 1. Then we just flattened out the unit axes that we ended up with, to get a vector for each image (so, a matrix of activations for a mini-batch). We could do the same thing for Imagenette, but that would cause two problems:\n\nWe’d need lots of stride-2 layers to make our grid 1×1 at the end—perhaps more than we would otherwise choose.\nThe model would not work on images of any size other than the size we originally trained on.\n\nOne approach to dealing with the first of these issues would be to flatten the final convolutional layer in a way that handles a grid size other than 1×1. That is, we could simply flatten a matrix into a vector as we have done before, by laying out each row after the previous row. In fact, this is the approach that convolutional neural networks up until 2013 nearly always took. The most famous example is the 2013 ImageNet winner VGG, still sometimes used today. But there was another problem with this architecture: not only did it not work with images other than those of the same size used in the training set, but it required a lot of memory, because flattening out the convolutional layer resulted in many activations being fed into the final layers. Therefore, the weight matrices of the final layers were enormous.\nThis problem was solved through the creation of fully convolutional networks. The trick in fully convolutional networks is to take the average of activations across a convolutional grid. In other words, we can simply use this function:\n\n\nShow code\ndef avg_pool(x): return x.mean((2,3))\n\n\nAs you see, it is taking the mean over the x- and y-axes. This function will always convert a grid of activations into a single activation per image. PyTorch provides a slightly more versatile module called nn.AdaptiveAvgPool2d, which averages a grid of activations into whatever sized destination you require (although we nearly always use a size of 1).\nA fully convolutional network, therefore, has a number of convolutional layers, some of which will be stride 2, at the end of which is an adaptive average pooling layer, a flatten layer to remove the unit axes, and finally a linear layer. Here is our first fully convolutional network:\n\n\nShow code\ndef block(ni, nf): return ConvLayer(ni, nf, stride=2)\ndef get_model():\n    return nn.Sequential(\n        block(3, 16),\n        block(16, 32),\n        block(32, 64),\n        block(64, 128),\n        block(128, 256),\n        nn.AdaptiveAvgPool2d(1),\n        Flatten(),\n        nn.Linear(256, dls.c))\n\n\nWe’re going to be replacing the implementation of block in the network with other variants in a moment, which is why we’re not calling it conv any more. We’re also saving some time by taking advantage of fastai’s ConvLayer, which that already provides the functionality of conv from the last chapter (plus a lot more!).\n\nstop: Consider this question: would this approach makes sense for an optical character recognition (OCR) problem such as MNIST? The vast majority of practitioners tackling OCR and similar problems tend to use fully convolutional networks, because that’s what nearly everybody learns nowadays. But it really doesn’t make any sense! You can’t decide, for instance, whether a number is a 3 or an 8 by slicing it into small pieces, jumbling them up, and deciding whether on average each piece looks like a 3 or an 8. But that’s what adaptive average pooling effectively does! Fully convolutional networks are only really a good choice for objects that don’t have a single correct orientation or size (e.g., like most natural photos).\n\nOnce we are done with our convolutional layers, we will get activations of size bs x ch x h x w (batch size, a certain number of channels, height, and width). We want to convert this to a tensor of size bs x ch, so we take the average over the last two dimensions and flatten the trailing 1×1 dimension like we did in our previous model.\nThis is different from regular pooling in the sense that those layers will generally take the average (for average pooling) or the maximum (for max pooling) of a window of a given size. For instance, max pooling layers of size 2, which were very popular in older CNNs, reduce the size of our image by half on each dimension by taking the maximum of each 2×2 window (with a stride of 2).\nAs before, we can define a Learner with our custom model and then train it on the data we grabbed earlier:\n\n\nShow code\ndef get_learner(m):\n    return Learner(dls, m, loss_func=nn.CrossEntropyLoss(), metrics=accuracy\n                  ).to_fp16()\n\nlearn = get_learner(get_model())\n\n\n\n\nShow code\nlearn.lr_find()\n\n\n\n\n\n\n\n\n\n\n\n\n3e-3 is often a good learning rate for CNNs, and that appears to be the case here too, so let’s try that:\n\n\nShow code\nlearn.fit_one_cycle(5, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.901582\n2.155090\n0.325350\n00:07\n\n\n1\n1.559855\n1.586795\n0.507771\n00:07\n\n\n2\n1.296350\n1.295499\n0.571720\n00:07\n\n\n3\n1.144139\n1.139257\n0.639236\n00:07\n\n\n4\n1.049770\n1.092619\n0.659108\n00:07\n\n\n\n\n\nThat’s a pretty good start, considering we have to pick the correct one of 10 categories, and we’re training from scratch for just 5 epochs! We can do way better than this using a deeper mode, but just stacking new layers won’t really improve our results (you can try and see for yourself!). To work around this problem, ResNets introduce the idea of skip connections. We’ll explore those and other aspects of ResNets in the next section."
  },
  {
    "objectID": "posts/14_resnet.html#building-a-modern-cnn-resnet",
    "href": "posts/14_resnet.html#building-a-modern-cnn-resnet",
    "title": "ResNets",
    "section": "Building a Modern CNN: ResNet",
    "text": "Building a Modern CNN: ResNet\nWe now have all the pieces we need to build the models we have been using in our computer vision tasks since the beginning of this book: ResNets. We’ll introduce the main idea behind them and show how it improves accuracy on Imagenette compared to our previous model, before building a version with all the recent tweaks.\n\nSkip Connections\nIn 2015, the authors of the ResNet paper noticed something that they found curious. Even after using batchnorm, they saw that a network using more layers was doing less well than a network using fewer layers—and there were no other differences between the models. Most interestingly, the difference was observed not only in the validation set, but also in the training set; so, it wasn’t just a generalization issue, but a training issue. As the paper explains:\n\n: Unexpectedly, such degradation is not caused by overfitting, and adding more layers to a suitably deep model leads to higher training error, as [previously reported] and thoroughly verified by our experiments.\n\nThis phenomenon was illustrated by the graph in &lt;&gt;, with training error on the left and test error on the right.\n\nAs the authors mention here, they are not the first people to have noticed this curious fact. But they were the first to make a very important leap:\n\n: Let us consider a shallower architecture and its deeper counterpart that adds more layers onto it. There exists a solution by construction to the deeper model: the added layers are identity mapping, and the other layers are copied from the learned shallower model.\n\nAs this is an academic paper this process is described in a rather inaccessible way, but the concept is actually very simple: start with a 20-layer neural network that is trained well, and add another 36 layers that do nothing at all (for instance, they could be linear layers with a single weight equal to 1, and bias equal to 0). The result will be a 56-layer network that does exactly the same thing as the 20-layer network, proving that there are always deep networks that should be at least as good as any shallow network. But for some reason, SGD does not seem able to find them.\n\njargon: Identity mapping: Returning the input without changing it at all. This process is performed by an identity function.\n\nActually, there is another way to create those extra 36 layers, which is much more interesting. What if we replaced every occurrence of conv(x) with x + conv(x), where conv is the function from the previous chapter that adds a second convolution, then a batchnorm layer, then a ReLU. Furthermore, recall that batchnorm does gamma*y + beta. What if we initialized gamma to zero for every one of those final batchnorm layers? Then our conv(x) for those extra 36 layers will always be equal to zero, which means x+conv(x) will always be equal to x.\nWhat has that gained us? The key thing is that those 36 extra layers, as they stand, are an identity mapping, but they have parameters, which means they are trainable. So, we can start with our best 20-layer model, add these 36 extra layers which initially do nothing at all, and then fine-tune the whole 56-layer model. Those extra 36 layers can then learn the parameters that make them most useful.\nThe ResNet paper actually proposed a variant of this, which is to instead “skip over” every second convolution, so effectively we get x+conv2(conv1(x)). This is shown by the diagram in &lt;&gt; (from the paper).\n\nThat arrow on the right is just the x part of x+conv2(conv1(x)), and is known as the identity branch or skip connection. The path on the left is the conv2(conv1(x)) part. You can think of the identity path as providing a direct route from the input to the output.\nIn a ResNet, we don’t actually proceed by first training a smaller number of layers, and then adding new layers on the end and fine-tuning. Instead, we use ResNet blocks like the one in &lt;&gt; throughout the CNN, initialized from scratch in the usual way, and trained with SGD in the usual way. We rely on the skip connections to make the network easier to train with SGD.\nThere’s another (largely equivalent) way to think of these ResNet blocks. This is how the paper describes it:\n\n: Instead of hoping each few stacked layers directly fit a desired underlying mapping, we explicitly let these layers fit a residual mapping. Formally, denoting the desired underlying mapping as H(x), we let the stacked nonlinear layers fit another mapping of F(x) := H(x)−x. The original mapping is recast into F(x)+x. We hypothesize that it is easier to optimize the residual mapping than to optimize the original, unreferenced mapping. To the extreme, if an identity mapping were optimal, it would be easier to push the residual to zero than to fit an identity mapping by a stack of nonlinear layers.\n\nAgain, this is rather inaccessible prose—so let’s try to restate it in plain English! If the outcome of a given layer is x, when using a ResNet block that returns y = x+block(x) we’re not asking the block to predict y, we are asking it to predict the difference between y and x. So the job of those blocks isn’t to predict certain features, but to minimize the error between x and the desired y. A ResNet is, therefore, good at learning about slight differences between doing nothing and passing though a block of two convolutional layers (with trainable weights). This is how these models got their name: they’re predicting residuals (reminder: “residual” is prediction minus target).\nOne key concept that both of these two ways of thinking about ResNets share is the idea of ease of learning. This is an important theme. Recall the universal approximation theorem, which states that a sufficiently large network can learn anything. This is still true, but there turns out to be a very important difference between what a network can learn in principle, and what it is easy for it to learn with realistic data and training regimes. Many of the advances in neural networks over the last decade have been like the ResNet block: the result of realizing how to make something that was always possible actually feasible.\n\nnote: True Identity Path: The original paper didn’t actually do the trick of using zero for the initial value of gamma in the last batchnorm layer of each block; that came a couple of years later. So, the original version of ResNet didn’t quite begin training with a truly identity path through the ResNet blocks, but nonetheless having the ability to “navigate through” the skip connections did indeed make it train better. Adding the batchnorm gamma init trick made the models train at even higher learning rates.\n\nHere’s the definition of a simple ResNet block (where norm_type=NormType.BatchZero causes fastai to init the gamma weights of the last batchnorm layer to zero):\n\n\nShow code\nclass ResBlock(Module):\n    def __init__(self, ni, nf):\n        self.convs = nn.Sequential(\n            ConvLayer(ni,nf),\n            ConvLayer(nf,nf, norm_type=NormType.BatchZero))\n        \n    def forward(self, x): return x + self.convs(x)\n\n\nThere are two problems with this, however: it can’t handle a stride other than 1, and it requires that ni==nf. Stop for a moment to think carefully about why this is.\nThe issue is that with a stride of, say, 2 on one of the convolutions, the grid size of the output activations will be half the size on each axis of the input. So then we can’t add that back to x in forward because x and the output activations have different dimensions. The same basic issue occurs if ni!=nf: the shapes of the input and output connections won’t allow us to add them together.\nTo fix this, we need a way to change the shape of x to match the result of self.convs. Halving the grid size can be done using an average pooling layer with a stride of 2: that is, a layer that takes 2×2 patches from the input and replaces them with their average.\nChanging the number of channels can be done by using a convolution. We want this skip connection to be as close to an identity map as possible, however, which means making this convolution as simple as possible. The simplest possible convolution is one where the kernel size is 1. That means that the kernel is size ni*nf*1*1, so it’s only doing a dot product over the channels of each input pixel—it’s not combining across pixels at all. This kind of 1x1 convolution is very widely used in modern CNNs, so take a moment to think about how it works.\n\njargon: 1x1 convolution: A convolution with a kernel size of 1.\n\nHere’s a ResBlock using these tricks to handle changing shape in the skip connection:\n\n\nShow code\ndef _conv_block(ni,nf,stride):\n    return nn.Sequential(\n        ConvLayer(ni, nf, stride=stride),\n        ConvLayer(nf, nf, act_cls=None, norm_type=NormType.BatchZero))\n\n\n\n\nShow code\nclass ResBlock(Module):\n    def __init__(self, ni, nf, stride=1):\n        self.convs = _conv_block(ni,nf,stride)\n        self.idconv = noop if ni==nf else ConvLayer(ni, nf, 1, act_cls=None)\n        self.pool = noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True)\n\n    def forward(self, x):\n        return F.relu(self.convs(x) + self.idconv(self.pool(x)))\n\n\nNote that we’re using the noop function here, which simply returns its input unchanged (noop is a computer science term that stands for “no operation”). In this case, idconv does nothing at all if ni==nf, and pool does nothing if stride==1, which is what we wanted in our skip connection.\nAlso, you’ll see that we’ve removed the ReLU (act_cls=None) from the final convolution in convs and from idconv, and moved it to after we add the skip connection. The thinking behind this is that the whole ResNet block is like a layer, and you want your activation to be after your layer.\nLet’s replace our block with ResBlock, and try it out:\n\n\nShow code\ndef block(ni,nf): return ResBlock(ni, nf, stride=2)\nlearn = get_learner(get_model())\n\n\n\n\nShow code\nlearn.fit_one_cycle(5, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.973174\n1.845491\n0.373248\n00:08\n\n\n1\n1.678627\n1.778713\n0.439236\n00:08\n\n\n2\n1.386163\n1.596503\n0.507261\n00:08\n\n\n3\n1.177839\n1.102993\n0.644841\n00:09\n\n\n4\n1.052435\n1.038013\n0.667771\n00:09\n\n\n\n\n\nIt’s not much better. But the whole point of this was to allow us to train deeper models, and we’re not really taking advantage of that yet. To create a model that’s, say, twice as deep, all we need to do is replace our block with two ResBlocks in a row:\n\n\nShow code\ndef block(ni, nf):\n    return nn.Sequential(ResBlock(ni, nf, stride=2), ResBlock(nf, nf))\n\n\n\n\nShow code\nlearn = get_learner(get_model())\nlearn.fit_one_cycle(5, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.964076\n1.864578\n0.355159\n00:12\n\n\n1\n1.636880\n1.596789\n0.502675\n00:12\n\n\n2\n1.335378\n1.304472\n0.588535\n00:12\n\n\n3\n1.089160\n1.065063\n0.663185\n00:12\n\n\n4\n0.942904\n0.963589\n0.692739\n00:12\n\n\n\n\n\nNow we’re making good progress!\nThe authors of the ResNet paper went on to win the 2015 ImageNet challenge. At the time, this was by far the most important annual event in computer vision. We have already seen another ImageNet winner: the 2013 winners, Zeiler and Fergus. It is interesting to note that in both cases the starting points for the breakthroughs were experimental observations: observations about what layers actually learn, in the case of Zeiler and Fergus, and observations about which kinds of networks can be trained, in the case of the ResNet authors. This ability to design and analyze thoughtful experiments, or even just to see an unexpected result, say “Hmmm, that’s interesting,” and then, most importantly, set about figuring out what on earth is going on, with great tenacity, is at the heart of many scientific discoveries. Deep learning is not like pure mathematics. It is a heavily experimental field, so it’s important to be a strong practitioner, not just a theoretician.\nSince the ResNet was introduced, it’s been widely studied and applied to many domains. One of the most interesting papers, published in 2018, is Hao Li et al.’s “Visualizing the Loss Landscape of Neural Nets”. It shows that using skip connections helps smooth the loss function, which makes training easier as it avoids falling into a very sharp area. &lt;&gt; shows a stunning picture from the paper, illustrating the difference between the bumpy terrain that SGD has to navigate to optimize a regular CNN (left) versus the smooth surface of a ResNet (right).\n\nOur first model is already good, but further research has discovered more tricks we can apply to make it better. We’ll look at those next.\n\n\nA State-of-the-Art ResNet\nIn “Bag of Tricks for Image Classification with Convolutional Neural Networks”, Tong He et al. study different variations of the ResNet architecture that come at almost no additional cost in terms of number of parameters or computation. By using a tweaked ResNet-50 architecture and Mixup they achieved 94.6% top-5 accuracy on ImageNet, in comparison to 92.2% with a regular ResNet-50 without Mixup. This result is better than that achieved by regular ResNet models that are twice as deep (and twice as slow, and much more likely to overfit).\n\njargon: top-5 accuracy: A metric testing how often the label we want is in the top 5 predictions of our model. It was used in the ImageNet competition because many of the images contained multiple objects, or contained objects that could be easily confused or may even have been mislabeled with a similar label. In these situations, looking at top-1 accuracy may be inappropriate. However, recently CNNs have been getting so good that top-5 accuracy is nearly 100%, so some researchers are using top-1 accuracy for ImageNet too now.\n\nWe’ll use this tweaked version as we scale up to the full ResNet, because it’s substantially better. It differs a little bit from our previous implementation, in that instead of just starting with ResNet blocks, it begins with a few convolutional layers followed by a max pooling layer. This is what the first layers, called the stem of the network, look like:\n\n\nShow code\ndef _resnet_stem(*sizes):\n    return [\n        ConvLayer(sizes[i], sizes[i+1], 3, stride = 2 if i==0 else 1)\n            for i in range(len(sizes)-1)\n    ] + [nn.MaxPool2d(kernel_size=3, stride=2, padding=1)]\n\n\n\n\nShow code\n#hide_output\n_resnet_stem(3,32,32,64)\n\n\n[ConvLayer(\n   (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n   (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n   (2): ReLU()\n ), ConvLayer(\n   (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n   (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n   (2): ReLU()\n ), ConvLayer(\n   (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n   (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n   (2): ReLU()\n ), MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)]\n\n\n[ConvLayer(\n   (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n   (1): BatchNorm2d(32, eps=1e-05, momentum=0.1)\n   (2): ReLU()\n ), ConvLayer(\n   (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n   (1): BatchNorm2d(32, eps=1e-05, momentum=0.1)\n   (2): ReLU()\n ), ConvLayer(\n   (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n   (1): BatchNorm2d(64, eps=1e-05, momentum=0.1)\n   (2): ReLU()\n ), MaxPool2d(kernel_size=3, stride=2, padding=1, ceil_mode=False)]\n\njargon: Stem: The first few layers of a CNN. Generally, the stem has a different structure than the main body of the CNN.\n\nThe reason that we have a stem of plain convolutional layers, instead of ResNet blocks, is based on a very important insight about all deep convolutional neural networks: the vast majority of the computation occurs in the early layers. Therefore, we should keep the early layers as fast and simple as possible.\nTo see why so much computation occurs in the early layers, consider the very first convolution on a 128-pixel input image. If it is a stride-1 convolution, then it will apply the kernel to every one of the 128×128 pixels. That’s a lot of work! In the later layers, however, the grid size could be as small as 4×4 or even 2×2, so there are far fewer kernel applications to do.\nOn the other hand, the first-layer convolution only has 3 input features and 32 output features. Since it is a 3×3 kernel, this is 3×32×3×3 = 864 parameters in the weights. But the last convolution will have 256 input features and 512 output features, resulting in 1,179,648 weights! So the first layers contain the vast majority of the computation, but the last layers contain the vast majority of the parameters.\nA ResNet block takes more computation than a plain convolutional block, since (in the stride-2 case) a ResNet block has three convolutions and a pooling layer. That’s why we want to have plain convolutions to start off our ResNet.\nWe’re now ready to show the implementation of a modern ResNet, with the “bag of tricks.” It uses four groups of ResNet blocks, with 64, 128, 256, then 512 filters. Each group starts with a stride-2 block, except for the first one, since it’s just after a MaxPooling layer:\n\n\nShow code\nclass ResNet(nn.Sequential):\n    def __init__(self, n_out, layers, expansion=1):\n        stem = _resnet_stem(3,32,32,64)\n        self.block_szs = [64, 64, 128, 256, 512]\n        for i in range(1,5): self.block_szs[i] *= expansion\n        blocks = [self._make_layer(*o) for o in enumerate(layers)]\n        super().__init__(*stem, *blocks,\n                         nn.AdaptiveAvgPool2d(1), Flatten(),\n                         nn.Linear(self.block_szs[-1], n_out))\n    \n    def _make_layer(self, idx, n_layers):\n        stride = 1 if idx==0 else 2\n        ch_in,ch_out = self.block_szs[idx:idx+2]\n        return nn.Sequential(*[\n            ResBlock(ch_in if i==0 else ch_out, ch_out, stride if i==0 else 1)\n            for i in range(n_layers)\n        ])\n\n\nThe _make_layer function is just there to create a series of n_layers blocks. The first one is going from ch_in to ch_out with the indicated stride and all the others are blocks of stride 1 with ch_out to ch_out tensors. Once the blocks are defined, our model is purely sequential, which is why we define it as a subclass of nn.Sequential. (Ignore the expansion parameter for now; we’ll discuss it in the next section. For now, it’ll be 1, so it doesn’t do anything.)\nThe various versions of the models (ResNet-18, -34, -50, etc.) just change the number of blocks in each of those groups. This is the definition of a ResNet-18:\n\n\nShow code\nrn = ResNet(dls.c, [2,2,2,2])\n\n\nLet’s train it for a little bit and see how it fares compared to the previous model:\n\n\nShow code\nlearn = get_learner(rn)\nlearn.fit_one_cycle(5, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.673882\n1.828394\n0.413758\n00:13\n\n\n1\n1.331675\n1.572685\n0.518217\n00:13\n\n\n2\n1.087224\n1.086102\n0.650701\n00:13\n\n\n3\n0.900428\n0.968219\n0.684331\n00:12\n\n\n4\n0.760280\n0.782558\n0.757197\n00:12\n\n\n\n\n\nEven though we have more channels (and our model is therefore even more accurate), our training is just as fast as before, thanks to our optimized stem.\nTo make our model deeper without taking too much compute or memory, we can use another kind of layer introduced by the ResNet paper for ResNets with a depth of 50 or more: the bottleneck layer.\n\n\nBottleneck Layers\nInstead of stacking two convolutions with a kernel size of 3, bottleneck layers use three different convolutions: two 1×1 (at the beginning and the end) and one 3×3, as shown on the right in &lt;&gt;.\n\nWhy is that useful? 1×1 convolutions are much faster, so even if this seems to be a more complex design, this block executes faster than the first ResNet block we saw. This then lets us use more filters: as we see in the illustration, the number of filters in and out is 4 times higher (256 instead of 64) diminish then restore the number of channels (hence the name bottleneck). The overall impact is that we can use more filters in the same amount of time.\nLet’s try replacing our ResBlock with this bottleneck design:\n\n\nShow code\ndef _conv_block(ni,nf,stride):\n    return nn.Sequential(\n        ConvLayer(ni, nf//4, 1),\n        ConvLayer(nf//4, nf//4, stride=stride), \n        ConvLayer(nf//4, nf, 1, act_cls=None, norm_type=NormType.BatchZero))\n\n\nWe’ll use this to create a ResNet-50 with group sizes of (3,4,6,3). We now need to pass 4 in to the expansion parameter of ResNet, since we need to start with four times less channels and we’ll end with four times more channels.\nDeeper networks like this don’t generally show improvements when training for only 5 epochs, so we’ll bump it up to 20 epochs this time to make the most of our bigger model. And to really get great results, let’s use bigger images too:\n\n\nShow code\ndls = get_data(URLs.IMAGENETTE_320, presize=320, resize=224)\n\n\nWe don’t have to do anything to account for the larger 224-pixel images; thanks to our fully convolutional network, it just works. This is also why we were able to do progressive resizing earlier in the book—the models we used were fully convolutional, so we were even able to fine-tune models trained with different sizes. We can now train our model and see the effects:\n\n\nShow code\nrn = ResNet(dls.c, [3,4,6,3], 4)\n\n\n\n\nShow code\nlearn = get_learner(rn)\nlearn.fit_one_cycle(20, 3e-3)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n1.613448\n1.473355\n0.514140\n00:31\n\n\n1\n1.359604\n2.050794\n0.397452\n00:31\n\n\n2\n1.253112\n4.511735\n0.387006\n00:31\n\n\n3\n1.133450\n2.575221\n0.396178\n00:31\n\n\n4\n1.054752\n1.264525\n0.613758\n00:32\n\n\n5\n0.927930\n2.670484\n0.422675\n00:32\n\n\n6\n0.838268\n1.724588\n0.528662\n00:32\n\n\n7\n0.748289\n1.180668\n0.666497\n00:31\n\n\n8\n0.688637\n1.245039\n0.650446\n00:32\n\n\n9\n0.645530\n1.053691\n0.674904\n00:31\n\n\n10\n0.593401\n1.180786\n0.676433\n00:32\n\n\n11\n0.536634\n0.879937\n0.713885\n00:32\n\n\n12\n0.479208\n0.798356\n0.741656\n00:32\n\n\n13\n0.440071\n0.600644\n0.806879\n00:32\n\n\n14\n0.402952\n0.450296\n0.858599\n00:32\n\n\n15\n0.359117\n0.486126\n0.846369\n00:32\n\n\n16\n0.313642\n0.442215\n0.861911\n00:32\n\n\n17\n0.294050\n0.485967\n0.853503\n00:32\n\n\n18\n0.270583\n0.408566\n0.875924\n00:32\n\n\n19\n0.266003\n0.411752\n0.872611\n00:33\n\n\n\n\n\nWe’re getting a great result now! Try adding Mixup, and then training this for a hundred epochs while you go get lunch. You’ll have yourself a very accurate image classifier, trained from scratch.\nThe bottleneck design we’ve shown here is typically only used in ResNet-50, -101, and -152 models. ResNet-18 and -34 models usually use the non-bottleneck design seen in the previous section. However, we’ve noticed that the bottleneck layer generally works better even for the shallower networks. This just goes to show that the little details in papers tend to stick around for years, even if they’re actually not quite the best design! Questioning assumptions and “stuff everyone knows” is always a good idea, because this is still a new field, and there are lots of details that aren’t always done well."
  },
  {
    "objectID": "posts/14_resnet.html#conclusion",
    "href": "posts/14_resnet.html#conclusion",
    "title": "ResNets",
    "section": "Conclusion",
    "text": "Conclusion\nYou have now seen how the models we have been using for computer vision since the first chapter are built, using skip connections to allow deeper models to be trained. Even if there has been a lot of research into better architectures, they all use one version or another of this trick, to make a direct path from the input to the end of the network. When using transfer learning, the ResNet is the pretrained model. In the next chapter, we will look at the final details of how the models we actually used were built from it."
  },
  {
    "objectID": "posts/14_resnet.html#questionnaire",
    "href": "posts/14_resnet.html#questionnaire",
    "title": "ResNets",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nHow did we get to a single vector of activations in the CNNs used for MNIST in previous chapters? Why isn’t that suitable for Imagenette?\nWhat do we do for Imagenette instead?\nWhat is “adaptive pooling”?\nWhat is “average pooling”?\nWhy do we need Flatten after an adaptive average pooling layer?\nWhat is a “skip connection”?\nWhy do skip connections allow us to train deeper models?\nWhat does &lt;&gt; show? How did that lead to the idea of skip connections?\nWhat is “identity mapping”?\nWhat is the basic equation for a ResNet block (ignoring batchnorm and ReLU layers)?\nWhat do ResNets have to do with residuals?\nHow do we deal with the skip connection when there is a stride-2 convolution? How about when the number of filters changes?\nHow can we express a 1×1 convolution in terms of a vector dot product?\nCreate a 1x1 convolution with F.conv2d or nn.Conv2d and apply it to an image. What happens to the shape of the image?\nWhat does the noop function return?\nExplain what is shown in &lt;&gt;.\nWhen is top-5 accuracy a better metric than top-1 accuracy?\nWhat is the “stem” of a CNN?\nWhy do we use plain convolutions in the CNN stem, instead of ResNet blocks?\nHow does a bottleneck block differ from a plain ResNet block?\nWhy is a bottleneck block faster?\nHow do fully convolutional nets (and nets with adaptive pooling in general) allow for progressive resizing?\n\n\nFurther Research\n\nTry creating a fully convolutional net with adaptive average pooling for MNIST (note that you’ll need fewer stride-2 layers). How does it compare to a network without such a pooling layer?\nIn &lt;&gt; we introduce Einstein summation notation. Skip ahead to see how this works, and then write an implementation of the 1×1 convolution operation using torch.einsum. Compare it to the same operation using torch.conv2d.\nWrite a “top-5 accuracy” function using plain PyTorch or plain Python.\nTrain a model on Imagenette for more epochs, with and without label smoothing. Take a look at the Imagenette leaderboards and see how close you can get to the best results shown. Read the linked pages describing the leading approaches."
  },
  {
    "objectID": "posts/16_accel_sgd.html",
    "href": "posts/16_accel_sgd.html",
    "title": "The Training Process",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_accel_sgd]]\nYou now know how to create state-of-the-art architectures for computer vision, natural language processing, tabular analysis, and collaborative filtering, and you know how to train them quickly. So we’re done, right? Not quite yet. We still have to explore a little bit more the training process.\nWe explained in &lt;&gt; the basis of stochastic gradient descent: pass a mini-batch to the model, compare it to our target with the loss function, then compute the gradients of this loss function with regard to each weight before updating the weights with the formula:\nWe implemented this from scratch in a training loop, and also saw that PyTorch provides a simple nn.SGD class that does this calculation for each parameter for us. In this chapter we will build some faster optimizers, using a flexible foundation. But that’s not all we might want to change in the training process. For any tweak of the training loop, we will need a way to add some code to the basis of SGD. The fastai library has a system of callbacks to do this, and we will teach you all about it.\nLet’s start with standard SGD to get a baseline, then we will introduce the most commonly used optimizers."
  },
  {
    "objectID": "posts/16_accel_sgd.html#establishing-a-baseline",
    "href": "posts/16_accel_sgd.html#establishing-a-baseline",
    "title": "The Training Process",
    "section": "Establishing a Baseline",
    "text": "Establishing a Baseline\nFirst, we’ll create a baseline, using plain SGD, and compare it to fastai’s default optimizer. We’ll start by grabbing Imagenette with the same get_data we used in &lt;&gt;:\n\n\nShow code\n#hide_input\ndef get_data(url, presize, resize):\n    path = untar_data(url)\n    return DataBlock(\n        blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, \n        splitter=GrandparentSplitter(valid_name='val'),\n        get_y=parent_label, item_tfms=Resize(presize),\n        batch_tfms=[*aug_transforms(min_scale=0.5, size=resize),\n                    Normalize.from_stats(*imagenet_stats)],\n    ).dataloaders(path, bs=128)\n\n\n\n\nShow code\ndls = get_data(URLs.IMAGENETTE_160, 160, 128)\n\n\nWe’ll create a ResNet-34 without pretraining, and pass along any arguments received:\n\n\nShow code\ndef get_learner(**kwargs):\n    return vision_learner(dls, resnet34, pretrained=False,\n                    metrics=accuracy, **kwargs).to_fp16()\n\n\nHere’s the default fastai optimizer, with the usual 3e-3 learning rate:\n\n\nShow code\nlearn = get_learner()\nlearn.fit_one_cycle(3, 0.003)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n2.571932\n2.685040\n0.322548\n00:11\n\n\n1\n1.904674\n1.852589\n0.437452\n00:11\n\n\n2\n1.586909\n1.374908\n0.594904\n00:11\n\n\n\n\n\nNow let’s try plain SGD. We can pass opt_func (optimization function) to vision_learner to get fastai to use any optimizer:\n\n\nShow code\nlearn = get_learner(opt_func=SGD)\n\n\nThe first thing to look at is lr_find:\n\n\nShow code\nlearn.lr_find()\n\n\n\n\n\n\n\n\n\n\n\n\nIt looks like we’ll need to use a higher learning rate than we normally use:\n\n\nShow code\nlearn.fit_one_cycle(3, 0.03, moms=(0,0,0))\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n2.969412\n2.214596\n0.242038\n00:09\n\n\n1\n2.442730\n1.845950\n0.362548\n00:09\n\n\n2\n2.157159\n1.741143\n0.408917\n00:09\n\n\n\n\n\nBecause accelerating SGD with momentum is such a good idea, fastai does this by default in fit_one_cycle, so we turn it off with moms=(0,0,0). We’ll be discussing momentum shortly.)\nClearly, plain SGD isn’t training as fast as we’d like. So let’s learn some tricks to get accelerated training!"
  },
  {
    "objectID": "posts/16_accel_sgd.html#a-generic-optimizer",
    "href": "posts/16_accel_sgd.html#a-generic-optimizer",
    "title": "The Training Process",
    "section": "A Generic Optimizer",
    "text": "A Generic Optimizer\nTo build up our accelerated SGD tricks, we’ll need to start with a nice flexible optimizer foundation. No library prior to fastai provided such a foundation, but during fastai’s development we realized that all the optimizer improvements we’d seen in the academic literature could be handled using optimizer callbacks. These are small pieces of code that we can compose, mix and match in an optimizer to build the optimizer step. They are called by fastai’s lightweight Optimizer class. These are the definitions in Optimizer of the two key methods that we’ve been using in this book:\ndef zero_grad(self):\n    for p,*_ in self.all_params():\n        p.grad.detach_()\n        p.grad.zero_()\n\ndef step(self):\n    for p,pg,state,hyper in self.all_params():\n        for cb in self.cbs:\n            state = _update(state, cb(p, **{**state, **hyper}))\n        self.state[p] = state\nAs we saw when training an MNIST model from scratch, zero_grad just loops through the parameters of the model and sets the gradients to zero. It also calls detach_, which removes any history of gradient computation, since it won’t be needed after zero_grad.\nThe more interesting method is step, which loops through the callbacks (cbs) and calls them to update the parameters (the _update function just calls state.update if there’s anything returned by cb). As you can see, Optimizer doesn’t actually do any SGD steps itself. Let’s see how we can add SGD to Optimizer.\nHere’s an optimizer callback that does a single SGD step, by multiplying -lr by the gradients and adding that to the parameter (when Tensor.add_ in PyTorch is passed two parameters, they are multiplied together before the addition):\n\n\nShow code\ndef sgd_cb(p, lr, **kwargs): p.data.add_(-lr, p.grad.data)\n\n\nWe can pass this to Optimizer using the cbs parameter; we’ll need to use partial since Learner will call this function to create our optimizer later:\n\n\nShow code\nopt_func = partial(Optimizer, cbs=[sgd_cb])\n\n\nLet’s see if this trains:\n\n\nShow code\nlearn = get_learner(opt_func=opt_func)\nlearn.fit(3, 0.03)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n2.730918\n2.009971\n0.332739\n00:09\n\n\n1\n2.204893\n1.747202\n0.441529\n00:09\n\n\n2\n1.875621\n1.684515\n0.445350\n00:09\n\n\n\n\n\nIt’s working! So that’s how we create SGD from scratch in fastai. Now let’s see what “momentum” is."
  },
  {
    "objectID": "posts/16_accel_sgd.html#momentum",
    "href": "posts/16_accel_sgd.html#momentum",
    "title": "The Training Process",
    "section": "Momentum",
    "text": "Momentum\nAs described in &lt;&gt;, SGD can be thought of as standing at the top of a mountain and working your way down by taking a step in the direction of the steepest slope at each point in time. But what if we have a ball rolling down the mountain? It won’t, at each given point, exactly follow the direction of the gradient, as it will have momentum. A ball with more momentum (for instance, a heavier ball) will skip over little bumps and holes, and be more likely to get to the bottom of a bumpy mountain. A ping pong ball, on the other hand, will get stuck in every little crevice.\nSo how can we bring this idea over to SGD? We can use a moving average, instead of only the current gradient, to make our step:\nweight.avg = beta * weight.avg + (1-beta) * weight.grad\nnew_weight = weight - lr * weight.avg\nHere beta is some number we choose which defines how much momentum to use. If beta is 0, then the first equation becomes weight.avg = weight.grad, so we end up with plain SGD. But if it’s a number close to 1, then the main direction chosen is an average of the previous steps. (If you have done a bit of statistics, you may recognize in the first equation an exponentially weighted moving average, which is very often used to denoise data and get the underlying tendency.)\nNote that we are writing weight.avg to highlight the fact that we need to store the moving averages for each parameter of the model (they all have their own independent moving averages).\n&lt;&gt; shows an example of noisy data for a single parameter, with the momentum curve plotted in red, and the gradients of the parameter plotted in blue. The gradients increase, then decrease, and the momentum does a good job of following the general trend without getting too influenced by noise.\n\n\nShow code\n#hide_input\n#id img_momentum\n#caption An example of momentum\n#alt Graph showing an example of momentum\nx = np.linspace(-4, 4, 100)\ny = 1 - (x/3) ** 2\nx1 = x + np.random.randn(100) * 0.1\ny1 = y + np.random.randn(100) * 0.1\nplt.scatter(x1,y1)\nidx = x1.argsort()\nbeta,avg,res = 0.7,0,[]\nfor i in idx:\n    avg = beta * avg + (1-beta) * y1[i]\n    res.append(avg/(1-beta**(i+1)))\nplt.plot(x1[idx],np.array(res), color='red');\n\n\n\n\n\n\n\n\n\nIt works particularly well if the loss function has narrow canyons we need to navigate: vanilla SGD would send us bouncing from one side to the other, while SGD with momentum will average those to roll smoothly down the side. The parameter beta determines the strength of the momentum we are using: with a small beta we stay closer to the actual gradient values, whereas with a high beta we will mostly go in the direction of the average of the gradients and it will take a while before any change in the gradients makes that trend move.\nWith a large beta, we might miss that the gradients have changed directions and roll over a small local minima. This is a desired side effect: intuitively, when we show a new input to our model, it will look like something in the training set but won’t be exactly like it. That means it will correspond to a point in the loss function that is close to the minimum we ended up with at the end of training, but not exactly at that minimum. So, we would rather end up training in a wide minimum, where nearby points have approximately the same loss (or if you prefer, a point where the loss is as flat as possible). &lt;&gt; shows how the chart in &lt;&gt; varies as we change beta.\n\n\nShow code\n#hide_input\n#id img_betas\n#caption Momentum with different beta values\n#alt Graph showing how the beta value influences momentum\nx = np.linspace(-4, 4, 100)\ny = 1 - (x/3) ** 2\nx1 = x + np.random.randn(100) * 0.1\ny1 = y + np.random.randn(100) * 0.1\n_,axs = plt.subplots(2,2, figsize=(12,8))\nbetas = [0.5,0.7,0.9,0.99]\nidx = x1.argsort()\nfor beta,ax in zip(betas, axs.flatten()):\n    ax.scatter(x1,y1)\n    avg,res = 0,[]\n    for i in idx:\n        avg = beta * avg + (1-beta) * y1[i]\n        res.append(avg)#/(1-beta**(i+1)))\n    ax.plot(x1[idx],np.array(res), color='red');\n    ax.set_title(f'beta={beta}')\n\n\n\n\n\n\n\n\n\nWe can see in these examples that a beta that’s too high results in the overall changes in gradient getting ignored. In SGD with momentum, a value of beta that is often used is 0.9.\nfit_one_cycle by default starts with a beta of 0.95, gradually adjusts it to 0.85, and then gradually moves it back to 0.95 at the end of training. Let’s see how our training goes with momentum added to plain SGD.\nIn order to add momentum to our optimizer, we’ll first need to keep track of the moving average gradient, which we can do with another callback. When an optimizer callback returns a dict, it is used to update the state of the optimizer and is passed back to the optimizer on the next step. So this callback will keep track of the gradient averages in a parameter called grad_avg:\n\n\nShow code\ndef average_grad(p, mom, grad_avg=None, **kwargs):\n    if grad_avg is None: grad_avg = torch.zeros_like(p.grad.data)\n    return {'grad_avg': grad_avg*mom + p.grad.data}\n\n\nTo use it, we just have to replace p.grad.data with grad_avg in our step function:\n\n\nShow code\ndef momentum_step(p, lr, grad_avg, **kwargs): p.data.add_(-lr, grad_avg)\n\n\n\n\nShow code\nopt_func = partial(Optimizer, cbs=[average_grad,momentum_step], mom=0.9)\n\n\nLearner will automatically schedule mom and lr, so fit_one_cycle will even work with our custom Optimizer:\n\n\nShow code\nlearn = get_learner(opt_func=opt_func)\nlearn.fit_one_cycle(3, 0.03)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n2.856000\n2.493429\n0.246115\n00:10\n\n\n1\n2.504205\n2.463813\n0.348280\n00:10\n\n\n2\n2.187387\n1.755670\n0.418853\n00:10\n\n\n\n\n\n\n\nShow code\nlearn.recorder.plot_sched()\n\n\n\n\n\n\n\n\n\nWe’re still not getting great results, so let’s see what else we can do."
  },
  {
    "objectID": "posts/16_accel_sgd.html#rmsprop",
    "href": "posts/16_accel_sgd.html#rmsprop",
    "title": "The Training Process",
    "section": "RMSProp",
    "text": "RMSProp\nRMSProp is another variant of SGD introduced by Geoffrey Hinton in Lecture 6e of his Coursera class “Neural Networks for Machine Learning”. The main difference from SGD is that it uses an adaptive learning rate: instead of using the same learning rate for every parameter, each parameter gets its own specific learning rate controlled by a global learning rate. That way we can speed up training by giving a higher learning rate to the weights that need to change a lot while the ones that are good enough get a lower learning rate.\nHow do we decide which parameters should have a high learning rate and which should not? We can look at the gradients to get an idea. If a parameter’s gradients have been close to zero for a while, that parameter will need a higher learning rate because the loss is flat. On the other hand, if the gradients are all over the place, we should probably be careful and pick a low learning rate to avoid divergence. We can’t just average the gradients to see if they’re changing a lot, because the average of a large positive and a large negative number is close to zero. Instead, we can use the usual trick of either taking the absolute value or the squared values (and then taking the square root after the mean).\nOnce again, to determine the general tendency behind the noise, we will use a moving average—specifically the moving average of the gradients squared. Then we will update the corresponding weight by using the current gradient (for the direction) divided by the square root of this moving average (that way if it’s low, the effective learning rate will be higher, and if it’s high, the effective learning rate will be lower):\nw.square_avg = alpha * w.square_avg + (1-alpha) * (w.grad ** 2)\nnew_w = w - lr * w.grad / math.sqrt(w.square_avg + eps)\nThe eps (epsilon) is added for numerical stability (usually set at 1e-8), and the default value for alpha is usually 0.99.\nWe can add this to Optimizer by doing much the same thing we did for avg_grad, but with an extra **2:\n\n\nShow code\ndef average_sqr_grad(p, sqr_mom, sqr_avg=None, **kwargs):\n    if sqr_avg is None: sqr_avg = torch.zeros_like(p.grad.data)\n    return {'sqr_avg': sqr_mom*sqr_avg + (1-sqr_mom)*p.grad.data**2}\n\n\nAnd we can define our step function and optimizer as before:\n\n\nShow code\ndef rms_prop_step(p, lr, sqr_avg, eps, grad_avg=None, **kwargs):\n    denom = sqr_avg.sqrt().add_(eps)\n    p.data.addcdiv_(-lr, p.grad, denom)\n\nopt_func = partial(Optimizer, cbs=[average_sqr_grad,rms_prop_step],\n                   sqr_mom=0.99, eps=1e-7)\n\n\nLet’s try it out:\n\n\nShow code\nlearn = get_learner(opt_func=opt_func)\nlearn.fit_one_cycle(3, 0.003)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\ntime\n\n\n\n\n0\n2.766912\n1.845900\n0.402548\n00:11\n\n\n1\n2.194586\n1.510269\n0.504459\n00:11\n\n\n2\n1.869099\n1.447939\n0.544968\n00:11\n\n\n\n\n\nMuch better! Now we just have to bring these ideas together, and we have Adam, fastai’s default optimizer."
  },
  {
    "objectID": "posts/16_accel_sgd.html#adam",
    "href": "posts/16_accel_sgd.html#adam",
    "title": "The Training Process",
    "section": "Adam",
    "text": "Adam\nAdam mixes the ideas of SGD with momentum and RMSProp together: it uses the moving average of the gradients as a direction and divides by the square root of the moving average of the gradients squared to give an adaptive learning rate to each parameter.\nThere is one other difference in how Adam calculates moving averages. It takes the unbiased moving average, which is:\nw.avg = beta * w.avg + (1-beta) * w.grad\nunbias_avg = w.avg / (1 - (beta**(i+1)))\nif we are the i-th iteration (starting at 0 like Python does). This divisor of 1 - (beta**(i+1)) makes sure the unbiased average looks more like the gradients at the beginning (since beta &lt; 1, the denominator is very quickly close to 1).\nPutting everything together, our update step looks like:\nw.avg = beta1 * w.avg + (1-beta1) * w.grad\nunbias_avg = w.avg / (1 - (beta1**(i+1)))\nw.sqr_avg = beta2 * w.sqr_avg + (1-beta2) * (w.grad ** 2)\nnew_w = w - lr * unbias_avg / sqrt(w.sqr_avg + eps)\nLike for RMSProp, eps is usually set to 1e-8, and the default for (beta1,beta2) suggested by the literature is (0.9,0.999).\nIn fastai, Adam is the default optimizer we use since it allows faster training, but we’ve found that beta2=0.99 is better suited to the type of schedule we are using. beta1 is the momentum parameter, which we specify with the argument moms in our call to fit_one_cycle. As for eps, fastai uses a default of 1e-5. eps is not just useful for numerical stability. A higher eps limits the maximum value of the adjusted learning rate. To take an extreme example, if eps is 1, then the adjusted learning will never be higher than the base learning rate.\nRather than show all the code for this in the book, we’ll let you look at the optimizer notebook in fastai’s GitHub repository (browse the nbs folder and search for the notebook called optimizer). You’ll see all the code we’ve shown so far, along with Adam and other optimizers, and lots of examples and tests.\nOne thing that changes when we go from SGD to Adam is the way we apply weight decay, and it can have important consequences."
  },
  {
    "objectID": "posts/16_accel_sgd.html#decoupled-weight-decay",
    "href": "posts/16_accel_sgd.html#decoupled-weight-decay",
    "title": "The Training Process",
    "section": "Decoupled Weight Decay",
    "text": "Decoupled Weight Decay\nWeight decay, which we discussed in &lt;&gt;, is equivalent to (in the case of vanilla SGD) updating the parameters with:\nnew_weight = weight - lr*weight.grad - lr*wd*weight\nThe last part of this formula explains the name of this technique: each weight is decayed by a factor lr * wd.\nThe other name of weight decay is L2 regularization, which consists in adding the sum of all squared weights to the loss (multiplied by the weight decay). As we have seen in &lt;&gt;, this can be directly expressed on the gradients with:\nweight.grad += wd*weight\nFor SGD, those two formulas are equivalent. However, this equivalence only holds for standard SGD, because we have seen that with momentum, RMSProp or in Adam, the update has some additional formulas around the gradient.\nMost libraries use the second formulation, but it was pointed out in “Decoupled Weight Decay Regularization” by Ilya Loshchilov and Frank Hutter, that the first one is the only correct approach with the Adam optimizer or momentum, which is why fastai makes it its default.\nNow you know everything that is hidden behind the line learn.fit_one_cycle!\nOptimizers are only one part of the training process, however when you need to change the training loop with fastai, you can’t directly change the code inside the library. Instead, we have designed a system of callbacks to let you write any tweaks you like in independent blocks that you can then mix and match."
  },
  {
    "objectID": "posts/16_accel_sgd.html#callbacks",
    "href": "posts/16_accel_sgd.html#callbacks",
    "title": "The Training Process",
    "section": "Callbacks",
    "text": "Callbacks\nSometimes you need to change how things work a little bit. In fact, we have already seen examples of this: Mixup, fp16 training, resetting the model after each epoch for training RNNs, and so forth. How do we go about making these kinds of tweaks to the training process?\nWe’ve seen the basic training loop, which, with the help of the Optimizer class, looks like this for a single epoch:\nfor xb,yb in dl:\n    loss = loss_func(model(xb), yb)\n    loss.backward()\n    opt.step()\n    opt.zero_grad()\n&lt;&gt; shows how to picture that.\n\nThe usual way for deep learning practitioners to customize the training loop is to make a copy of an existing training loop, and then insert the code necessary for their particular changes into it. This is how nearly all code that you find online will look. But it has some very serious problems.\nIt’s not very likely that some particular tweaked training loop is going to meet your particular needs. There are hundreds of changes that can be made to a training loop, which means there are billions and billions of possible permutations. You can’t just copy one tweak from a training loop here, another from a training loop there, and expect them all to work together. Each will be based on different assumptions about the environment that it’s working in, use different naming conventions, and expect the data to be in different formats.\nWe need a way to allow users to insert their own code at any part of the training loop, but in a consistent and well-defined way. Computer scientists have already come up with an elegant solution: the callback. A callback is a piece of code that you write, and inject into another piece of code at some predefined point. In fact, callbacks have been used with deep learning training loops for years. The problem is that in previous libraries it was only possible to inject code in a small subset of places where this may have been required, and, more importantly, callbacks were not able to do all the things they needed to do.\nIn order to be just as flexible as manually copying and pasting a training loop and directly inserting code into it, a callback must be able to read every possible piece of information available in the training loop, modify all of it as needed, and fully control when a batch, epoch, or even the whole training loop should be terminated. fastai is the first library to provide all of this functionality. It modifies the training loop so it looks like &lt;&gt;.\n\nThe real effectiveness of this approach has been borne out over the last couple of years—it has turned out that, by using the fastai callback system, we were able to implement every single new paper we tried and fulfilled every user request for modifying the training loop. The training loop itself has not required modifications. &lt;&gt; shows just a few of the callbacks that have been added.\n\nThe reason that this is important is because it means that whatever idea we have in our head, we can implement it. We need never dig into the source code of PyTorch or fastai and hack together some one-off system to try out our ideas. And when we do implement our own callbacks to develop our own ideas, we know that they will work together with all of the other functionality provided by fastai–so we will get progress bars, mixed-precision training, hyperparameter annealing, and so forth.\nAnother advantage is that it makes it easy to gradually remove or add functionality and perform ablation studies. You just need to adjust the list of callbacks you pass along to your fit function.\nAs an example, here is the fastai source code that is run for each batch of the training loop:\ntry:\n    self._split(b);                                  self('before_batch')\n    self.pred = self.model(*self.xb);                self('after_pred')\n    self.loss = self.loss_func(self.pred, *self.yb); self('after_loss')\n    if not self.training: return\n    self.loss.backward();                            self('after_backward')\n    self.opt.step();                                 self('after_step')\n    self.opt.zero_grad()\nexcept CancelBatchException:                         self('after_cancel_batch')\nfinally:                                             self('after_batch')\nThe calls of the form self('...') are where the callbacks are called. As you see, this happens after every step. The callback will receive the entire state of training, and can also modify it. For instance, the input data and target labels are in self.xb and self.yb, respectively; a callback can modify these to alter the data the training loop sees. It can also modify self.loss, or even the gradients.\nLet’s see how this works in practice by writing a callback.\n\nCreating a Callback\nWhen you want to write your own callback, the full list of available events is:\n\nbefore_fit:: called before doing anything; ideal for initial setup.\nbefore_epoch:: called at the beginning of each epoch; useful for any behavior you need to reset at each epoch.\nbefore_train:: called at the beginning of the training part of an epoch.\nbefore_batch:: called at the beginning of each batch, just after drawing said batch. It can be used to do any setup necessary for the batch (like hyperparameter scheduling) or to change the input/target before it goes into the model (for instance, apply Mixup).\nafter_pred:: called after computing the output of the model on the batch. It can be used to change that output before it’s fed to the loss function.\nafter_loss:: called after the loss has been computed, but before the backward pass. It can be used to add penalty to the loss (AR or TAR in RNN training, for instance).\nafter_backward:: called after the backward pass, but before the update of the parameters. It can be used to make changes to the gradients before said update (via gradient clipping, for instance).\nafter_step:: called after the step and before the gradients are zeroed.\nafter_batch:: called at the end of a batch, to perform any required cleanup before the next one.\nafter_train:: called at the end of the training phase of an epoch.\nbefore_validate:: called at the beginning of the validation phase of an epoch; useful for any setup needed specifically for validation.\nafter_validate:: called at the end of the validation part of an epoch.\nafter_epoch:: called at the end of an epoch, for any cleanup before the next one.\nafter_fit:: called at the end of training, for final cleanup.\n\nThe elements of this list are available as attributes of the special variable event, so you can just type event. and hit Tab in your notebook to see a list of all the options.\nLet’s take a look at an example. Do you recall how in &lt;&gt; we needed to ensure that our special reset method was called at the start of training and validation for each epoch? We used the ModelResetter callback provided by fastai to do this for us. But how does it work? Here’s the full source code for that class:\n\n\nShow code\nclass ModelResetter(Callback):\n    def before_train(self):    self.model.reset()\n    def before_validate(self): self.model.reset()\n\n\nYes, that’s actually it! It just does what we said in the preceding paragraph: after completing training or validation for an epoch, call a method named reset.\nCallbacks are often “short and sweet” like this one. In fact, let’s look at one more. Here’s the fastai source for the callback that adds RNN regularization (AR and TAR):\n\n\nShow code\nclass RNNRegularizer(Callback):\n    def __init__(self, alpha=0., beta=0.): self.alpha,self.beta = alpha,beta\n\n    def after_pred(self):\n        self.raw_out,self.out = self.pred[1],self.pred[2]\n        self.learn.pred = self.pred[0]\n\n    def after_loss(self):\n        if not self.training: return\n        if self.alpha != 0.:\n            self.learn.loss += self.alpha * self.out[-1].float().pow(2).mean()\n        if self.beta != 0.:\n            h = self.raw_out[-1]\n            if len(h)&gt;1:\n                self.learn.loss += self.beta * (h[:,1:] - h[:,:-1]\n                                               ).float().pow(2).mean()\n\n\n\nnote: Code It Yourself: Go back and reread “Activation Regularization and Temporal Activation Regularization” in &lt;&gt; then take another look at the code here. Make sure you understand what it’s doing, and why.\n\nIn both of these examples, notice how we can access attributes of the training loop by directly checking self.model or self.pred. That’s because a Callback will always try to get an attribute it doesn’t have inside the Learner associated with it. These are shortcuts for self.learn.model or self.learn.pred. Note that they work for reading attributes, but not for writing them, which is why when RNNRegularizer changes the loss or the predictions you see self.learn.loss = or self.learn.pred =.\nWhen writing a callback, the following attributes of Learner are available:\n\nmodel:: The model used for training/validation.\ndata:: The underlying DataLoaders.\nloss_func:: The loss function used.\nopt:: The optimizer used to update the model parameters.\nopt_func:: The function used to create the optimizer.\ncbs:: The list containing all the Callbacks.\ndl:: The current DataLoader used for iteration.\nx/xb:: The last input drawn from self.dl (potentially modified by callbacks). xb is always a tuple (potentially with one element) and x is detuplified. You can only assign to xb.\ny/yb:: The last target drawn from self.dl (potentially modified by callbacks). yb is always a tuple (potentially with one element) and y is detuplified. You can only assign to yb.\npred:: The last predictions from self.model (potentially modified by callbacks).\nloss:: The last computed loss (potentially modified by callbacks).\nn_epoch:: The number of epochs in this training.\nn_iter:: The number of iterations in the current self.dl.\nepoch:: The current epoch index (from 0 to n_epoch-1).\niter:: The current iteration index in self.dl (from 0 to n_iter-1).\n\nThe following attributes are added by TrainEvalCallback and should be available unless you went out of your way to remove that callback:\n\ntrain_iter:: The number of training iterations done since the beginning of this training\npct_train:: The percentage of training iterations completed (from 0. to 1.)\ntraining:: A flag to indicate whether or not we’re in training mode\n\nThe following attribute is added by Recorder and should be available unless you went out of your way to remove that callback:\n\nsmooth_loss:: An exponentially averaged version of the training loss\n\nCallbacks can also interrupt any part of the training loop by using a system of exceptions.\n\n\nCallback Ordering and Exceptions\nSometimes, callbacks need to be able to tell fastai to skip over a batch, or an epoch, or stop training altogether. For instance, consider TerminateOnNaNCallback. This handy callback will automatically stop training any time the loss becomes infinite or NaN (not a number). Here’s the fastai source for this callback:\n\n\nShow code\nclass TerminateOnNaNCallback(Callback):\n    run_before=Recorder\n    def after_batch(self):\n        if torch.isinf(self.loss) or torch.isnan(self.loss):\n            raise CancelFitException\n\n\nThe line raise CancelFitException tells the training loop to interrupt training at this point. The training loop catches this exception and does not run any further training or validation. The callback control flow exceptions available are:\n\nCancelBatchException:: Skip the rest of this batch and go to after_batch.\nCancelTrainException:: Skip the rest of the training part of the epoch and go to after_train.\nCancelValidException:: Skip the rest of the validation part of the epoch and go to after_validate.\nCancelEpochException:: Skip the rest of this epoch and go to after_epoch.\nCancelFitException:: Interrupt training and go to after_fit.\n\nYou can detect if one of those exceptions has occurred and add code that executes right after with the following events:\n\nafter_cancel_batch:: Reached immediately after a CancelBatchException before proceeding to after_batch\nafter_cancel_train:: Reached immediately after a CancelTrainException before proceeding to after_train\nafter_cancel_valid:: Reached immediately after a CancelValidException before proceeding to after_valid\nafter_cancel_epoch:: Reached immediately after a CancelEpochException before proceeding to after_epoch\nafter_cancel_fit:: Reached immediately after a CancelFitException before proceeding to after_fit\n\nSometimes, callbacks need to be called in a particular order. For example, in the case of TerminateOnNaNCallback, it’s important that Recorder runs its after_batch after this callback, to avoid registering an NaN loss. You can specify run_before (this callback must run before …) or run_after (this callback must run after …) in your callback to ensure the ordering that you need."
  },
  {
    "objectID": "posts/16_accel_sgd.html#conclusion",
    "href": "posts/16_accel_sgd.html#conclusion",
    "title": "The Training Process",
    "section": "Conclusion",
    "text": "Conclusion\nIn this chapter we took a close look at the training loop, exploring different variants of SGD and why they can be more powerful. At the time of writing, developing new optimizers is a very active area of research, so by the time you read this chapter there may be an addendum on the book’s website that presents new variants. Be sure to check out how our general optimizer framework can help you implement new optimizers very quickly.\nWe also examined the powerful callback system that allows you to customize every bit of the training loop by enabling you to inspect and modify any parameter you like between each step."
  },
  {
    "objectID": "posts/16_accel_sgd.html#questionnaire",
    "href": "posts/16_accel_sgd.html#questionnaire",
    "title": "The Training Process",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhat is the equation for a step of SGD, in math or code (as you prefer)?\nWhat do we pass to vision_learner to use a non-default optimizer?\nWhat are optimizer callbacks?\nWhat does zero_grad do in an optimizer?\nWhat does step do in an optimizer? How is it implemented in the general optimizer?\nRewrite sgd_cb to use the += operator, instead of add_.\nWhat is “momentum”? Write out the equation.\nWhat’s a physical analogy for momentum? How does it apply in our model training settings?\nWhat does a bigger value for momentum do to the gradients?\nWhat are the default values of momentum for 1cycle training?\nWhat is RMSProp? Write out the equation.\nWhat do the squared values of the gradients indicate?\nHow does Adam differ from momentum and RMSProp?\nWrite out the equation for Adam.\nCalculate the values of unbias_avg and w.avg for a few batches of dummy values.\nWhat’s the impact of having a high eps in Adam?\nRead through the optimizer notebook in fastai’s repo, and execute it.\nIn what situations do dynamic learning rate methods like Adam change the behavior of weight decay?\nWhat are the four steps of a training loop?\nWhy is using callbacks better than writing a new training loop for each tweak you want to add?\nWhat aspects of the design of fastai’s callback system make it as flexible as copying and pasting bits of code?\nHow can you get the list of events available to you when writing a callback?\nWrite the ModelResetter callback (without peeking).\nHow can you access the necessary attributes of the training loop inside a callback? When can you use or not use the shortcuts that go with them?\nHow can a callback influence the control flow of the training loop?\nWrite the TerminateOnNaN callback (without peeking, if possible).\nHow do you make sure your callback runs after or before another callback?\n\n\nFurther Research\n\nLook up the “Rectified Adam” paper, implement it using the general optimizer framework, and try it out. Search for other recent optimizers that work well in practice, and pick one to implement.\nLook at the mixed-precision callback with the documentation. Try to understand what each event and line of code does.\nImplement your own version of the learning rate finder from scratch. Compare it with fastai’s version.\nLook at the source code of the callbacks that ship with fastai. See if you can find one that’s similar to what you’re looking to do, to get some inspiration."
  },
  {
    "objectID": "posts/16_accel_sgd.html#foundations-of-deep-learning-wrap-up",
    "href": "posts/16_accel_sgd.html#foundations-of-deep-learning-wrap-up",
    "title": "The Training Process",
    "section": "Foundations of Deep Learning: Wrap up",
    "text": "Foundations of Deep Learning: Wrap up\nCongratulations, you have made it to the end of the “foundations of deep learning” section of the book! You now understand how all of fastai’s applications and most important architectures are built, and the recommended ways to train them—and you have all the information you need to build these from scratch. While you probably won’t need to create your own training loop, or batchnorm layer, for instance, knowing what is going on behind the scenes is very helpful for debugging, profiling, and deploying your solutions.\nSince you understand the foundations of fastai’s applications now, be sure to spend some time digging through the source notebooks and running and experimenting with parts of them. This will give you a better idea of how everything in fastai is developed.\nIn the next section, we will be looking even further under the covers: we’ll explore how the actual forward and backward passes of a neural network are done, and we will see what tools are at our disposal to get better performance. We will then continue with a project that brings together all the material in the book, which we will use to build a tool for interpreting convolutional neural networks. Last but not least, we’ll finish by building fastai’s Learner class from scratch."
  },
  {
    "objectID": "posts/18_CAM.html",
    "href": "posts/18_CAM.html",
    "title": "CNN Interpretation with CAM",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\n#hide\nfrom fastbook import *\n[[chapter_cam]]\nNow that we know how to build up pretty much anything from scratch, let’s use that knowledge to create entirely new (and very useful!) functionality: the class activation map. It gives us some insight into why a CNN made the predictions it did.\nIn the process, we’ll learn about one handy feature of PyTorch we haven’t seen before, the hook, and we’ll apply many of the concepts introduced in the rest of the book. If you want to really test out your understanding of the material in this book, after you’ve finished this chapter, try putting it aside and recreating the ideas here yourself from scratch (no peeking!)."
  },
  {
    "objectID": "posts/18_CAM.html#cam-and-hooks",
    "href": "posts/18_CAM.html#cam-and-hooks",
    "title": "CNN Interpretation with CAM",
    "section": "CAM and Hooks",
    "text": "CAM and Hooks\nThe class activation map (CAM) was introduced by Bolei Zhou et al. in “Learning Deep Features for Discriminative Localization”. It uses the output of the last convolutional layer (just before the average pooling layer) together with the predictions to give us a heatmap visualization of why the model made its decision. This is a useful tool for interpretation.\nMore precisely, at each position of our final convolutional layer, we have as many filters as in the last linear layer. We can therefore compute the dot product of those activations with the final weights to get, for each location on our feature map, the score of the feature that was used to make a decision.\nWe’re going to need a way to get access to the activations inside the model while it’s training. In PyTorch this can be done with a hook. Hooks are PyTorch’s equivalent of fastai’s callbacks. However, rather than allowing you to inject code into the training loop like a fastai Learner callback, hooks allow you to inject code into the forward and backward calculations themselves. We can attach a hook to any layer of the model, and it will be executed when we compute the outputs (forward hook) or during backpropagation (backward hook). A forward hook is a function that takes three things—a module, its input, and its output—and it can perform any behavior you want. (fastai also provides a handy HookCallback that we won’t cover here, but take a look at the fastai docs; it makes working with hooks a little easier.)\nTo illustrate, we’ll use the same cats and dogs model we trained in &lt;&gt;:\n\n\nShow code\npath = untar_data(URLs.PETS)/'images'\ndef is_cat(x): return x[0].isupper()\ndls = ImageDataLoaders.from_name_func(\n    path, get_image_files(path), valid_pct=0.2, seed=21,\n    label_func=is_cat, item_tfms=Resize(224))\nlearn = vision_learner(dls, resnet34, metrics=error_rate)\nlearn.fine_tune(1)\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.145994\n0.019272\n0.006089\n00:14\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.053405\n0.052540\n0.010825\n00:19\n\n\n\n\n\nTo start, we’ll grab a cat picture and a batch of data:\n\n\nShow code\nimg = PILImage.create(image_cat())\nx, = first(dls.test_dl([img]))\n\n\nFor CAM we want to store the activations of the last convolutional layer. We put our hook function in a class so it has a state that we can access later, and just store a copy of the output:\n\n\nShow code\nclass Hook():\n    def hook_func(self, m, i, o): self.stored = o.detach().clone()\n\n\nWe can then instantiate a Hook and attach it to the layer we want, which is the last layer of the CNN body:\n\n\nShow code\nhook_output = Hook()\nhook = learn.model[0].register_forward_hook(hook_output.hook_func)\n\n\nNow we can grab a batch and feed it through our model:\n\n\nShow code\nwith torch.no_grad(): output = learn.model.eval()(x)\n\n\nAnd we can access our stored activations:\n\n\nShow code\nact = hook_output.stored[0]\n\n\nLet’s also double-check our predictions:\n\n\nShow code\nF.softmax(output, dim=-1)\n\n\ntensor([[0.0010, 0.9990]], device='cuda:0')\n\n\nWe know 0 (for False) is “dog,” because the classes are automatically sorted in fastai, bu we can still double-check by looking at dls.vocab:\n\n\nShow code\ndls.vocab\n\n\n(#2) [False,True]\n\n\nSo, our model is very confident this was a picture of a cat.\nTo do the dot product of our weight matrix (2 by number of activations) with the activations (batch size by activations by rows by cols), we use a custom einsum:\n\n\nShow code\nx.shape\n\n\ntorch.Size([1, 3, 224, 224])\n\n\n\n\nShow code\ncam_map = torch.einsum('ck,kij-&gt;cij', learn.model[1][-1].weight, act)\ncam_map.shape\n\n\ntorch.Size([2, 7, 7])\n\n\nFor each image in our batch, and for each class, we get a 7×7 feature map that tells us where the activations were higher and where they were lower. This will let us see which areas of the pictures influenced the model’s decision.\nFor instance, we can find out which areas made the model decide this animal was a cat (note that we need to decode the input x since it’s been normalized by the DataLoader, and we need to cast to TensorImage since at the time this book is written PyTorch does not maintain types when indexing—this may be fixed by the time you are reading this):\n\n\nShow code\nx_dec = TensorImage(dls.train.decode((x,))[0][0])\n_,ax = plt.subplots()\nx_dec.show(ctx=ax)\nax.imshow(cam_map[1].detach().cpu(), alpha=0.6, extent=(0,224,224,0),\n              interpolation='bilinear', cmap='magma');\n\n\n\n\n\n\n\n\n\nThe areas in bright yellow correspond to high activations and the areas in purple to low activations. In this case, we can see the head and the front paw were the two main areas that made the model decide it was a picture of a cat.\nOnce you’re done with your hook, you should remove it as otherwise it might leak some memory:\n\n\nShow code\nhook.remove()\n\n\nThat’s why it’s usually a good idea to have the Hook class be a context manager, registering the hook when you enter it and removing it when you exit. A context manager is a Python construct that calls __enter__ when the object is created in a with clause, and __exit__ at the end of the with clause. For instance, this is how Python handles the with open(...) as f: construct that you’ll often see for opening files without requiring an explicit close(f) at the end. If we define Hook as follows:\n\n\nShow code\nclass Hook():\n    def __init__(self, m):\n        self.hook = m.register_forward_hook(self.hook_func)   \n    def hook_func(self, m, i, o): self.stored = o.detach().clone()\n    def __enter__(self, *args): return self\n    def __exit__(self, *args): self.hook.remove()\n\n\nwe can safely use it this way:\n\n\nShow code\nwith Hook(learn.model[0]) as hook:\n    with torch.no_grad(): output = learn.model.eval()(x.cuda())\n    act = hook.stored\n\n\nfastai provides this Hook class for you, as well as some other handy classes to make working with hooks easier.\nThis method is useful, but only works for the last layer. Gradient CAM is a variant that addresses this problem."
  },
  {
    "objectID": "posts/18_CAM.html#gradient-cam",
    "href": "posts/18_CAM.html#gradient-cam",
    "title": "CNN Interpretation with CAM",
    "section": "Gradient CAM",
    "text": "Gradient CAM\nThe method we just saw only lets us compute a heatmap with the last activations, since once we have our features, we have to multiply them by the last weight matrix. This won’t work for inner layers in the network. A variant introduced in the paper “Grad-CAM: Why Did You Say That? Visual Explanations from Deep Networks via Gradient-based Localization” in 2016 uses the gradients of the final activation for the desired class. If you remember a little bit about the backward pass, the gradients of the output of the last layer with respect to the input of that layer are equal to the layer weights, since it is a linear layer.\nWith deeper layers, we still want the gradients, but they won’t just be equal to the weights anymore. We have to calculate them. The gradients of every layer are calculated for us by PyTorch during the backward pass, but they’re not stored (except for tensors where requires_grad is True). We can, however, register a hook on the backward pass, which PyTorch will give the gradients to as a parameter, so we can store them there. For this we will use a HookBwd class that works like Hook, but intercepts and stores gradients instead of activations:\n\n\nShow code\nclass HookBwd():\n    def __init__(self, m):\n        self.hook = m.register_backward_hook(self.hook_func)   \n    def hook_func(self, m, gi, go): self.stored = go[0].detach().clone()\n    def __enter__(self, *args): return self\n    def __exit__(self, *args): self.hook.remove()\n\n\nThen for the class index 1 (for True, which is “cat”) we intercept the features of the last convolutional layer as before, and compute the gradients of the output activations of our class. We can’t just call output.backward(), because gradients only make sense with respect to a scalar (which is normally our loss) and output is a rank-2 tensor. But if we pick a single image (we’ll use 0) and a single class (we’ll use 1), then we can calculate the gradients of any weight or activation we like, with respect to that single value, using output[0,cls].backward(). Our hook intercepts the gradients that we’ll use as weights:\n\n\nShow code\ncls = 1\nwith HookBwd(learn.model[0]) as hookg:\n    with Hook(learn.model[0]) as hook:\n        output = learn.model.eval()(x.cuda())\n        act = hook.stored\n    output[0,cls].backward()\n    grad = hookg.stored\n\n\nThe weights for our Grad-CAM are given by the average of our gradients across the feature map. Then it’s exactly the same as before:\n\n\nShow code\nw = grad[0].mean(dim=[1,2], keepdim=True)\ncam_map = (w * act[0]).sum(0)\n\n\n\n\nShow code\n_,ax = plt.subplots()\nx_dec.show(ctx=ax)\nax.imshow(cam_map.detach().cpu(), alpha=0.6, extent=(0,224,224,0),\n              interpolation='bilinear', cmap='magma');\n\n\n\n\n\n\n\n\n\nThe novelty with Grad-CAM is that we can use it on any layer. For example, here we use it on the output of the second-to-last ResNet group:\n\n\nShow code\nwith HookBwd(learn.model[0][-2]) as hookg:\n    with Hook(learn.model[0][-2]) as hook:\n        output = learn.model.eval()(x.cuda())\n        act = hook.stored\n    output[0,cls].backward()\n    grad = hookg.stored\n\n\n\n\nShow code\nw = grad[0].mean(dim=[1,2], keepdim=True)\ncam_map = (w * act[0]).sum(0)\n\n\nAnd we can now view the activation map for this layer:\n\n\nShow code\n_,ax = plt.subplots()\nx_dec.show(ctx=ax)\nax.imshow(cam_map.detach().cpu(), alpha=0.6, extent=(0,224,224,0),\n              interpolation='bilinear', cmap='magma');"
  },
  {
    "objectID": "posts/18_CAM.html#conclusion",
    "href": "posts/18_CAM.html#conclusion",
    "title": "CNN Interpretation with CAM",
    "section": "Conclusion",
    "text": "Conclusion\nModel interpretation is an area of active research, and we just scraped the surface of what is possible in this brief chapter. Class activation maps give us insight into why a model predicted a certain result by showing the areas of the images that were most responsible for a given prediction. This can help us analyze false positives and figure out what kind of data is missing in our training to avoid them."
  },
  {
    "objectID": "posts/18_CAM.html#questionnaire",
    "href": "posts/18_CAM.html#questionnaire",
    "title": "CNN Interpretation with CAM",
    "section": "Questionnaire",
    "text": "Questionnaire\n\nWhat is a “hook” in PyTorch?\nWhich layer does CAM use the outputs of?\nWhy does CAM require a hook?\nLook at the source code of the ActivationStats class and see how it uses hooks.\nWrite a hook that stores the activations of a given layer in a model (without peeking, if possible).\nWhy do we call eval before getting the activations? Why do we use no_grad?\nUse torch.einsum to compute the “dog” or “cat” score of each of the locations in the last activation of the body of the model.\nHow do you check which order the categories are in (i.e., the correspondence of index-&gt;category)?\nWhy are we using decode when displaying the input image?\nWhat is a “context manager”? What special methods need to be defined to create one?\nWhy can’t we use plain CAM for the inner layers of a network?\nWhy do we need to register a hook on the backward pass in order to do Grad-CAM?\nWhy can’t we call output.backward() when output is a rank-2 tensor of output activations per image per class?\n\n\nFurther Research\n\nTry removing keepdim and see what happens. Look up this parameter in the PyTorch docs. Why do we need it in this notebook?\nCreate a notebook like this one, but for NLP, and use it to find which words in a movie review are most significant in assessing the sentiment of a particular movie review."
  },
  {
    "objectID": "posts/20_conclusion.html",
    "href": "posts/20_conclusion.html",
    "title": "Concluding Thoughts",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\n\n\n[[chapter_conclusion]]\nCongratulations! You’ve made it! If you have worked through all of the notebooks to this point, then you have joined the small, but growing group of people that are able to harness the power of deep learning to solve real problems. You may not feel that way yet—in fact you probably don’t. We have seen again and again that students that complete the fast.ai courses dramatically underestimate how effective they are as deep learning practitioners. We’ve also seen that these people are often underestimated by others with a classic academic background. So if you are to rise above your own expectations and the expectations of others, what you do next, after closing this book, is even more important than what you’ve done to get to this point.\nThe most important thing is to keep the momentum going. In fact, as you know from your study of optimizers, momentum is something that can build upon itself! So think about what you can do now to maintain and accelerate your deep learning journey. &lt;&gt; can give you a few ideas.\n\nWe’ve talked a lot in this book about the value of writing, whether it be code or prose. But perhaps you haven’t quite written as much as you had hoped so far. That’s okay! Now is a great chance to turn that around. You have a lot to say, at this point. Perhaps you have tried some experiments on a dataset that other people don’t seem to have looked at in quite the same way. Tell the world about it! Or perhaps thinking about trying out some ideas that occurred to you while you were reading—now is a great time to turn those ideas into code.\nIf you’d like to share your ideas, one fairly low-key place to do so is the fast.ai forums. You will find that the community there is very supportive and helpful, so please do drop by and let us know what you’ve been up to. Or see if you can answer a few questions for those folks who are earlier in their journey than you.\nAnd if you do have some successes, big or small, in your deep learning journey, be sure to let us know! It’s especially helpful if you post about them on the forums, because learning about the successes of other students can be extremely motivating.\nPerhaps the most important approach for many people to stay connected with their learning journey is to build a community around it. For instance, you could try to set up a small deep learning meetup in your local neighborhood, or a study group, or even offer to do a talk at a local meetup about what you’ve learned so far or some particular aspect that interested you. It’s okay that you are not the world’s leading expert just yet—the important thing to remember is that you now know about plenty of stuff that other people don’t, so they are very likely to appreciate your perspective.\nAnother community event which many people find useful is a regular book club or paper reading club. You might find that there are some in your neighbourhood already, and if not you could try to get one started yourself. Even if there is just one other person doing it with you, it will help give you the support and encouragement to get going.\nIf you are not in a geography where it’s easy to get together with like-minded folks in person, drop by the forums, because there are always people starting up virtual study groups. These generally involve a bunch of folks getting together over video chat once a week or so to discuss some deep learning topic.\nHopefully, by this point, you have a few little projects that you’ve put together and experiments that you’ve run. Our recommendation for the next step is to pick one of these and make it as good as you can. Really polish it up into the best piece of work that you can—something you are really proud of. This will force you to go much deeper into a topic, which will really test your understanding and give you the opportunity to see what you can do when you really put your mind to it.\nAlso, you may want to take a look at the fast.ai free online course that covers the same material as this book. Sometimes, seeing the same material in two different ways can really help to crystallize the ideas. In fact, human learning researchers have found that one of the best ways to learn material is to see the same thing from different angles, described in different ways.\nYour final mission, should you choose to accept it, is to take this book and give it to somebody that you know—and get somebody else started on their own deep learning journey!"
  },
  {
    "objectID": "posts/app_jupyter.html",
    "href": "posts/app_jupyter.html",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "",
    "text": "Show code\n#hide\n! [ -e /content ] && pip install -Uqq fastbook\nimport fastbook\nfastbook.setup_book()\nShow code\nfrom fastbook import *\n[appendix] [role=“Jupyter notebook 101”]\nYou can read this tutorial in the book, but we strongly suggest reading it in a (yes, you guessed it) Jupyter Notebook. This way, you will be able to actually try the different commands we will introduce here. If you followed one of our tutorials in the previous section, you should have been left in the course folder. Just click on nbs then dl1 and you should find the tutorial named 00_notebook_tutorial. Click on it to open a new tab and you’ll be ready to go.\nIf you are on your personal machine, clone the course repository and navigate inside before following the same steps."
  },
  {
    "objectID": "posts/app_jupyter.html#introduction",
    "href": "posts/app_jupyter.html#introduction",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Introduction",
    "text": "Introduction\nLet’s build up from the basics: what is a Jupyter Notebook? Well, we wrote this book using Jupyter Notebooks. A notebook is a document made of cells. You can write in some of them (markdown cells) or you can perform calculations in Python (code cells) and run them like this:\n\n\nShow code\n1+1\n\n\n2\n\n\nCool, huh? This combination of prose and code makes Jupyter Notebook ideal for experimentation: we can see the rationale for each experiment, the code, and the results in one comprehensive document.\nOther renowned institutions in academia and industry use Jupyter Notebook, including Google, Microsoft, IBM, Bloomberg, Berkeley and NASA among others. Even Nobel-winning economists use Jupyter Notebooks for their experiments and some suggest that Jupyter Notebooks will be the new format for research papers."
  },
  {
    "objectID": "posts/app_jupyter.html#writing",
    "href": "posts/app_jupyter.html#writing",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Writing",
    "text": "Writing\nA type of cell in which you can write text is called a Markdown cell. Markdown is a very popular markup language. To specify that a cell is Markdown you need to click in the drop-down menu in the toolbar and select Markdown.\nClick on the the ‘+’ button on the left and select Markdown from the toolbar. Now you can type your first Markdown cell. Write ‘My first markdown cell’ and press run.\n\n\n\nadd\n\n\nYou should see something like this:\nMy first markdown cell\nNow try making your first Code cell: follow the same steps as before but don’t change the cell type (when you add a cell its default type is Code). Type something like 3/2. You should see ‘1.5’ as output.\n\n\nShow code\n3/2\n\n\n1.5"
  },
  {
    "objectID": "posts/app_jupyter.html#modes",
    "href": "posts/app_jupyter.html#modes",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Modes",
    "text": "Modes\nIf you made a mistake in your Markdown cell and you have already run it, you will notice that you cannot edit it just by clicking on it. This is because you are in Command Mode. Jupyter Notebooks have two distinct modes:\n\nEdit Mode:: Allows you to edit a cell’s content.\nCommand Mode:: Allows you to edit the notebook as a whole and use keyboard shortcuts but not edit a cell’s content.\n\nYou can toggle between these two by either pressing ESC and Enter or clicking outside a cell or inside it (you need to double click if it’s a Markdown cell). You can always tell which mode you’re on: the current cell will have a green border in Edit Mode and a blue border in Command Mode. Try it!"
  },
  {
    "objectID": "posts/app_jupyter.html#other-important-considerations",
    "href": "posts/app_jupyter.html#other-important-considerations",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Other Important Considerations",
    "text": "Other Important Considerations\nYour notebook is autosaved every 120 seconds. If you want to manually save it you can just press the save button on the upper left corner or press s in Command Mode.\n\n\n\nSave\n\n\nTo know if your kernel (the Python engine executing your instructions behind the scenes) is computing or not, you can check the dot in your upper right corner. If the dot is full, it means that the kernel is working. If not, it is idle. You can place the mouse on it and the state of the kernel will be displayed.\n\n\n\nBusy\n\n\nThere are a couple of shortcuts you must know about which we use all the time (always in Command Mode). These are:\n\nShift+Enter:: Run the code or markdown on a cell\nUp Arrow+Down Arrow:: Toggle across cells\nb:: Create new cell\n0+0:: Reset Kernel\n\nYou can find more shortcuts by typing h (for help).\nYou may need to use a terminal in a Jupyter Notebook environment (for example to git pull on a repository). That is very easy to do: just press ‘New’ in your Home directory and ‘Terminal’. Don’t know how to use the Terminal? We made a tutorial for that as well. You can find it here.\n\n\n\nTerminal\n\n\nThat’s it. This is all you need to know to use Jupyter Notebooks. That said, we have more tips and tricks below, so don’t jump to the next section just yet."
  },
  {
    "objectID": "posts/app_jupyter.html#markdown-formatting",
    "href": "posts/app_jupyter.html#markdown-formatting",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Markdown Formatting",
    "text": "Markdown Formatting\n\nItalics, Bold, Strikethrough, Inline, Blockquotes and Links\nThe five most important concepts to format your code appropriately when using Markdown are:\n\nItalics:: Surround your text with _ or *.\nBold:: Surround your text with __ or **.\ninline:: Surround your text with `.\nblockquote:: Place &gt; before your text.\nLinks:: Surround the text you want to link with [] and place the link adjacent to the text, surrounded with ().\n\n\n\nHeadings\nNotice that including a hashtag before the text in a markdown cell makes the text a heading. The number of hashtags you include will determine the priority of the header (# is level one, ## is level two, ### is level three and #### is level four). We will add three new cells with the + button on the left to see how every level of heading looks.\nIn the notebook, double click on some headings and find out what level they are!\n\n\nLists\nThere are three types of lists in markdown.\nOrdered list:\n\nStep 1\n\nStep 1B\n\nStep 3\n\nUnordered list\n\nlearning rate\ncycle length\nweight decay\n\nTask list\n\nLearn Jupyter Notebooks\n\nWriting\nModes\nOther Considerations\n\nChange the world\n\nIn the notebook, double click on them to see how they are built!"
  },
  {
    "objectID": "posts/app_jupyter.html#code-capabilities",
    "href": "posts/app_jupyter.html#code-capabilities",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Code Capabilities",
    "text": "Code Capabilities\nCode cells are different than Markdown cells in that they have an output cell. This means that we can keep the results of our code within the notebook and share them. Let’s say we want to show a graph that explains the result of an experiment. We can just run the necessary cells and save the notebook. The output will be there when we open it again! Try it out by running the next four cells.\n\n\nShow code\n# Import necessary libraries\nfrom fastai.vision.all import * \nimport matplotlib.pyplot as plt\n\n\n\n\nShow code\nfrom PIL import Image\n\n\n\n\nShow code\na = 1\nb = a + 1\nc = b + a + 1\nd = c + b + a + 1\na, b, c ,d\n\n\n(1, 2, 4, 8)\n\n\n\n\nShow code\nplt.plot([a,b,c,d])\nplt.show()\n\n\n\n\n\n\n\n\n\nWe can also print images while experimenting.\n\n\nShow code\nImage.open(image_cat())"
  },
  {
    "objectID": "posts/app_jupyter.html#running-the-app-locally",
    "href": "posts/app_jupyter.html#running-the-app-locally",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Running the App Locally",
    "text": "Running the App Locally\nYou may be running Jupyter Notebook from an interactive coding environment like Gradient, Sagemaker or Salamander. You can also run a Jupyter Notebook server from your local computer. What’s more, if you have installed Anaconda you don’t even need to install Jupyter (if not, just pip install jupyter).\nYou just need to run jupyter notebook in your terminal. Remember to run it from a folder that contains all the folders/files you will want to access. You will be able to open, view, and edit files located within the directory in which you run this command but not files in parent directories.\nIf a browser tab does not open automatically once you run the command, you should CTRL+CLICK the link starting with ‘http://localhost:’ and this will open a new tab in your default browser."
  },
  {
    "objectID": "posts/app_jupyter.html#creating-a-notebook",
    "href": "posts/app_jupyter.html#creating-a-notebook",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Creating a Notebook",
    "text": "Creating a Notebook\nNow that you have your own Jupyter Notebook server running, you will probably want to write your own notebook. Click on ‘New’ in the upper left corner and ‘Python 3’ in the drop-down list (we are going to use a Python kernel for all our experiments).\n\n\n\nnew_notebook"
  },
  {
    "objectID": "posts/app_jupyter.html#shortcuts-and-tricks",
    "href": "posts/app_jupyter.html#shortcuts-and-tricks",
    "title": "Appendix: Jupyter Notebook 101",
    "section": "Shortcuts and Tricks",
    "text": "Shortcuts and Tricks\nHere is a list of useful tricks when in a Jupyter Notebook. Make sure you learn them early and use them as often as you can!\n\nCommand Mode Shortcuts\nThere are a couple of useful keyboard shortcuts in Command Mode that you can leverage to make Jupyter Notebook faster to use. Remember that you can switch back and forth between Command Mode and Edit Mode with Esc and Enter.\n\nm:: Convert cell to Markdown\ny:: Convert cell to Code\nd+d:: Delete cell\no:: Toggle between hide or show output\nShift+Arrow up/Arrow down:: Select multiple cells. Once you have selected them you can operate on them like a batch (run, copy, paste etc).\nShift+M:: Merge selected cells\n\n\n\nCell Tricks\nThere are also some tricks that you can code into a cell:\n\n?function-name:: Shows the definition and docstring for that function\n??function-name:: Shows the source code for that function\ndoc(function-name):: Shows the definition, docstring and links to the documentation of the function (only works with fastai library imported)\nShift+Tab (press once):: See which parameters to pass to a function\nShift+Tab (press three times):: Get additional information on the method\n\n\n\nLine Magics\nLine magics are functions that you can run on cells. They should be at the beginning of a line and take as an argument the rest of the line from where they are called. You call them by placing a ‘%’ sign before the command. The most useful ones are:\n\n%matplotlib inline:: Ensures that all matplotlib plots will be plotted in the output cell within the notebook and will be kept in the notebook when saved.\n\nThis command is always called together at the beginning of every notebook of the fast.ai course.\n%matplotlib inline\n\n%timeit:: Runs a line ten thousand times and displays the average time it took to run.\n\n\n\nShow code\n%timeit [i+1 for i in range(1000)]\n\n\n56.1 µs ± 592 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n\n\n%debug: Inspects a function which is showing an error using the Python debugger. If you type this in a cell just after an error, you will be directed to a console where you can inspect the values of all the variables."
  }
]